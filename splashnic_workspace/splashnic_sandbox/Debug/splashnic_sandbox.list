
splashnic_sandbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000680c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080069ec  080069ec  000169ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ad0  08006ad0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006ad0  08006ad0  00016ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ad8  08006ad8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ad8  08006ad8  00016ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006adc  08006adc  00016adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006ae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000978  20000078  08006b58  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009f0  08006b58  000209f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b5f  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d4b  00000000  00000000  00037c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  0003a958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  0003bcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fd0b  00000000  00000000  0003cf30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163d6  00000000  00000000  0005cc3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb354  00000000  00000000  00073011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013e365  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a90  00000000  00000000  0013e3b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	080069d4 	.word	0x080069d4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	080069d4 	.word	0x080069d4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80005cc:	1d39      	adds	r1, r7, #4
 80005ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005d2:	2201      	movs	r2, #1
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <__io_putchar+0x20>)
 80005d6:	f003 fdad 	bl	8004134 <HAL_UART_Transmit>

	return ch;
 80005da:	687b      	ldr	r3, [r7, #4]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	200001d0 	.word	0x200001d0

080005e8 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
 80005f4:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	b2d9      	uxtb	r1, r3
 80005fa:	4a11      	ldr	r2, [pc, #68]	; (8000640 <Set_LED+0x58>)
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	b2d9      	uxtb	r1, r3
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <Set_LED+0x58>)
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	4413      	add	r3, r2
 800060e:	460a      	mov	r2, r1
 8000610:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	b2d9      	uxtb	r1, r3
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <Set_LED+0x58>)
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	4413      	add	r3, r2
 800061e:	460a      	mov	r2, r1
 8000620:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	b2d9      	uxtb	r1, r3
 8000626:	4a06      	ldr	r2, [pc, #24]	; (8000640 <Set_LED+0x58>)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	4413      	add	r3, r2
 800062e:	460a      	mov	r2, r1
 8000630:	70da      	strb	r2, [r3, #3]
}
 8000632:	bf00      	nop
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	200009b8 	.word	0x200009b8

08000644 <HAL_UARTEx_RxEventCallback>:
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
	while (!datasentflag){};
	datasentflag = 0;
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	460b      	mov	r3, r1
 800064e:	807b      	strh	r3, [r7, #2]
	if(huart->Instance==USART1){
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a10      	ldr	r2, [pc, #64]	; (8000698 <HAL_UARTEx_RxEventCallback+0x54>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d10a      	bne.n	8000670 <HAL_UARTEx_RxEventCallback+0x2c>
		NMEA_status=1;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <HAL_UARTEx_RxEventCallback+0x58>)
 800065c:	2201      	movs	r2, #1
 800065e:	601a      	str	r2, [r3, #0]
		printf("Size=%d\r\n",Size);
 8000660:	887b      	ldrh	r3, [r7, #2]
 8000662:	4619      	mov	r1, r3
 8000664:	480e      	ldr	r0, [pc, #56]	; (80006a0 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000666:	f005 fa27 	bl	8005ab8 <iprintf>
		printf((char*)(msg_buffer));
 800066a:	480e      	ldr	r0, [pc, #56]	; (80006a4 <HAL_UARTEx_RxEventCallback+0x60>)
 800066c:	f005 fa24 	bl	8005ab8 <iprintf>
	}

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, msg_buffer, msg_size);
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <HAL_UARTEx_RxEventCallback+0x64>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	461a      	mov	r2, r3
 8000676:	490b      	ldr	r1, [pc, #44]	; (80006a4 <HAL_UARTEx_RxEventCallback+0x60>)
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <HAL_UARTEx_RxEventCallback+0x68>)
 800067a:	f005 f905 	bl	8005888 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f022 0204 	bic.w	r2, r2, #4
 800068c:	601a      	str	r2, [r3, #0]
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40013800 	.word	0x40013800
 800069c:	200009b4 	.word	0x200009b4
 80006a0:	080069ec 	.word	0x080069ec
 80006a4:	200005b4 	.word	0x200005b4
 80006a8:	20000000 	.word	0x20000000
 80006ac:	20000140 	.word	0x20000140
 80006b0:	20000260 	.word	0x20000260

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 fd8b 	bl	80011d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f852 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 fa4c 	bl	8000b5c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006c4:	f000 f99c 	bl	8000a00 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80006c8:	f000 fa0e 	bl	8000ae8 <MX_DMA_Init>
  MX_USB_PCD_Init();
 80006cc:	f000 f9e4 	bl	8000a98 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 80006d0:	f000 f896 	bl	8000800 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80006d4:	f000 f944 	bl	8000960 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	Set_LED(0, 255, 0, 0);
 80006d8:	2300      	movs	r3, #0
 80006da:	2200      	movs	r2, #0
 80006dc:	21ff      	movs	r1, #255	; 0xff
 80006de:	2000      	movs	r0, #0
 80006e0:	f7ff ff82 	bl	80005e8 <Set_LED>
	Set_LED(1, 0, 255, 0);
 80006e4:	2300      	movs	r3, #0
 80006e6:	22ff      	movs	r2, #255	; 0xff
 80006e8:	2100      	movs	r1, #0
 80006ea:	2001      	movs	r0, #1
 80006ec:	f7ff ff7c 	bl	80005e8 <Set_LED>
	Set_LED(2, 0, 0, 255);
 80006f0:	23ff      	movs	r3, #255	; 0xff
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	2002      	movs	r0, #2
 80006f8:	f7ff ff76 	bl	80005e8 <Set_LED>

	Set_LED(3, 46, 89, 128);
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	2259      	movs	r2, #89	; 0x59
 8000700:	212e      	movs	r1, #46	; 0x2e
 8000702:	2003      	movs	r0, #3
 8000704:	f7ff ff70 	bl	80005e8 <Set_LED>

	Set_LED(4, 156, 233, 100);
 8000708:	2364      	movs	r3, #100	; 0x64
 800070a:	22e9      	movs	r2, #233	; 0xe9
 800070c:	219c      	movs	r1, #156	; 0x9c
 800070e:	2004      	movs	r0, #4
 8000710:	f7ff ff6a 	bl	80005e8 <Set_LED>
	Set_LED(5, 102, 0, 235);
 8000714:	23eb      	movs	r3, #235	; 0xeb
 8000716:	2200      	movs	r2, #0
 8000718:	2166      	movs	r1, #102	; 0x66
 800071a:	2005      	movs	r0, #5
 800071c:	f7ff ff64 	bl	80005e8 <Set_LED>
	Set_LED(6, 47, 38, 77);
 8000720:	234d      	movs	r3, #77	; 0x4d
 8000722:	2226      	movs	r2, #38	; 0x26
 8000724:	212f      	movs	r1, #47	; 0x2f
 8000726:	2006      	movs	r0, #6
 8000728:	f7ff ff5e 	bl	80005e8 <Set_LED>

	Set_LED(7, 255, 200, 0);
 800072c:	2300      	movs	r3, #0
 800072e:	22c8      	movs	r2, #200	; 0xc8
 8000730:	21ff      	movs	r1, #255	; 0xff
 8000732:	2007      	movs	r0, #7
 8000734:	f7ff ff58 	bl	80005e8 <Set_LED>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, msg_buffer, msg_size);
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <main+0xa0>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	461a      	mov	r2, r3
 800073e:	4906      	ldr	r1, [pc, #24]	; (8000758 <main+0xa4>)
 8000740:	4806      	ldr	r0, [pc, #24]	; (800075c <main+0xa8>)
 8000742:	f005 f8a1 	bl	8005888 <HAL_UARTEx_ReceiveToIdle_DMA>
while(1){

	HAL_Delay(msg_TO);
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <main+0xac>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fdb2 	bl	80012b4 <HAL_Delay>
 8000750:	e7f9      	b.n	8000746 <main+0x92>
 8000752:	bf00      	nop
 8000754:	20000000 	.word	0x20000000
 8000758:	200005b4 	.word	0x200005b4
 800075c:	20000140 	.word	0x20000140
 8000760:	20000004 	.word	0x20000004

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	; 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0318 	add.w	r3, r7, #24
 800076e:	2238      	movs	r2, #56	; 0x38
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f005 f998 	bl	8005aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000786:	2000      	movs	r0, #0
 8000788:	f001 fca2 	bl	80020d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800078c:	2322      	movs	r3, #34	; 0x22
 800078e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000790:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000796:	2340      	movs	r3, #64	; 0x40
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800079a:	2301      	movs	r3, #1
 800079c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079e:	2302      	movs	r3, #2
 80007a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a2:	2302      	movs	r3, #2
 80007a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007a6:	2304      	movs	r3, #4
 80007a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007aa:	2355      	movs	r3, #85	; 0x55
 80007ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	f107 0318 	add.w	r3, r7, #24
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 fd3a 	bl	8002238 <HAL_RCC_OscConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80007ca:	f000 fa07 	bl	8000bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	230f      	movs	r3, #15
 80007d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d2:	2303      	movs	r3, #3
 80007d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2104      	movs	r1, #4
 80007e6:	4618      	mov	r0, r3
 80007e8:	f002 f83e 	bl	8002868 <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80007f2:	f000 f9f3 	bl	8000bdc <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	3750      	adds	r7, #80	; 0x50
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b09c      	sub	sp, #112	; 0x70
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000806:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000814:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000820:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
 8000830:	615a      	str	r2, [r3, #20]
 8000832:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2234      	movs	r2, #52	; 0x34
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f005 f934 	bl	8005aa8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000840:	4b45      	ldr	r3, [pc, #276]	; (8000958 <MX_TIM1_Init+0x158>)
 8000842:	4a46      	ldr	r2, [pc, #280]	; (800095c <MX_TIM1_Init+0x15c>)
 8000844:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000846:	4b44      	ldr	r3, [pc, #272]	; (8000958 <MX_TIM1_Init+0x158>)
 8000848:	2200      	movs	r2, #0
 800084a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084c:	4b42      	ldr	r3, [pc, #264]	; (8000958 <MX_TIM1_Init+0x158>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 213;
 8000852:	4b41      	ldr	r3, [pc, #260]	; (8000958 <MX_TIM1_Init+0x158>)
 8000854:	22d5      	movs	r2, #213	; 0xd5
 8000856:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000858:	4b3f      	ldr	r3, [pc, #252]	; (8000958 <MX_TIM1_Init+0x158>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800085e:	4b3e      	ldr	r3, [pc, #248]	; (8000958 <MX_TIM1_Init+0x158>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000864:	4b3c      	ldr	r3, [pc, #240]	; (8000958 <MX_TIM1_Init+0x158>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800086a:	483b      	ldr	r0, [pc, #236]	; (8000958 <MX_TIM1_Init+0x158>)
 800086c:	f002 fc08 	bl	8003080 <HAL_TIM_Base_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000876:	f000 f9b1 	bl	8000bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000880:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000884:	4619      	mov	r1, r3
 8000886:	4834      	ldr	r0, [pc, #208]	; (8000958 <MX_TIM1_Init+0x158>)
 8000888:	f002 fdc6 	bl	8003418 <HAL_TIM_ConfigClockSource>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000892:	f000 f9a3 	bl	8000bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000896:	4830      	ldr	r0, [pc, #192]	; (8000958 <MX_TIM1_Init+0x158>)
 8000898:	f002 fc49 	bl	800312e <HAL_TIM_PWM_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80008a2:	f000 f99b 	bl	8000bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a6:	2300      	movs	r3, #0
 80008a8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008aa:	2300      	movs	r3, #0
 80008ac:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008b6:	4619      	mov	r1, r3
 80008b8:	4827      	ldr	r0, [pc, #156]	; (8000958 <MX_TIM1_Init+0x158>)
 80008ba:	f003 fac9 	bl	8003e50 <HAL_TIMEx_MasterConfigSynchronization>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80008c4:	f000 f98a 	bl	8000bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008c8:	2360      	movs	r3, #96	; 0x60
 80008ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 70;
 80008cc:	2346      	movs	r3, #70	; 0x46
 80008ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d0:	2300      	movs	r3, #0
 80008d2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008d4:	2300      	movs	r3, #0
 80008d6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80008d8:	2304      	movs	r3, #4
 80008da:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80008dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008e2:	2300      	movs	r3, #0
 80008e4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008ea:	2200      	movs	r2, #0
 80008ec:	4619      	mov	r1, r3
 80008ee:	481a      	ldr	r0, [pc, #104]	; (8000958 <MX_TIM1_Init+0x158>)
 80008f0:	f002 fc7e 	bl	80031f0 <HAL_TIM_PWM_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80008fa:	f000 f96f 	bl	8000bdc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000916:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000924:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800092e:	2300      	movs	r3, #0
 8000930:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	4619      	mov	r1, r3
 800093a:	4807      	ldr	r0, [pc, #28]	; (8000958 <MX_TIM1_Init+0x158>)
 800093c:	f003 fb0a 	bl	8003f54 <HAL_TIMEx_ConfigBreakDeadTime>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000946:	f000 f949 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800094a:	4803      	ldr	r0, [pc, #12]	; (8000958 <MX_TIM1_Init+0x158>)
 800094c:	f000 f9bc 	bl	8000cc8 <HAL_TIM_MspPostInit>

}
 8000950:	bf00      	nop
 8000952:	3770      	adds	r7, #112	; 0x70
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000094 	.word	0x20000094
 800095c:	40012c00 	.word	0x40012c00

08000960 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000964:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <MX_USART1_UART_Init+0x98>)
 8000966:	4a25      	ldr	r2, [pc, #148]	; (80009fc <MX_USART1_UART_Init+0x9c>)
 8000968:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800096a:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <MX_USART1_UART_Init+0x98>)
 800096c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000970:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MX_USART1_UART_Init+0x98>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <MX_USART1_UART_Init+0x98>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800097e:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <MX_USART1_UART_Init+0x98>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <MX_USART1_UART_Init+0x98>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <MX_USART1_UART_Init+0x98>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <MX_USART1_UART_Init+0x98>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_USART1_UART_Init+0x98>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_USART1_UART_Init+0x98>)
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_USART1_UART_Init+0x98>)
 80009a4:	2210      	movs	r2, #16
 80009a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_USART1_UART_Init+0x98>)
 80009aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ae:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b0:	4811      	ldr	r0, [pc, #68]	; (80009f8 <MX_USART1_UART_Init+0x98>)
 80009b2:	f003 fb6f 	bl	8004094 <HAL_UART_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 80009bc:	f000 f90e 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c0:	2100      	movs	r1, #0
 80009c2:	480d      	ldr	r0, [pc, #52]	; (80009f8 <MX_USART1_UART_Init+0x98>)
 80009c4:	f004 fee4 	bl	8005790 <HAL_UARTEx_SetTxFifoThreshold>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 80009ce:	f000 f905 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d2:	2100      	movs	r1, #0
 80009d4:	4808      	ldr	r0, [pc, #32]	; (80009f8 <MX_USART1_UART_Init+0x98>)
 80009d6:	f004 ff19 	bl	800580c <HAL_UARTEx_SetRxFifoThreshold>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 80009e0:	f000 f8fc 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_USART1_UART_Init+0x98>)
 80009e6:	f004 fe9a 	bl	800571e <HAL_UARTEx_DisableFifoMode>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 80009f0:	f000 f8f4 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000140 	.word	0x20000140
 80009fc:	40013800 	.word	0x40013800

08000a00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a04:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a06:	4a23      	ldr	r2, [pc, #140]	; (8000a94 <MX_USART2_UART_Init+0x94>)
 8000a08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a0a:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a18:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a26:	220c      	movs	r2, #12
 8000a28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a48:	4811      	ldr	r0, [pc, #68]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a4a:	f003 fb23 	bl	8004094 <HAL_UART_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a54:	f000 f8c2 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	480d      	ldr	r0, [pc, #52]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a5c:	f004 fe98 	bl	8005790 <HAL_UARTEx_SetTxFifoThreshold>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a66:	f000 f8b9 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4808      	ldr	r0, [pc, #32]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a6e:	f004 fecd 	bl	800580c <HAL_UARTEx_SetRxFifoThreshold>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a78:	f000 f8b0 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <MX_USART2_UART_Init+0x90>)
 8000a7e:	f004 fe4e 	bl	800571e <HAL_UARTEx_DisableFifoMode>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a88:	f000 f8a8 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200001d0 	.word	0x200001d0
 8000a94:	40004400 	.word	0x40004400

08000a98 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a9c:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <MX_USB_PCD_Init+0x48>)
 8000a9e:	4a11      	ldr	r2, [pc, #68]	; (8000ae4 <MX_USB_PCD_Init+0x4c>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <MX_USB_PCD_Init+0x48>)
 8000aa4:	2208      	movs	r2, #8
 8000aa6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000aa8:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <MX_USB_PCD_Init+0x48>)
 8000aaa:	2202      	movs	r2, #2
 8000aac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_USB_PCD_Init+0x48>)
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <MX_USB_PCD_Init+0x48>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_USB_PCD_Init+0x48>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000ac0:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <MX_USB_PCD_Init+0x48>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_USB_PCD_Init+0x48>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000acc:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <MX_USB_PCD_Init+0x48>)
 8000ace:	f001 f9ef 	bl	8001eb0 <HAL_PCD_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000ad8:	f000 f880 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	200002c0 	.word	0x200002c0
 8000ae4:	40005c00 	.word	0x40005c00

08000ae8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_DMA_Init+0x70>)
 8000af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000af2:	4a19      	ldr	r2, [pc, #100]	; (8000b58 <MX_DMA_Init+0x70>)
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	6493      	str	r3, [r2, #72]	; 0x48
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <MX_DMA_Init+0x70>)
 8000afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_DMA_Init+0x70>)
 8000b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b0a:	4a13      	ldr	r2, [pc, #76]	; (8000b58 <MX_DMA_Init+0x70>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6493      	str	r3, [r2, #72]	; 0x48
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_DMA_Init+0x70>)
 8000b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	200b      	movs	r0, #11
 8000b24:	f000 fcc3 	bl	80014ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b28:	200b      	movs	r0, #11
 8000b2a:	f000 fcda 	bl	80014e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	200c      	movs	r0, #12
 8000b34:	f000 fcbb 	bl	80014ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000b38:	200c      	movs	r0, #12
 8000b3a:	f000 fcd2 	bl	80014e2 <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	205e      	movs	r0, #94	; 0x5e
 8000b44:	f000 fcb3 	bl	80014ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8000b48:	205e      	movs	r0, #94	; 0x5e
 8000b4a:	f000 fcca 	bl	80014e2 <HAL_NVIC_EnableIRQ>

}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40021000 	.word	0x40021000

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 030c 	add.w	r3, r7, #12
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <MX_GPIO_Init+0x78>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <MX_GPIO_Init+0x78>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <MX_GPIO_Init+0x78>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_GPIO_Init+0x78>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	4a11      	ldr	r2, [pc, #68]	; (8000bd4 <MX_GPIO_Init+0x78>)
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_GPIO_Init+0x78>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba8:	480b      	ldr	r0, [pc, #44]	; (8000bd8 <MX_GPIO_Init+0x7c>)
 8000baa:	f001 f969 	bl	8001e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <MX_GPIO_Init+0x7c>)
 8000bc8:	f000 ffd8 	bl	8001b7c <HAL_GPIO_Init>

}
 8000bcc:	bf00      	nop
 8000bce:	3720      	adds	r7, #32
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	48000400 	.word	0x48000400

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000be4:	e7fe      	b.n	8000be4 <Error_Handler+0x8>
	...

08000be8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <HAL_MspInit+0x44>)
 8000bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <HAL_MspInit+0x44>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <HAL_MspInit+0x44>)
 8000bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <HAL_MspInit+0x44>)
 8000c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0a:	4a08      	ldr	r2, [pc, #32]	; (8000c2c <HAL_MspInit+0x44>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c10:	6593      	str	r3, [r2, #88]	; 0x58
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_MspInit+0x44>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c1e:	f001 fafb 	bl	8002218 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000

08000c30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a1e      	ldr	r2, [pc, #120]	; (8000cb8 <HAL_TIM_Base_MspInit+0x88>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d136      	bne.n	8000cb0 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c42:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <HAL_TIM_Base_MspInit+0x8c>)
 8000c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c46:	4a1d      	ldr	r2, [pc, #116]	; (8000cbc <HAL_TIM_Base_MspInit+0x8c>)
 8000c48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <HAL_TIM_Base_MspInit+0x8c>)
 8000c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <HAL_TIM_Base_MspInit+0x90>)
 8000c5c:	4a19      	ldr	r2, [pc, #100]	; (8000cc4 <HAL_TIM_Base_MspInit+0x94>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8000c60:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <HAL_TIM_Base_MspInit+0x90>)
 8000c62:	222a      	movs	r2, #42	; 0x2a
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <HAL_TIM_Base_MspInit+0x90>)
 8000c68:	2210      	movs	r2, #16
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <HAL_TIM_Base_MspInit+0x90>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <HAL_TIM_Base_MspInit+0x90>)
 8000c74:	2280      	movs	r2, #128	; 0x80
 8000c76:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_TIM_Base_MspInit+0x90>)
 8000c7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c7e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <HAL_TIM_Base_MspInit+0x90>)
 8000c82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c86:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000c88:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <HAL_TIM_Base_MspInit+0x90>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <HAL_TIM_Base_MspInit+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000c94:	480a      	ldr	r0, [pc, #40]	; (8000cc0 <HAL_TIM_Base_MspInit+0x90>)
 8000c96:	f000 fc3f 	bl	8001518 <HAL_DMA_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8000ca0:	f7ff ff9c 	bl	8000bdc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a06      	ldr	r2, [pc, #24]	; (8000cc0 <HAL_TIM_Base_MspInit+0x90>)
 8000ca8:	625a      	str	r2, [r3, #36]	; 0x24
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <HAL_TIM_Base_MspInit+0x90>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40012c00 	.word	0x40012c00
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	200000e0 	.word	0x200000e0
 8000cc4:	40020008 	.word	0x40020008

08000cc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <HAL_TIM_MspPostInit+0x68>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d11d      	bne.n	8000d26 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_TIM_MspPostInit+0x6c>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	4a11      	ldr	r2, [pc, #68]	; (8000d34 <HAL_TIM_MspPostInit+0x6c>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <HAL_TIM_MspPostInit+0x6c>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000d14:	2306      	movs	r3, #6
 8000d16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d22:	f000 ff2b 	bl	8001b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d26:	bf00      	nop
 8000d28:	3720      	adds	r7, #32
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40012c00 	.word	0x40012c00
 8000d34:	40021000 	.word	0x40021000

08000d38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b09e      	sub	sp, #120	; 0x78
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d50:	f107 0320 	add.w	r3, r7, #32
 8000d54:	2244      	movs	r2, #68	; 0x44
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f004 fea5 	bl	8005aa8 <memset>
  if(huart->Instance==USART1)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a65      	ldr	r2, [pc, #404]	; (8000ef8 <HAL_UART_MspInit+0x1c0>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	f040 8086 	bne.w	8000e76 <HAL_UART_MspInit+0x13e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d72:	f107 0320 	add.w	r3, r7, #32
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 ff92 	bl	8002ca0 <HAL_RCCEx_PeriphCLKConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d82:	f7ff ff2b 	bl	8000bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d86:	4b5d      	ldr	r3, [pc, #372]	; (8000efc <HAL_UART_MspInit+0x1c4>)
 8000d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8a:	4a5c      	ldr	r2, [pc, #368]	; (8000efc <HAL_UART_MspInit+0x1c4>)
 8000d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d90:	6613      	str	r3, [r2, #96]	; 0x60
 8000d92:	4b5a      	ldr	r3, [pc, #360]	; (8000efc <HAL_UART_MspInit+0x1c4>)
 8000d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9a:	61fb      	str	r3, [r7, #28]
 8000d9c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	4b57      	ldr	r3, [pc, #348]	; (8000efc <HAL_UART_MspInit+0x1c4>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	4a56      	ldr	r2, [pc, #344]	; (8000efc <HAL_UART_MspInit+0x1c4>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000daa:	4b54      	ldr	r3, [pc, #336]	; (8000efc <HAL_UART_MspInit+0x1c4>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	61bb      	str	r3, [r7, #24]
 8000db4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	4b51      	ldr	r3, [pc, #324]	; (8000efc <HAL_UART_MspInit+0x1c4>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	4a50      	ldr	r2, [pc, #320]	; (8000efc <HAL_UART_MspInit+0x1c4>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc2:	4b4e      	ldr	r3, [pc, #312]	; (8000efc <HAL_UART_MspInit+0x1c4>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000de0:	2307      	movs	r3, #7
 8000de2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000de8:	4619      	mov	r1, r3
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dee:	f000 fec5 	bl	8001b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000df2:	2380      	movs	r3, #128	; 0x80
 8000df4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e02:	2307      	movs	r3, #7
 8000e04:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	483c      	ldr	r0, [pc, #240]	; (8000f00 <HAL_UART_MspInit+0x1c8>)
 8000e0e:	f000 feb5 	bl	8001b7c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8000e12:	4b3c      	ldr	r3, [pc, #240]	; (8000f04 <HAL_UART_MspInit+0x1cc>)
 8000e14:	4a3c      	ldr	r2, [pc, #240]	; (8000f08 <HAL_UART_MspInit+0x1d0>)
 8000e16:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000e18:	4b3a      	ldr	r3, [pc, #232]	; (8000f04 <HAL_UART_MspInit+0x1cc>)
 8000e1a:	2218      	movs	r2, #24
 8000e1c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e1e:	4b39      	ldr	r3, [pc, #228]	; (8000f04 <HAL_UART_MspInit+0x1cc>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e24:	4b37      	ldr	r3, [pc, #220]	; (8000f04 <HAL_UART_MspInit+0x1cc>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e2a:	4b36      	ldr	r3, [pc, #216]	; (8000f04 <HAL_UART_MspInit+0x1cc>)
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e30:	4b34      	ldr	r3, [pc, #208]	; (8000f04 <HAL_UART_MspInit+0x1cc>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e36:	4b33      	ldr	r3, [pc, #204]	; (8000f04 <HAL_UART_MspInit+0x1cc>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000e3c:	4b31      	ldr	r3, [pc, #196]	; (8000f04 <HAL_UART_MspInit+0x1cc>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e42:	4b30      	ldr	r3, [pc, #192]	; (8000f04 <HAL_UART_MspInit+0x1cc>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e48:	482e      	ldr	r0, [pc, #184]	; (8000f04 <HAL_UART_MspInit+0x1cc>)
 8000e4a:	f000 fb65 	bl	8001518 <HAL_DMA_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 8000e54:	f7ff fec2 	bl	8000bdc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a2a      	ldr	r2, [pc, #168]	; (8000f04 <HAL_UART_MspInit+0x1cc>)
 8000e5c:	67da      	str	r2, [r3, #124]	; 0x7c
 8000e5e:	4a29      	ldr	r2, [pc, #164]	; (8000f04 <HAL_UART_MspInit+0x1cc>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2100      	movs	r1, #0
 8000e68:	2025      	movs	r0, #37	; 0x25
 8000e6a:	f000 fb20 	bl	80014ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e6e:	2025      	movs	r0, #37	; 0x25
 8000e70:	f000 fb37 	bl	80014e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e74:	e03b      	b.n	8000eee <HAL_UART_MspInit+0x1b6>
  else if(huart->Instance==USART2)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a24      	ldr	r2, [pc, #144]	; (8000f0c <HAL_UART_MspInit+0x1d4>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d136      	bne.n	8000eee <HAL_UART_MspInit+0x1b6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e88:	f107 0320 	add.w	r3, r7, #32
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f001 ff07 	bl	8002ca0 <HAL_RCCEx_PeriphCLKConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <HAL_UART_MspInit+0x164>
      Error_Handler();
 8000e98:	f7ff fea0 	bl	8000bdc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HAL_UART_MspInit+0x1c4>)
 8000e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea0:	4a16      	ldr	r2, [pc, #88]	; (8000efc <HAL_UART_MspInit+0x1c4>)
 8000ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <HAL_UART_MspInit+0x1c4>)
 8000eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <HAL_UART_MspInit+0x1c4>)
 8000eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb8:	4a10      	ldr	r2, [pc, #64]	; (8000efc <HAL_UART_MspInit+0x1c4>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <HAL_UART_MspInit+0x1c4>)
 8000ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000ecc:	230c      	movs	r3, #12
 8000ece:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000edc:	2307      	movs	r3, #7
 8000ede:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eea:	f000 fe47 	bl	8001b7c <HAL_GPIO_Init>
}
 8000eee:	bf00      	nop
 8000ef0:	3778      	adds	r7, #120	; 0x78
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40013800 	.word	0x40013800
 8000efc:	40021000 	.word	0x40021000
 8000f00:	48000400 	.word	0x48000400
 8000f04:	20000260 	.word	0x20000260
 8000f08:	4002001c 	.word	0x4002001c
 8000f0c:	40004400 	.word	0x40004400

08000f10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b094      	sub	sp, #80	; 0x50
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2244      	movs	r2, #68	; 0x44
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f004 fdc1 	bl	8005aa8 <memset>
  if(hpcd->Instance==USB)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a11      	ldr	r2, [pc, #68]	; (8000f70 <HAL_PCD_MspInit+0x60>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d11a      	bne.n	8000f66 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f34:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000f36:	2300      	movs	r3, #0
 8000f38:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f001 feae 	bl	8002ca0 <HAL_RCCEx_PeriphCLKConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8000f4a:	f7ff fe47 	bl	8000bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_PCD_MspInit+0x64>)
 8000f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f52:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <HAL_PCD_MspInit+0x64>)
 8000f54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f58:	6593      	str	r3, [r2, #88]	; 0x58
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_PCD_MspInit+0x64>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000f66:	bf00      	nop
 8000f68:	3750      	adds	r7, #80	; 0x50
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40005c00 	.word	0x40005c00
 8000f74:	40021000 	.word	0x40021000

08000f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <NMI_Handler+0x4>

08000f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <BusFault_Handler+0x4>

08000f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <UsageFault_Handler+0x4>

08000f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc4:	f000 f958 	bl	8001278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <DMA1_Channel1_IRQHandler+0x10>)
 8000fd2:	f000 fc84 	bl	80018de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200000e0 	.word	0x200000e0

08000fe0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <DMA1_Channel2_IRQHandler+0x10>)
 8000fe6:	f000 fc7a 	bl	80018de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000260 	.word	0x20000260

08000ff4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <USART1_IRQHandler+0x10>)
 8000ffa:	f003 f931 	bl	8004260 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000140 	.word	0x20000140

08001008 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af00      	add	r7, sp, #0
 800101c:	60f8      	str	r0, [r7, #12]
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	e00a      	b.n	800103e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001028:	f3af 8000 	nop.w
 800102c:	4601      	mov	r1, r0
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	1c5a      	adds	r2, r3, #1
 8001032:	60ba      	str	r2, [r7, #8]
 8001034:	b2ca      	uxtb	r2, r1
 8001036:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	3301      	adds	r3, #1
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	429a      	cmp	r2, r3
 8001044:	dbf0      	blt.n	8001028 <_read+0x12>
	}

return len;
 8001046:	687b      	ldr	r3, [r7, #4]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	e009      	b.n	8001076 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	1c5a      	adds	r2, r3, #1
 8001066:	60ba      	str	r2, [r7, #8]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff faaa 	bl	80005c4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	3301      	adds	r3, #1
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	429a      	cmp	r2, r3
 800107c:	dbf1      	blt.n	8001062 <_write+0x12>
	}
	return len;
 800107e:	687b      	ldr	r3, [r7, #4]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <_close>:

int _close(int file)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	return -1;
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010b0:	605a      	str	r2, [r3, #4]
	return 0;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <_isatty>:

int _isatty(int file)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	return 1;
 80010c8:	2301      	movs	r3, #1
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b085      	sub	sp, #20
 80010da:	af00      	add	r7, sp, #0
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
	return 0;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f8:	4a14      	ldr	r2, [pc, #80]	; (800114c <_sbrk+0x5c>)
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <_sbrk+0x60>)
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <_sbrk+0x64>)
 800110e:	4a12      	ldr	r2, [pc, #72]	; (8001158 <_sbrk+0x68>)
 8001110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	429a      	cmp	r2, r3
 800111e:	d207      	bcs.n	8001130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001120:	f004 fc98 	bl	8005a54 <__errno>
 8001124:	4603      	mov	r3, r0
 8001126:	220c      	movs	r2, #12
 8001128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	e009      	b.n	8001144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001136:	4b07      	ldr	r3, [pc, #28]	; (8001154 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <_sbrk+0x64>)
 8001140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001142:	68fb      	ldr	r3, [r7, #12]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20008000 	.word	0x20008000
 8001150:	00000400 	.word	0x00000400
 8001154:	200009d8 	.word	0x200009d8
 8001158:	200009f0 	.word	0x200009f0

0800115c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <SystemInit+0x20>)
 8001162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001166:	4a05      	ldr	r2, [pc, #20]	; (800117c <SystemInit+0x20>)
 8001168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800116c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001180:	480d      	ldr	r0, [pc, #52]	; (80011b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001182:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001184:	480d      	ldr	r0, [pc, #52]	; (80011bc <LoopForever+0x6>)
  ldr r1, =_edata
 8001186:	490e      	ldr	r1, [pc, #56]	; (80011c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001188:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <LoopForever+0xe>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800118c:	e002      	b.n	8001194 <LoopCopyDataInit>

0800118e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001192:	3304      	adds	r3, #4

08001194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001198:	d3f9      	bcc.n	800118e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119a:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800119c:	4c0b      	ldr	r4, [pc, #44]	; (80011cc <LoopForever+0x16>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a0:	e001      	b.n	80011a6 <LoopFillZerobss>

080011a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a4:	3204      	adds	r2, #4

080011a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a8:	d3fb      	bcc.n	80011a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011aa:	f7ff ffd7 	bl	800115c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ae:	f004 fc57 	bl	8005a60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011b2:	f7ff fa7f 	bl	80006b4 <main>

080011b6 <LoopForever>:

LoopForever:
    b LoopForever
 80011b6:	e7fe      	b.n	80011b6 <LoopForever>
  ldr   r0, =_estack
 80011b8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80011bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80011c4:	08006ae0 	.word	0x08006ae0
  ldr r2, =_sbss
 80011c8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80011cc:	200009f0 	.word	0x200009f0

080011d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <ADC1_2_IRQHandler>

080011d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011d8:	2300      	movs	r3, #0
 80011da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011dc:	2003      	movs	r0, #3
 80011de:	f000 f95b 	bl	8001498 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011e2:	2000      	movs	r0, #0
 80011e4:	f000 f80e 	bl	8001204 <HAL_InitTick>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d002      	beq.n	80011f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	71fb      	strb	r3, [r7, #7]
 80011f2:	e001      	b.n	80011f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011f4:	f7ff fcf8 	bl	8000be8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011f8:	79fb      	ldrb	r3, [r7, #7]

}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800120c:	2300      	movs	r3, #0
 800120e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <HAL_InitTick+0x68>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d022      	beq.n	800125e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <HAL_InitTick+0x6c>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <HAL_InitTick+0x68>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001224:	fbb1 f3f3 	udiv	r3, r1, r3
 8001228:	fbb2 f3f3 	udiv	r3, r2, r3
 800122c:	4618      	mov	r0, r3
 800122e:	f000 f966 	bl	80014fe <HAL_SYSTICK_Config>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10f      	bne.n	8001258 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b0f      	cmp	r3, #15
 800123c:	d809      	bhi.n	8001252 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123e:	2200      	movs	r2, #0
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	f04f 30ff 	mov.w	r0, #4294967295
 8001246:	f000 f932 	bl	80014ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <HAL_InitTick+0x70>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	e007      	b.n	8001262 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	73fb      	strb	r3, [r7, #15]
 8001256:	e004      	b.n	8001262 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	e001      	b.n	8001262 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001262:	7bfb      	ldrb	r3, [r7, #15]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000010 	.word	0x20000010
 8001270:	20000008 	.word	0x20000008
 8001274:	2000000c 	.word	0x2000000c

08001278 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_IncTick+0x1c>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_IncTick+0x20>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4413      	add	r3, r2
 8001286:	4a03      	ldr	r2, [pc, #12]	; (8001294 <HAL_IncTick+0x1c>)
 8001288:	6013      	str	r3, [r2, #0]
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	200009dc 	.word	0x200009dc
 8001298:	20000010 	.word	0x20000010

0800129c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <HAL_GetTick+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	200009dc 	.word	0x200009dc

080012b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012bc:	f7ff ffee 	bl	800129c <HAL_GetTick>
 80012c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012cc:	d004      	beq.n	80012d8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <HAL_Delay+0x40>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	4413      	add	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012d8:	bf00      	nop
 80012da:	f7ff ffdf 	bl	800129c <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d8f7      	bhi.n	80012da <HAL_Delay+0x26>
  {
  }
}
 80012ea:	bf00      	nop
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000010 	.word	0x20000010

080012f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001314:	4013      	ands	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001320:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132a:	4a04      	ldr	r2, [pc, #16]	; (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	60d3      	str	r3, [r2, #12]
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <__NVIC_GetPriorityGrouping+0x18>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	f003 0307 	and.w	r3, r3, #7
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	2b00      	cmp	r3, #0
 800136c:	db0b      	blt.n	8001386 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	f003 021f 	and.w	r2, r3, #31
 8001374:	4907      	ldr	r1, [pc, #28]	; (8001394 <__NVIC_EnableIRQ+0x38>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	095b      	lsrs	r3, r3, #5
 800137c:	2001      	movs	r0, #1
 800137e:	fa00 f202 	lsl.w	r2, r0, r2
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000e100 	.word	0xe000e100

08001398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	db0a      	blt.n	80013c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	490c      	ldr	r1, [pc, #48]	; (80013e4 <__NVIC_SetPriority+0x4c>)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	440b      	add	r3, r1
 80013bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c0:	e00a      	b.n	80013d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4908      	ldr	r1, [pc, #32]	; (80013e8 <__NVIC_SetPriority+0x50>)
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	3b04      	subs	r3, #4
 80013d0:	0112      	lsls	r2, r2, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	440b      	add	r3, r1
 80013d6:	761a      	strb	r2, [r3, #24]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000e100 	.word	0xe000e100
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	; 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f1c3 0307 	rsb	r3, r3, #7
 8001406:	2b04      	cmp	r3, #4
 8001408:	bf28      	it	cs
 800140a:	2304      	movcs	r3, #4
 800140c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3304      	adds	r3, #4
 8001412:	2b06      	cmp	r3, #6
 8001414:	d902      	bls.n	800141c <NVIC_EncodePriority+0x30>
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3b03      	subs	r3, #3
 800141a:	e000      	b.n	800141e <NVIC_EncodePriority+0x32>
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	f04f 32ff 	mov.w	r2, #4294967295
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	401a      	ands	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001434:	f04f 31ff 	mov.w	r1, #4294967295
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	43d9      	mvns	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	4313      	orrs	r3, r2
         );
}
 8001446:	4618      	mov	r0, r3
 8001448:	3724      	adds	r7, #36	; 0x24
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001464:	d301      	bcc.n	800146a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001466:	2301      	movs	r3, #1
 8001468:	e00f      	b.n	800148a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146a:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <SysTick_Config+0x40>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001472:	210f      	movs	r1, #15
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f7ff ff8e 	bl	8001398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <SysTick_Config+0x40>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001482:	4b04      	ldr	r3, [pc, #16]	; (8001494 <SysTick_Config+0x40>)
 8001484:	2207      	movs	r2, #7
 8001486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	e000e010 	.word	0xe000e010

08001498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ff29 	bl	80012f8 <__NVIC_SetPriorityGrouping>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014bc:	f7ff ff40 	bl	8001340 <__NVIC_GetPriorityGrouping>
 80014c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f7ff ff90 	bl	80013ec <NVIC_EncodePriority>
 80014cc:	4602      	mov	r2, r0
 80014ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff5f 	bl	8001398 <__NVIC_SetPriority>
}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff33 	bl	800135c <__NVIC_EnableIRQ>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ffa4 	bl	8001454 <SysTick_Config>
 800150c:	4603      	mov	r3, r0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e08d      	b.n	8001646 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	4b47      	ldr	r3, [pc, #284]	; (8001650 <HAL_DMA_Init+0x138>)
 8001532:	429a      	cmp	r2, r3
 8001534:	d80f      	bhi.n	8001556 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	4b45      	ldr	r3, [pc, #276]	; (8001654 <HAL_DMA_Init+0x13c>)
 800153e:	4413      	add	r3, r2
 8001540:	4a45      	ldr	r2, [pc, #276]	; (8001658 <HAL_DMA_Init+0x140>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	091b      	lsrs	r3, r3, #4
 8001548:	009a      	lsls	r2, r3, #2
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a42      	ldr	r2, [pc, #264]	; (800165c <HAL_DMA_Init+0x144>)
 8001552:	641a      	str	r2, [r3, #64]	; 0x40
 8001554:	e00e      	b.n	8001574 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	4b40      	ldr	r3, [pc, #256]	; (8001660 <HAL_DMA_Init+0x148>)
 800155e:	4413      	add	r3, r2
 8001560:	4a3d      	ldr	r2, [pc, #244]	; (8001658 <HAL_DMA_Init+0x140>)
 8001562:	fba2 2303 	umull	r2, r3, r2, r3
 8001566:	091b      	lsrs	r3, r3, #4
 8001568:	009a      	lsls	r2, r3, #2
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a3c      	ldr	r2, [pc, #240]	; (8001664 <HAL_DMA_Init+0x14c>)
 8001572:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2202      	movs	r2, #2
 8001578:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800158a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800158e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001598:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fa76 	bl	8001ab8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015d4:	d102      	bne.n	80015dc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015f0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d010      	beq.n	800161c <HAL_DMA_Init+0x104>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d80c      	bhi.n	800161c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 fa96 	bl	8001b34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	e008      	b.n	800162e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40020407 	.word	0x40020407
 8001654:	bffdfff8 	.word	0xbffdfff8
 8001658:	cccccccd 	.word	0xcccccccd
 800165c:	40020000 	.word	0x40020000
 8001660:	bffdfbf8 	.word	0xbffdfbf8
 8001664:	40020400 	.word	0x40020400

08001668 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
 8001674:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001680:	2b01      	cmp	r3, #1
 8001682:	d101      	bne.n	8001688 <HAL_DMA_Start_IT+0x20>
 8001684:	2302      	movs	r3, #2
 8001686:	e066      	b.n	8001756 <HAL_DMA_Start_IT+0xee>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b01      	cmp	r3, #1
 800169a:	d155      	bne.n	8001748 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2202      	movs	r2, #2
 80016a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2200      	movs	r2, #0
 80016a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0201 	bic.w	r2, r2, #1
 80016b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	68b9      	ldr	r1, [r7, #8]
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f000 f9bb 	bl	8001a3c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d008      	beq.n	80016e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f042 020e 	orr.w	r2, r2, #14
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	e00f      	b.n	8001700 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0204 	bic.w	r2, r2, #4
 80016ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 020a 	orr.w	r2, r2, #10
 80016fe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d007      	beq.n	800171e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800171c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001722:	2b00      	cmp	r3, #0
 8001724:	d007      	beq.n	8001736 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001730:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001734:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f042 0201 	orr.w	r2, r2, #1
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	e005      	b.n	8001754 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001750:	2302      	movs	r3, #2
 8001752:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001754:	7dfb      	ldrb	r3, [r7, #23]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800175e:	b480      	push	{r7}
 8001760:	b085      	sub	sp, #20
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d005      	beq.n	8001782 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2204      	movs	r2, #4
 800177a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
 8001780:	e037      	b.n	80017f2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 020e 	bic.w	r2, r2, #14
 8001790:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800179c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017a0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0201 	bic.w	r2, r2, #1
 80017b0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	f003 021f 	and.w	r2, r3, #31
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	2101      	movs	r1, #1
 80017c0:	fa01 f202 	lsl.w	r2, r1, r2
 80017c4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80017ce:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00c      	beq.n	80017f2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017e6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80017f0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d00d      	beq.n	8001844 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2204      	movs	r2, #4
 800182c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	73fb      	strb	r3, [r7, #15]
 8001842:	e047      	b.n	80018d4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 020e 	bic.w	r2, r2, #14
 8001852:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0201 	bic.w	r2, r2, #1
 8001862:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800186e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001872:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001878:	f003 021f 	and.w	r2, r3, #31
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	2101      	movs	r1, #1
 8001882:	fa01 f202 	lsl.w	r2, r1, r2
 8001886:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001890:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00c      	beq.n	80018b4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80018b2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	4798      	blx	r3
    }
  }
  return status;
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	f003 031f 	and.w	r3, r3, #31
 80018fe:	2204      	movs	r2, #4
 8001900:	409a      	lsls	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4013      	ands	r3, r2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d026      	beq.n	8001958 <HAL_DMA_IRQHandler+0x7a>
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d021      	beq.n	8001958 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0320 	and.w	r3, r3, #32
 800191e:	2b00      	cmp	r3, #0
 8001920:	d107      	bne.n	8001932 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0204 	bic.w	r2, r2, #4
 8001930:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	f003 021f 	and.w	r2, r3, #31
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	2104      	movs	r1, #4
 8001940:	fa01 f202 	lsl.w	r2, r1, r2
 8001944:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	2b00      	cmp	r3, #0
 800194c:	d071      	beq.n	8001a32 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001956:	e06c      	b.n	8001a32 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195c:	f003 031f 	and.w	r3, r3, #31
 8001960:	2202      	movs	r2, #2
 8001962:	409a      	lsls	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4013      	ands	r3, r2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d02e      	beq.n	80019ca <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d029      	beq.n	80019ca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0320 	and.w	r3, r3, #32
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10b      	bne.n	800199c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 020a 	bic.w	r2, r2, #10
 8001992:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a0:	f003 021f 	and.w	r2, r3, #31
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	2102      	movs	r1, #2
 80019aa:	fa01 f202 	lsl.w	r2, r1, r2
 80019ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d038      	beq.n	8001a32 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80019c8:	e033      	b.n	8001a32 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	f003 031f 	and.w	r3, r3, #31
 80019d2:	2208      	movs	r2, #8
 80019d4:	409a      	lsls	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4013      	ands	r3, r2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d02a      	beq.n	8001a34 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d025      	beq.n	8001a34 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 020e 	bic.w	r2, r2, #14
 80019f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fc:	f003 021f 	and.w	r2, r3, #31
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	2101      	movs	r1, #1
 8001a06:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d004      	beq.n	8001a34 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001a32:	bf00      	nop
 8001a34:	bf00      	nop
}
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
 8001a48:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a52:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a64:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f003 021f 	and.w	r2, r3, #31
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	2101      	movs	r1, #1
 8001a74:	fa01 f202 	lsl.w	r2, r1, r2
 8001a78:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d108      	bne.n	8001a9c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a9a:	e007      	b.n	8001aac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	60da      	str	r2, [r3, #12]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d802      	bhi.n	8001ad2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001acc:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	e001      	b.n	8001ad6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001ad4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	3b08      	subs	r3, #8
 8001ae2:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae8:	091b      	lsrs	r3, r3, #4
 8001aea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af0:	089b      	lsrs	r3, r3, #2
 8001af2:	009a      	lsls	r2, r3, #2
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4413      	add	r3, r2
 8001af8:	461a      	mov	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001b02:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 031f 	and.w	r3, r3, #31
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b12:	bf00      	nop
 8001b14:	371c      	adds	r7, #28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40020407 	.word	0x40020407
 8001b24:	40020800 	.word	0x40020800
 8001b28:	40020820 	.word	0x40020820
 8001b2c:	cccccccd 	.word	0xcccccccd
 8001b30:	40020880 	.word	0x40020880

08001b34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001b48:	4413      	add	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a08      	ldr	r2, [pc, #32]	; (8001b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001b56:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	f003 031f 	and.w	r3, r3, #31
 8001b60:	2201      	movs	r2, #1
 8001b62:	409a      	lsls	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	1000823f 	.word	0x1000823f
 8001b78:	40020940 	.word	0x40020940

08001b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b8a:	e15a      	b.n	8001e42 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	2101      	movs	r1, #1
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 814c 	beq.w	8001e3c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d005      	beq.n	8001bbc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d130      	bne.n	8001c1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	f003 0201 	and.w	r2, r3, #1
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d017      	beq.n	8001c5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	2203      	movs	r2, #3
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d123      	bne.n	8001cae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	08da      	lsrs	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3208      	adds	r2, #8
 8001c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	08da      	lsrs	r2, r3, #3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3208      	adds	r2, #8
 8001ca8:	6939      	ldr	r1, [r7, #16]
 8001caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	2203      	movs	r2, #3
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0203 	and.w	r2, r3, #3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80a6 	beq.w	8001e3c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf0:	4b5b      	ldr	r3, [pc, #364]	; (8001e60 <HAL_GPIO_Init+0x2e4>)
 8001cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf4:	4a5a      	ldr	r2, [pc, #360]	; (8001e60 <HAL_GPIO_Init+0x2e4>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6613      	str	r3, [r2, #96]	; 0x60
 8001cfc:	4b58      	ldr	r3, [pc, #352]	; (8001e60 <HAL_GPIO_Init+0x2e4>)
 8001cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d08:	4a56      	ldr	r2, [pc, #344]	; (8001e64 <HAL_GPIO_Init+0x2e8>)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	089b      	lsrs	r3, r3, #2
 8001d0e:	3302      	adds	r3, #2
 8001d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	220f      	movs	r2, #15
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d32:	d01f      	beq.n	8001d74 <HAL_GPIO_Init+0x1f8>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a4c      	ldr	r2, [pc, #304]	; (8001e68 <HAL_GPIO_Init+0x2ec>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d019      	beq.n	8001d70 <HAL_GPIO_Init+0x1f4>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a4b      	ldr	r2, [pc, #300]	; (8001e6c <HAL_GPIO_Init+0x2f0>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d013      	beq.n	8001d6c <HAL_GPIO_Init+0x1f0>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a4a      	ldr	r2, [pc, #296]	; (8001e70 <HAL_GPIO_Init+0x2f4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d00d      	beq.n	8001d68 <HAL_GPIO_Init+0x1ec>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a49      	ldr	r2, [pc, #292]	; (8001e74 <HAL_GPIO_Init+0x2f8>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d007      	beq.n	8001d64 <HAL_GPIO_Init+0x1e8>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a48      	ldr	r2, [pc, #288]	; (8001e78 <HAL_GPIO_Init+0x2fc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d101      	bne.n	8001d60 <HAL_GPIO_Init+0x1e4>
 8001d5c:	2305      	movs	r3, #5
 8001d5e:	e00a      	b.n	8001d76 <HAL_GPIO_Init+0x1fa>
 8001d60:	2306      	movs	r3, #6
 8001d62:	e008      	b.n	8001d76 <HAL_GPIO_Init+0x1fa>
 8001d64:	2304      	movs	r3, #4
 8001d66:	e006      	b.n	8001d76 <HAL_GPIO_Init+0x1fa>
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e004      	b.n	8001d76 <HAL_GPIO_Init+0x1fa>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e002      	b.n	8001d76 <HAL_GPIO_Init+0x1fa>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <HAL_GPIO_Init+0x1fa>
 8001d74:	2300      	movs	r3, #0
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	f002 0203 	and.w	r2, r2, #3
 8001d7c:	0092      	lsls	r2, r2, #2
 8001d7e:	4093      	lsls	r3, r2
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d86:	4937      	ldr	r1, [pc, #220]	; (8001e64 <HAL_GPIO_Init+0x2e8>)
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	089b      	lsrs	r3, r3, #2
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d94:	4b39      	ldr	r3, [pc, #228]	; (8001e7c <HAL_GPIO_Init+0x300>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001db8:	4a30      	ldr	r2, [pc, #192]	; (8001e7c <HAL_GPIO_Init+0x300>)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dbe:	4b2f      	ldr	r3, [pc, #188]	; (8001e7c <HAL_GPIO_Init+0x300>)
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001de2:	4a26      	ldr	r2, [pc, #152]	; (8001e7c <HAL_GPIO_Init+0x300>)
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001de8:	4b24      	ldr	r3, [pc, #144]	; (8001e7c <HAL_GPIO_Init+0x300>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e0c:	4a1b      	ldr	r2, [pc, #108]	; (8001e7c <HAL_GPIO_Init+0x300>)
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <HAL_GPIO_Init+0x300>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e36:	4a11      	ldr	r2, [pc, #68]	; (8001e7c <HAL_GPIO_Init+0x300>)
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f47f ae9d 	bne.w	8001b8c <HAL_GPIO_Init+0x10>
  }
}
 8001e52:	bf00      	nop
 8001e54:	bf00      	nop
 8001e56:	371c      	adds	r7, #28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40010000 	.word	0x40010000
 8001e68:	48000400 	.word	0x48000400
 8001e6c:	48000800 	.word	0x48000800
 8001e70:	48000c00 	.word	0x48000c00
 8001e74:	48001000 	.word	0x48001000
 8001e78:	48001400 	.word	0x48001400
 8001e7c:	40010400 	.word	0x40010400

08001e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	807b      	strh	r3, [r7, #2]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e90:	787b      	ldrb	r3, [r7, #1]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e96:	887a      	ldrh	r2, [r7, #2]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e9c:	e002      	b.n	8001ea4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e9e:	887a      	ldrh	r2, [r7, #2]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eb2:	b08b      	sub	sp, #44	; 0x2c
 8001eb4:	af06      	add	r7, sp, #24
 8001eb6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e0d7      	b.n	8002072 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d106      	bne.n	8001edc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff f81a 	bl	8000f10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2203      	movs	r2, #3
 8001ee0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 fd77 	bl	80059dc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	73fb      	strb	r3, [r7, #15]
 8001ef2:	e04c      	b.n	8001f8e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	440b      	add	r3, r1
 8001f04:	3301      	adds	r3, #1
 8001f06:	2201      	movs	r2, #1
 8001f08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	7bfa      	ldrb	r2, [r7, #15]
 8001f1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f1e:	7bfa      	ldrb	r2, [r7, #15]
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	b298      	uxth	r0, r3
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	440b      	add	r3, r1
 8001f30:	3336      	adds	r3, #54	; 0x36
 8001f32:	4602      	mov	r2, r0
 8001f34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	440b      	add	r3, r1
 8001f46:	3303      	adds	r3, #3
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	440b      	add	r3, r1
 8001f5a:	3338      	adds	r3, #56	; 0x38
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f60:	7bfa      	ldrb	r2, [r7, #15]
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	440b      	add	r3, r1
 8001f6e:	333c      	adds	r3, #60	; 0x3c
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	440b      	add	r3, r1
 8001f82:	3340      	adds	r3, #64	; 0x40
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d3ad      	bcc.n	8001ef4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	73fb      	strb	r3, [r7, #15]
 8001f9c:	e044      	b.n	8002028 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f9e:	7bfa      	ldrb	r2, [r7, #15]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	440b      	add	r3, r1
 8001fac:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fb4:	7bfa      	ldrb	r2, [r7, #15]
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	440b      	add	r3, r1
 8001fc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	440b      	add	r3, r1
 8001fee:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	440b      	add	r3, r1
 8002004:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800200c:	7bfa      	ldrb	r2, [r7, #15]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	440b      	add	r3, r1
 800201a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	3301      	adds	r3, #1
 8002026:	73fb      	strb	r3, [r7, #15]
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	429a      	cmp	r2, r3
 8002030:	d3b5      	bcc.n	8001f9e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	687e      	ldr	r6, [r7, #4]
 800203a:	466d      	mov	r5, sp
 800203c:	f106 0410 	add.w	r4, r6, #16
 8002040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002044:	6823      	ldr	r3, [r4, #0]
 8002046:	602b      	str	r3, [r5, #0]
 8002048:	1d33      	adds	r3, r6, #4
 800204a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800204c:	6838      	ldr	r0, [r7, #0]
 800204e:	f003 fce0 	bl	8005a12 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d102      	bne.n	8002070 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f805 	bl	800207a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800207a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800207a:	b480      	push	{r7}
 800207c:	b085      	sub	sp, #20
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800209e:	b29b      	uxth	r3, r3
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	f043 0302 	orr.w	r3, r3, #2
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
	...

080020d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d141      	bne.n	8002162 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020de:	4b4b      	ldr	r3, [pc, #300]	; (800220c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ea:	d131      	bne.n	8002150 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020ec:	4b47      	ldr	r3, [pc, #284]	; (800220c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020f2:	4a46      	ldr	r2, [pc, #280]	; (800220c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020fc:	4b43      	ldr	r3, [pc, #268]	; (800220c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002104:	4a41      	ldr	r2, [pc, #260]	; (800220c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800210a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800210c:	4b40      	ldr	r3, [pc, #256]	; (8002210 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2232      	movs	r2, #50	; 0x32
 8002112:	fb02 f303 	mul.w	r3, r2, r3
 8002116:	4a3f      	ldr	r2, [pc, #252]	; (8002214 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002118:	fba2 2303 	umull	r2, r3, r2, r3
 800211c:	0c9b      	lsrs	r3, r3, #18
 800211e:	3301      	adds	r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002122:	e002      	b.n	800212a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	3b01      	subs	r3, #1
 8002128:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800212a:	4b38      	ldr	r3, [pc, #224]	; (800220c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002136:	d102      	bne.n	800213e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f2      	bne.n	8002124 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800213e:	4b33      	ldr	r3, [pc, #204]	; (800220c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800214a:	d158      	bne.n	80021fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e057      	b.n	8002200 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002150:	4b2e      	ldr	r3, [pc, #184]	; (800220c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002156:	4a2d      	ldr	r2, [pc, #180]	; (800220c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800215c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002160:	e04d      	b.n	80021fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002168:	d141      	bne.n	80021ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800216a:	4b28      	ldr	r3, [pc, #160]	; (800220c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002176:	d131      	bne.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002178:	4b24      	ldr	r3, [pc, #144]	; (800220c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800217a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800217e:	4a23      	ldr	r2, [pc, #140]	; (800220c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002184:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002188:	4b20      	ldr	r3, [pc, #128]	; (800220c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002190:	4a1e      	ldr	r2, [pc, #120]	; (800220c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002196:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002198:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2232      	movs	r2, #50	; 0x32
 800219e:	fb02 f303 	mul.w	r3, r2, r3
 80021a2:	4a1c      	ldr	r2, [pc, #112]	; (8002214 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021a4:	fba2 2303 	umull	r2, r3, r2, r3
 80021a8:	0c9b      	lsrs	r3, r3, #18
 80021aa:	3301      	adds	r3, #1
 80021ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ae:	e002      	b.n	80021b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c2:	d102      	bne.n	80021ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f2      	bne.n	80021b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d6:	d112      	bne.n	80021fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e011      	b.n	8002200 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021e2:	4a0a      	ldr	r2, [pc, #40]	; (800220c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80021ec:	e007      	b.n	80021fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021ee:	4b07      	ldr	r3, [pc, #28]	; (800220c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021f6:	4a05      	ldr	r2, [pc, #20]	; (800220c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	40007000 	.word	0x40007000
 8002210:	20000008 	.word	0x20000008
 8002214:	431bde83 	.word	0x431bde83

08002218 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4a04      	ldr	r2, [pc, #16]	; (8002234 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002222:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002226:	6093      	str	r3, [r2, #8]
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40007000 	.word	0x40007000

08002238 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e306      	b.n	8002858 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d075      	beq.n	8002342 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002256:	4b97      	ldr	r3, [pc, #604]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002260:	4b94      	ldr	r3, [pc, #592]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	2b0c      	cmp	r3, #12
 800226e:	d102      	bne.n	8002276 <HAL_RCC_OscConfig+0x3e>
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b03      	cmp	r3, #3
 8002274:	d002      	beq.n	800227c <HAL_RCC_OscConfig+0x44>
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	2b08      	cmp	r3, #8
 800227a:	d10b      	bne.n	8002294 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227c:	4b8d      	ldr	r3, [pc, #564]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d05b      	beq.n	8002340 <HAL_RCC_OscConfig+0x108>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d157      	bne.n	8002340 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e2e1      	b.n	8002858 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229c:	d106      	bne.n	80022ac <HAL_RCC_OscConfig+0x74>
 800229e:	4b85      	ldr	r3, [pc, #532]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a84      	ldr	r2, [pc, #528]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e01d      	b.n	80022e8 <HAL_RCC_OscConfig+0xb0>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022b4:	d10c      	bne.n	80022d0 <HAL_RCC_OscConfig+0x98>
 80022b6:	4b7f      	ldr	r3, [pc, #508]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a7e      	ldr	r2, [pc, #504]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 80022bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	4b7c      	ldr	r3, [pc, #496]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a7b      	ldr	r2, [pc, #492]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 80022c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e00b      	b.n	80022e8 <HAL_RCC_OscConfig+0xb0>
 80022d0:	4b78      	ldr	r3, [pc, #480]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a77      	ldr	r2, [pc, #476]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 80022d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	4b75      	ldr	r3, [pc, #468]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a74      	ldr	r2, [pc, #464]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 80022e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d013      	beq.n	8002318 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7fe ffd4 	bl	800129c <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f8:	f7fe ffd0 	bl	800129c <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	; 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e2a6      	b.n	8002858 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800230a:	4b6a      	ldr	r3, [pc, #424]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0xc0>
 8002316:	e014      	b.n	8002342 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7fe ffc0 	bl	800129c <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002320:	f7fe ffbc 	bl	800129c <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b64      	cmp	r3, #100	; 0x64
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e292      	b.n	8002858 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002332:	4b60      	ldr	r3, [pc, #384]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0xe8>
 800233e:	e000      	b.n	8002342 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d075      	beq.n	800243a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800234e:	4b59      	ldr	r3, [pc, #356]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002358:	4b56      	ldr	r3, [pc, #344]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	2b0c      	cmp	r3, #12
 8002366:	d102      	bne.n	800236e <HAL_RCC_OscConfig+0x136>
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d002      	beq.n	8002374 <HAL_RCC_OscConfig+0x13c>
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	2b04      	cmp	r3, #4
 8002372:	d11f      	bne.n	80023b4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002374:	4b4f      	ldr	r3, [pc, #316]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_OscConfig+0x154>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e265      	b.n	8002858 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238c:	4b49      	ldr	r3, [pc, #292]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	061b      	lsls	r3, r3, #24
 800239a:	4946      	ldr	r1, [pc, #280]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023a0:	4b45      	ldr	r3, [pc, #276]	; (80024b8 <HAL_RCC_OscConfig+0x280>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe ff2d 	bl	8001204 <HAL_InitTick>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d043      	beq.n	8002438 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e251      	b.n	8002858 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d023      	beq.n	8002404 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023bc:	4b3d      	ldr	r3, [pc, #244]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a3c      	ldr	r2, [pc, #240]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 80023c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7fe ff68 	bl	800129c <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d0:	f7fe ff64 	bl	800129c <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e23a      	b.n	8002858 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023e2:	4b34      	ldr	r3, [pc, #208]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ee:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	061b      	lsls	r3, r3, #24
 80023fc:	492d      	ldr	r1, [pc, #180]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	604b      	str	r3, [r1, #4]
 8002402:	e01a      	b.n	800243a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002404:	4b2b      	ldr	r3, [pc, #172]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a2a      	ldr	r2, [pc, #168]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 800240a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800240e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002410:	f7fe ff44 	bl	800129c <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002418:	f7fe ff40 	bl	800129c <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e216      	b.n	8002858 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800242a:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x1e0>
 8002436:	e000      	b.n	800243a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002438:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d041      	beq.n	80024ca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d01c      	beq.n	8002488 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800244e:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 8002450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002454:	4a17      	ldr	r2, [pc, #92]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245e:	f7fe ff1d 	bl	800129c <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002466:	f7fe ff19 	bl	800129c <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e1ef      	b.n	8002858 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002478:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 800247a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0ef      	beq.n	8002466 <HAL_RCC_OscConfig+0x22e>
 8002486:	e020      	b.n	80024ca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002488:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 800248a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800248e:	4a09      	ldr	r2, [pc, #36]	; (80024b4 <HAL_RCC_OscConfig+0x27c>)
 8002490:	f023 0301 	bic.w	r3, r3, #1
 8002494:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002498:	f7fe ff00 	bl	800129c <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800249e:	e00d      	b.n	80024bc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a0:	f7fe fefc 	bl	800129c <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d906      	bls.n	80024bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e1d2      	b.n	8002858 <HAL_RCC_OscConfig+0x620>
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024bc:	4b8c      	ldr	r3, [pc, #560]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 80024be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1ea      	bne.n	80024a0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 80a6 	beq.w	8002624 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d8:	2300      	movs	r3, #0
 80024da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024dc:	4b84      	ldr	r3, [pc, #528]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 80024de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_OscConfig+0x2b4>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <HAL_RCC_OscConfig+0x2b6>
 80024ec:	2300      	movs	r3, #0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00d      	beq.n	800250e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024f2:	4b7f      	ldr	r3, [pc, #508]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f6:	4a7e      	ldr	r2, [pc, #504]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 80024f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fc:	6593      	str	r3, [r2, #88]	; 0x58
 80024fe:	4b7c      	ldr	r3, [pc, #496]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800250a:	2301      	movs	r3, #1
 800250c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800250e:	4b79      	ldr	r3, [pc, #484]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d118      	bne.n	800254c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800251a:	4b76      	ldr	r3, [pc, #472]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a75      	ldr	r2, [pc, #468]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 8002520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002526:	f7fe feb9 	bl	800129c <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252e:	f7fe feb5 	bl	800129c <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e18b      	b.n	8002858 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002540:	4b6c      	ldr	r3, [pc, #432]	; (80026f4 <HAL_RCC_OscConfig+0x4bc>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d108      	bne.n	8002566 <HAL_RCC_OscConfig+0x32e>
 8002554:	4b66      	ldr	r3, [pc, #408]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 8002556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255a:	4a65      	ldr	r2, [pc, #404]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002564:	e024      	b.n	80025b0 <HAL_RCC_OscConfig+0x378>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b05      	cmp	r3, #5
 800256c:	d110      	bne.n	8002590 <HAL_RCC_OscConfig+0x358>
 800256e:	4b60      	ldr	r3, [pc, #384]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 8002570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002574:	4a5e      	ldr	r2, [pc, #376]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 8002576:	f043 0304 	orr.w	r3, r3, #4
 800257a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800257e:	4b5c      	ldr	r3, [pc, #368]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002584:	4a5a      	ldr	r2, [pc, #360]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800258e:	e00f      	b.n	80025b0 <HAL_RCC_OscConfig+0x378>
 8002590:	4b57      	ldr	r3, [pc, #348]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002596:	4a56      	ldr	r2, [pc, #344]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 8002598:	f023 0301 	bic.w	r3, r3, #1
 800259c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025a0:	4b53      	ldr	r3, [pc, #332]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a6:	4a52      	ldr	r2, [pc, #328]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 80025a8:	f023 0304 	bic.w	r3, r3, #4
 80025ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d016      	beq.n	80025e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b8:	f7fe fe70 	bl	800129c <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025be:	e00a      	b.n	80025d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c0:	f7fe fe6c 	bl	800129c <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e140      	b.n	8002858 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d6:	4b46      	ldr	r3, [pc, #280]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 80025d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0ed      	beq.n	80025c0 <HAL_RCC_OscConfig+0x388>
 80025e4:	e015      	b.n	8002612 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e6:	f7fe fe59 	bl	800129c <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025ec:	e00a      	b.n	8002604 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ee:	f7fe fe55 	bl	800129c <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e129      	b.n	8002858 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002604:	4b3a      	ldr	r3, [pc, #232]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 8002606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1ed      	bne.n	80025ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002612:	7ffb      	ldrb	r3, [r7, #31]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d105      	bne.n	8002624 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002618:	4b35      	ldr	r3, [pc, #212]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 800261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261c:	4a34      	ldr	r2, [pc, #208]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 800261e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002622:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0320 	and.w	r3, r3, #32
 800262c:	2b00      	cmp	r3, #0
 800262e:	d03c      	beq.n	80026aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01c      	beq.n	8002672 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002638:	4b2d      	ldr	r3, [pc, #180]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 800263a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800263e:	4a2c      	ldr	r2, [pc, #176]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002648:	f7fe fe28 	bl	800129c <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002650:	f7fe fe24 	bl	800129c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e0fa      	b.n	8002858 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002662:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 8002664:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0ef      	beq.n	8002650 <HAL_RCC_OscConfig+0x418>
 8002670:	e01b      	b.n	80026aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002672:	4b1f      	ldr	r3, [pc, #124]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 8002674:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002678:	4a1d      	ldr	r2, [pc, #116]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 800267a:	f023 0301 	bic.w	r3, r3, #1
 800267e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002682:	f7fe fe0b 	bl	800129c <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800268a:	f7fe fe07 	bl	800129c <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e0dd      	b.n	8002858 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800269c:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 800269e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1ef      	bne.n	800268a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 80d1 	beq.w	8002856 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026b4:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 030c 	and.w	r3, r3, #12
 80026bc:	2b0c      	cmp	r3, #12
 80026be:	f000 808b 	beq.w	80027d8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d15e      	bne.n	8002788 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ca:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a08      	ldr	r2, [pc, #32]	; (80026f0 <HAL_RCC_OscConfig+0x4b8>)
 80026d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d6:	f7fe fde1 	bl	800129c <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026dc:	e00c      	b.n	80026f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026de:	f7fe fddd 	bl	800129c <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d905      	bls.n	80026f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e0b3      	b.n	8002858 <HAL_RCC_OscConfig+0x620>
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f8:	4b59      	ldr	r3, [pc, #356]	; (8002860 <HAL_RCC_OscConfig+0x628>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1ec      	bne.n	80026de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002704:	4b56      	ldr	r3, [pc, #344]	; (8002860 <HAL_RCC_OscConfig+0x628>)
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	4b56      	ldr	r3, [pc, #344]	; (8002864 <HAL_RCC_OscConfig+0x62c>)
 800270a:	4013      	ands	r3, r2
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6a11      	ldr	r1, [r2, #32]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002714:	3a01      	subs	r2, #1
 8002716:	0112      	lsls	r2, r2, #4
 8002718:	4311      	orrs	r1, r2
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800271e:	0212      	lsls	r2, r2, #8
 8002720:	4311      	orrs	r1, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002726:	0852      	lsrs	r2, r2, #1
 8002728:	3a01      	subs	r2, #1
 800272a:	0552      	lsls	r2, r2, #21
 800272c:	4311      	orrs	r1, r2
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002732:	0852      	lsrs	r2, r2, #1
 8002734:	3a01      	subs	r2, #1
 8002736:	0652      	lsls	r2, r2, #25
 8002738:	4311      	orrs	r1, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800273e:	06d2      	lsls	r2, r2, #27
 8002740:	430a      	orrs	r2, r1
 8002742:	4947      	ldr	r1, [pc, #284]	; (8002860 <HAL_RCC_OscConfig+0x628>)
 8002744:	4313      	orrs	r3, r2
 8002746:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002748:	4b45      	ldr	r3, [pc, #276]	; (8002860 <HAL_RCC_OscConfig+0x628>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a44      	ldr	r2, [pc, #272]	; (8002860 <HAL_RCC_OscConfig+0x628>)
 800274e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002752:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002754:	4b42      	ldr	r3, [pc, #264]	; (8002860 <HAL_RCC_OscConfig+0x628>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4a41      	ldr	r2, [pc, #260]	; (8002860 <HAL_RCC_OscConfig+0x628>)
 800275a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800275e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002760:	f7fe fd9c 	bl	800129c <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002768:	f7fe fd98 	bl	800129c <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e06e      	b.n	8002858 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800277a:	4b39      	ldr	r3, [pc, #228]	; (8002860 <HAL_RCC_OscConfig+0x628>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0x530>
 8002786:	e066      	b.n	8002856 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002788:	4b35      	ldr	r3, [pc, #212]	; (8002860 <HAL_RCC_OscConfig+0x628>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a34      	ldr	r2, [pc, #208]	; (8002860 <HAL_RCC_OscConfig+0x628>)
 800278e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002792:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002794:	4b32      	ldr	r3, [pc, #200]	; (8002860 <HAL_RCC_OscConfig+0x628>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4a31      	ldr	r2, [pc, #196]	; (8002860 <HAL_RCC_OscConfig+0x628>)
 800279a:	f023 0303 	bic.w	r3, r3, #3
 800279e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80027a0:	4b2f      	ldr	r3, [pc, #188]	; (8002860 <HAL_RCC_OscConfig+0x628>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4a2e      	ldr	r2, [pc, #184]	; (8002860 <HAL_RCC_OscConfig+0x628>)
 80027a6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80027aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7fe fd74 	bl	800129c <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b8:	f7fe fd70 	bl	800129c <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e046      	b.n	8002858 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ca:	4b25      	ldr	r3, [pc, #148]	; (8002860 <HAL_RCC_OscConfig+0x628>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x580>
 80027d6:	e03e      	b.n	8002856 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e039      	b.n	8002858 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80027e4:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <HAL_RCC_OscConfig+0x628>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f003 0203 	and.w	r2, r3, #3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d12c      	bne.n	8002852 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	3b01      	subs	r3, #1
 8002804:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002806:	429a      	cmp	r2, r3
 8002808:	d123      	bne.n	8002852 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002816:	429a      	cmp	r2, r3
 8002818:	d11b      	bne.n	8002852 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002824:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d113      	bne.n	8002852 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	085b      	lsrs	r3, r3, #1
 8002836:	3b01      	subs	r3, #1
 8002838:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d109      	bne.n	8002852 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002848:	085b      	lsrs	r3, r3, #1
 800284a:	3b01      	subs	r3, #1
 800284c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d001      	beq.n	8002856 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3720      	adds	r7, #32
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40021000 	.word	0x40021000
 8002864:	019f800c 	.word	0x019f800c

08002868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e11e      	b.n	8002abe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002880:	4b91      	ldr	r3, [pc, #580]	; (8002ac8 <HAL_RCC_ClockConfig+0x260>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 030f 	and.w	r3, r3, #15
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d910      	bls.n	80028b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288e:	4b8e      	ldr	r3, [pc, #568]	; (8002ac8 <HAL_RCC_ClockConfig+0x260>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 020f 	bic.w	r2, r3, #15
 8002896:	498c      	ldr	r1, [pc, #560]	; (8002ac8 <HAL_RCC_ClockConfig+0x260>)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	4313      	orrs	r3, r2
 800289c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289e:	4b8a      	ldr	r3, [pc, #552]	; (8002ac8 <HAL_RCC_ClockConfig+0x260>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e106      	b.n	8002abe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d073      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d129      	bne.n	8002918 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c4:	4b81      	ldr	r3, [pc, #516]	; (8002acc <HAL_RCC_ClockConfig+0x264>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0f4      	b.n	8002abe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80028d4:	f000 f99e 	bl	8002c14 <RCC_GetSysClockFreqFromPLLSource>
 80028d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4a7c      	ldr	r2, [pc, #496]	; (8002ad0 <HAL_RCC_ClockConfig+0x268>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d93f      	bls.n	8002962 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028e2:	4b7a      	ldr	r3, [pc, #488]	; (8002acc <HAL_RCC_ClockConfig+0x264>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d009      	beq.n	8002902 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d033      	beq.n	8002962 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d12f      	bne.n	8002962 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002902:	4b72      	ldr	r3, [pc, #456]	; (8002acc <HAL_RCC_ClockConfig+0x264>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800290a:	4a70      	ldr	r2, [pc, #448]	; (8002acc <HAL_RCC_ClockConfig+0x264>)
 800290c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002910:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	e024      	b.n	8002962 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d107      	bne.n	8002930 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002920:	4b6a      	ldr	r3, [pc, #424]	; (8002acc <HAL_RCC_ClockConfig+0x264>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d109      	bne.n	8002940 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0c6      	b.n	8002abe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002930:	4b66      	ldr	r3, [pc, #408]	; (8002acc <HAL_RCC_ClockConfig+0x264>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0be      	b.n	8002abe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002940:	f000 f8ce 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8002944:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4a61      	ldr	r2, [pc, #388]	; (8002ad0 <HAL_RCC_ClockConfig+0x268>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d909      	bls.n	8002962 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800294e:	4b5f      	ldr	r3, [pc, #380]	; (8002acc <HAL_RCC_ClockConfig+0x264>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002956:	4a5d      	ldr	r2, [pc, #372]	; (8002acc <HAL_RCC_ClockConfig+0x264>)
 8002958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800295e:	2380      	movs	r3, #128	; 0x80
 8002960:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002962:	4b5a      	ldr	r3, [pc, #360]	; (8002acc <HAL_RCC_ClockConfig+0x264>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f023 0203 	bic.w	r2, r3, #3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4957      	ldr	r1, [pc, #348]	; (8002acc <HAL_RCC_ClockConfig+0x264>)
 8002970:	4313      	orrs	r3, r2
 8002972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002974:	f7fe fc92 	bl	800129c <HAL_GetTick>
 8002978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297a:	e00a      	b.n	8002992 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800297c:	f7fe fc8e 	bl	800129c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e095      	b.n	8002abe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	4b4e      	ldr	r3, [pc, #312]	; (8002acc <HAL_RCC_ClockConfig+0x264>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 020c 	and.w	r2, r3, #12
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d1eb      	bne.n	800297c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d023      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029bc:	4b43      	ldr	r3, [pc, #268]	; (8002acc <HAL_RCC_ClockConfig+0x264>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	4a42      	ldr	r2, [pc, #264]	; (8002acc <HAL_RCC_ClockConfig+0x264>)
 80029c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d007      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80029d4:	4b3d      	ldr	r3, [pc, #244]	; (8002acc <HAL_RCC_ClockConfig+0x264>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80029dc:	4a3b      	ldr	r2, [pc, #236]	; (8002acc <HAL_RCC_ClockConfig+0x264>)
 80029de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e4:	4b39      	ldr	r3, [pc, #228]	; (8002acc <HAL_RCC_ClockConfig+0x264>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	4936      	ldr	r1, [pc, #216]	; (8002acc <HAL_RCC_ClockConfig+0x264>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	608b      	str	r3, [r1, #8]
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2b80      	cmp	r3, #128	; 0x80
 80029fc:	d105      	bne.n	8002a0a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80029fe:	4b33      	ldr	r3, [pc, #204]	; (8002acc <HAL_RCC_ClockConfig+0x264>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	4a32      	ldr	r2, [pc, #200]	; (8002acc <HAL_RCC_ClockConfig+0x264>)
 8002a04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a08:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a0a:	4b2f      	ldr	r3, [pc, #188]	; (8002ac8 <HAL_RCC_ClockConfig+0x260>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d21d      	bcs.n	8002a54 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a18:	4b2b      	ldr	r3, [pc, #172]	; (8002ac8 <HAL_RCC_ClockConfig+0x260>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f023 020f 	bic.w	r2, r3, #15
 8002a20:	4929      	ldr	r1, [pc, #164]	; (8002ac8 <HAL_RCC_ClockConfig+0x260>)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a28:	f7fe fc38 	bl	800129c <HAL_GetTick>
 8002a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a30:	f7fe fc34 	bl	800129c <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e03b      	b.n	8002abe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a46:	4b20      	ldr	r3, [pc, #128]	; (8002ac8 <HAL_RCC_ClockConfig+0x260>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d1ed      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a60:	4b1a      	ldr	r3, [pc, #104]	; (8002acc <HAL_RCC_ClockConfig+0x264>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4917      	ldr	r1, [pc, #92]	; (8002acc <HAL_RCC_ClockConfig+0x264>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d009      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a7e:	4b13      	ldr	r3, [pc, #76]	; (8002acc <HAL_RCC_ClockConfig+0x264>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	490f      	ldr	r1, [pc, #60]	; (8002acc <HAL_RCC_ClockConfig+0x264>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a92:	f000 f825 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8002a96:	4602      	mov	r2, r0
 8002a98:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <HAL_RCC_ClockConfig+0x264>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	490c      	ldr	r1, [pc, #48]	; (8002ad4 <HAL_RCC_ClockConfig+0x26c>)
 8002aa4:	5ccb      	ldrb	r3, [r1, r3]
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8002aae:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <HAL_RCC_ClockConfig+0x270>)
 8002ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <HAL_RCC_ClockConfig+0x274>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe fba4 	bl	8001204 <HAL_InitTick>
 8002abc:	4603      	mov	r3, r0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40022000 	.word	0x40022000
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	04c4b400 	.word	0x04c4b400
 8002ad4:	080069f8 	.word	0x080069f8
 8002ad8:	20000008 	.word	0x20000008
 8002adc:	2000000c 	.word	0x2000000c

08002ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ae6:	4b2c      	ldr	r3, [pc, #176]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d102      	bne.n	8002af8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002af2:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	e047      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002af8:	4b27      	ldr	r3, [pc, #156]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 030c 	and.w	r3, r3, #12
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d102      	bne.n	8002b0a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b04:	4b26      	ldr	r3, [pc, #152]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	e03e      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b0a:	4b23      	ldr	r3, [pc, #140]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b0c      	cmp	r3, #12
 8002b14:	d136      	bne.n	8002b84 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b16:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b20:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d10c      	bne.n	8002b4e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b34:	4a1a      	ldr	r2, [pc, #104]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3c:	4a16      	ldr	r2, [pc, #88]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b3e:	68d2      	ldr	r2, [r2, #12]
 8002b40:	0a12      	lsrs	r2, r2, #8
 8002b42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b46:	fb02 f303 	mul.w	r3, r2, r3
 8002b4a:	617b      	str	r3, [r7, #20]
      break;
 8002b4c:	e00c      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b4e:	4a13      	ldr	r2, [pc, #76]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b56:	4a10      	ldr	r2, [pc, #64]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b58:	68d2      	ldr	r2, [r2, #12]
 8002b5a:	0a12      	lsrs	r2, r2, #8
 8002b5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b60:	fb02 f303 	mul.w	r3, r2, r3
 8002b64:	617b      	str	r3, [r7, #20]
      break;
 8002b66:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	0e5b      	lsrs	r3, r3, #25
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	3301      	adds	r3, #1
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	e001      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b88:	693b      	ldr	r3, [r7, #16]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	00f42400 	.word	0x00f42400
 8002ba0:	007a1200 	.word	0x007a1200

08002ba4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba8:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002baa:	681b      	ldr	r3, [r3, #0]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	20000008 	.word	0x20000008

08002bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bc0:	f7ff fff0 	bl	8002ba4 <HAL_RCC_GetHCLKFreq>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	0a1b      	lsrs	r3, r3, #8
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	4904      	ldr	r1, [pc, #16]	; (8002be4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bd2:	5ccb      	ldrb	r3, [r1, r3]
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40021000 	.word	0x40021000
 8002be4:	08006a08 	.word	0x08006a08

08002be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bec:	f7ff ffda 	bl	8002ba4 <HAL_RCC_GetHCLKFreq>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	0adb      	lsrs	r3, r3, #11
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	4904      	ldr	r1, [pc, #16]	; (8002c10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bfe:	5ccb      	ldrb	r3, [r1, r3]
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	08006a08 	.word	0x08006a08

08002c14 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b087      	sub	sp, #28
 8002c18:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c1a:	4b1e      	ldr	r3, [pc, #120]	; (8002c94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c24:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	3301      	adds	r3, #1
 8002c30:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d10c      	bne.n	8002c52 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c38:	4a17      	ldr	r2, [pc, #92]	; (8002c98 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c40:	4a14      	ldr	r2, [pc, #80]	; (8002c94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c42:	68d2      	ldr	r2, [r2, #12]
 8002c44:	0a12      	lsrs	r2, r2, #8
 8002c46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c4a:	fb02 f303 	mul.w	r3, r2, r3
 8002c4e:	617b      	str	r3, [r7, #20]
    break;
 8002c50:	e00c      	b.n	8002c6c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c52:	4a12      	ldr	r2, [pc, #72]	; (8002c9c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5a:	4a0e      	ldr	r2, [pc, #56]	; (8002c94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c5c:	68d2      	ldr	r2, [r2, #12]
 8002c5e:	0a12      	lsrs	r2, r2, #8
 8002c60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c64:	fb02 f303 	mul.w	r3, r2, r3
 8002c68:	617b      	str	r3, [r7, #20]
    break;
 8002c6a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c6c:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	0e5b      	lsrs	r3, r3, #25
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	3301      	adds	r3, #1
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c84:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002c86:	687b      	ldr	r3, [r7, #4]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	371c      	adds	r7, #28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	40021000 	.word	0x40021000
 8002c98:	007a1200 	.word	0x007a1200
 8002c9c:	00f42400 	.word	0x00f42400

08002ca0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ca8:	2300      	movs	r3, #0
 8002caa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cac:	2300      	movs	r3, #0
 8002cae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 8098 	beq.w	8002dee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cc2:	4b43      	ldr	r3, [pc, #268]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10d      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cce:	4b40      	ldr	r3, [pc, #256]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd2:	4a3f      	ldr	r2, [pc, #252]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	6593      	str	r3, [r2, #88]	; 0x58
 8002cda:	4b3d      	ldr	r3, [pc, #244]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cea:	4b3a      	ldr	r3, [pc, #232]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a39      	ldr	r2, [pc, #228]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cf6:	f7fe fad1 	bl	800129c <HAL_GetTick>
 8002cfa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cfc:	e009      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfe:	f7fe facd 	bl	800129c <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d902      	bls.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	74fb      	strb	r3, [r7, #19]
        break;
 8002d10:	e005      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d12:	4b30      	ldr	r3, [pc, #192]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0ef      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002d1e:	7cfb      	ldrb	r3, [r7, #19]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d159      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d24:	4b2a      	ldr	r3, [pc, #168]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d01e      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d019      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d40:	4b23      	ldr	r3, [pc, #140]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d4c:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d52:	4a1f      	ldr	r2, [pc, #124]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d5c:	4b1c      	ldr	r3, [pc, #112]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d62:	4a1b      	ldr	r2, [pc, #108]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d6c:	4a18      	ldr	r2, [pc, #96]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d016      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7e:	f7fe fa8d 	bl	800129c <HAL_GetTick>
 8002d82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d84:	e00b      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d86:	f7fe fa89 	bl	800129c <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d902      	bls.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	74fb      	strb	r3, [r7, #19]
            break;
 8002d9c:	e006      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d9e:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ec      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002dac:	7cfb      	ldrb	r3, [r7, #19]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10b      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002db2:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	4903      	ldr	r1, [pc, #12]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002dc8:	e008      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dca:	7cfb      	ldrb	r3, [r7, #19]
 8002dcc:	74bb      	strb	r3, [r7, #18]
 8002dce:	e005      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd8:	7cfb      	ldrb	r3, [r7, #19]
 8002dda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ddc:	7c7b      	ldrb	r3, [r7, #17]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d105      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de2:	4ba6      	ldr	r3, [pc, #664]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de6:	4aa5      	ldr	r2, [pc, #660]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dfa:	4ba0      	ldr	r3, [pc, #640]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e00:	f023 0203 	bic.w	r2, r3, #3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	499c      	ldr	r1, [pc, #624]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00a      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e1c:	4b97      	ldr	r3, [pc, #604]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e22:	f023 020c 	bic.w	r2, r3, #12
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	4994      	ldr	r1, [pc, #592]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e3e:	4b8f      	ldr	r3, [pc, #572]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	498b      	ldr	r1, [pc, #556]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e60:	4b86      	ldr	r3, [pc, #536]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	4983      	ldr	r1, [pc, #524]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e82:	4b7e      	ldr	r3, [pc, #504]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	497a      	ldr	r1, [pc, #488]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ea4:	4b75      	ldr	r3, [pc, #468]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eaa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	4972      	ldr	r1, [pc, #456]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ec6:	4b6d      	ldr	r3, [pc, #436]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ecc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	4969      	ldr	r1, [pc, #420]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ee8:	4b64      	ldr	r3, [pc, #400]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	4961      	ldr	r1, [pc, #388]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00a      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f0a:	4b5c      	ldr	r3, [pc, #368]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	4958      	ldr	r1, [pc, #352]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d015      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f2c:	4b53      	ldr	r3, [pc, #332]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	4950      	ldr	r1, [pc, #320]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f4a:	d105      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f4c:	4b4b      	ldr	r3, [pc, #300]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	4a4a      	ldr	r2, [pc, #296]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f56:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d015      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f64:	4b45      	ldr	r3, [pc, #276]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	4942      	ldr	r1, [pc, #264]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f82:	d105      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f84:	4b3d      	ldr	r3, [pc, #244]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4a3c      	ldr	r2, [pc, #240]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f8e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d015      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f9c:	4b37      	ldr	r3, [pc, #220]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	4934      	ldr	r1, [pc, #208]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fba:	d105      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fbc:	4b2f      	ldr	r3, [pc, #188]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4a2e      	ldr	r2, [pc, #184]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fc6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d015      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fd4:	4b29      	ldr	r3, [pc, #164]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe2:	4926      	ldr	r1, [pc, #152]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ff2:	d105      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ff4:	4b21      	ldr	r3, [pc, #132]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	4a20      	ldr	r2, [pc, #128]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ffe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d015      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800300c:	4b1b      	ldr	r3, [pc, #108]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800300e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003012:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301a:	4918      	ldr	r1, [pc, #96]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003026:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800302a:	d105      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800302c:	4b13      	ldr	r3, [pc, #76]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4a12      	ldr	r2, [pc, #72]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003036:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d015      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003044:	4b0d      	ldr	r3, [pc, #52]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003052:	490a      	ldr	r1, [pc, #40]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003062:	d105      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	4a04      	ldr	r2, [pc, #16]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800306a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003070:	7cbb      	ldrb	r3, [r7, #18]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000

08003080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e049      	b.n	8003126 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d106      	bne.n	80030ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fd fdc2 	bl	8000c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3304      	adds	r3, #4
 80030bc:	4619      	mov	r1, r3
 80030be:	4610      	mov	r0, r2
 80030c0:	f000 faa4 	bl	800360c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e049      	b.n	80031d4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d106      	bne.n	800315a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f841 	bl	80031dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3304      	adds	r3, #4
 800316a:	4619      	mov	r1, r3
 800316c:	4610      	mov	r0, r2
 800316e:	f000 fa4d 	bl	800360c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800320a:	2302      	movs	r3, #2
 800320c:	e0ff      	b.n	800340e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b14      	cmp	r3, #20
 800321a:	f200 80f0 	bhi.w	80033fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800321e:	a201      	add	r2, pc, #4	; (adr r2, 8003224 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003224:	08003279 	.word	0x08003279
 8003228:	080033ff 	.word	0x080033ff
 800322c:	080033ff 	.word	0x080033ff
 8003230:	080033ff 	.word	0x080033ff
 8003234:	080032b9 	.word	0x080032b9
 8003238:	080033ff 	.word	0x080033ff
 800323c:	080033ff 	.word	0x080033ff
 8003240:	080033ff 	.word	0x080033ff
 8003244:	080032fb 	.word	0x080032fb
 8003248:	080033ff 	.word	0x080033ff
 800324c:	080033ff 	.word	0x080033ff
 8003250:	080033ff 	.word	0x080033ff
 8003254:	0800333b 	.word	0x0800333b
 8003258:	080033ff 	.word	0x080033ff
 800325c:	080033ff 	.word	0x080033ff
 8003260:	080033ff 	.word	0x080033ff
 8003264:	0800337d 	.word	0x0800337d
 8003268:	080033ff 	.word	0x080033ff
 800326c:	080033ff 	.word	0x080033ff
 8003270:	080033ff 	.word	0x080033ff
 8003274:	080033bd 	.word	0x080033bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68b9      	ldr	r1, [r7, #8]
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fa54 	bl	800372c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699a      	ldr	r2, [r3, #24]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0208 	orr.w	r2, r2, #8
 8003292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0204 	bic.w	r2, r2, #4
 80032a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6999      	ldr	r1, [r3, #24]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	619a      	str	r2, [r3, #24]
      break;
 80032b6:	e0a5      	b.n	8003404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fac4 	bl	800384c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6999      	ldr	r1, [r3, #24]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	021a      	lsls	r2, r3, #8
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	619a      	str	r2, [r3, #24]
      break;
 80032f8:	e084      	b.n	8003404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68b9      	ldr	r1, [r7, #8]
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fb2d 	bl	8003960 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69da      	ldr	r2, [r3, #28]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0208 	orr.w	r2, r2, #8
 8003314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	69da      	ldr	r2, [r3, #28]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0204 	bic.w	r2, r2, #4
 8003324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	69d9      	ldr	r1, [r3, #28]
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	61da      	str	r2, [r3, #28]
      break;
 8003338:	e064      	b.n	8003404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68b9      	ldr	r1, [r7, #8]
 8003340:	4618      	mov	r0, r3
 8003342:	f000 fb95 	bl	8003a70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69da      	ldr	r2, [r3, #28]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69da      	ldr	r2, [r3, #28]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69d9      	ldr	r1, [r3, #28]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	021a      	lsls	r2, r3, #8
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	61da      	str	r2, [r3, #28]
      break;
 800337a:	e043      	b.n	8003404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fbfe 	bl	8003b84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0208 	orr.w	r2, r2, #8
 8003396:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0204 	bic.w	r2, r2, #4
 80033a6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80033ba:	e023      	b.n	8003404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68b9      	ldr	r1, [r7, #8]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fc42 	bl	8003c4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	021a      	lsls	r2, r3, #8
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80033fc:	e002      	b.n	8003404 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	75fb      	strb	r3, [r7, #23]
      break;
 8003402:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800340c:	7dfb      	ldrb	r3, [r7, #23]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop

08003418 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_TIM_ConfigClockSource+0x1c>
 8003430:	2302      	movs	r3, #2
 8003432:	e0de      	b.n	80035f2 <HAL_TIM_ConfigClockSource+0x1da>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003452:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800345e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a63      	ldr	r2, [pc, #396]	; (80035fc <HAL_TIM_ConfigClockSource+0x1e4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	f000 80a9 	beq.w	80035c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003474:	4a61      	ldr	r2, [pc, #388]	; (80035fc <HAL_TIM_ConfigClockSource+0x1e4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	f200 80ae 	bhi.w	80035d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800347c:	4a60      	ldr	r2, [pc, #384]	; (8003600 <HAL_TIM_ConfigClockSource+0x1e8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	f000 80a1 	beq.w	80035c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003484:	4a5e      	ldr	r2, [pc, #376]	; (8003600 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	f200 80a6 	bhi.w	80035d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800348c:	4a5d      	ldr	r2, [pc, #372]	; (8003604 <HAL_TIM_ConfigClockSource+0x1ec>)
 800348e:	4293      	cmp	r3, r2
 8003490:	f000 8099 	beq.w	80035c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003494:	4a5b      	ldr	r2, [pc, #364]	; (8003604 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003496:	4293      	cmp	r3, r2
 8003498:	f200 809e 	bhi.w	80035d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800349c:	4a5a      	ldr	r2, [pc, #360]	; (8003608 <HAL_TIM_ConfigClockSource+0x1f0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	f000 8091 	beq.w	80035c6 <HAL_TIM_ConfigClockSource+0x1ae>
 80034a4:	4a58      	ldr	r2, [pc, #352]	; (8003608 <HAL_TIM_ConfigClockSource+0x1f0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	f200 8096 	bhi.w	80035d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80034ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80034b0:	f000 8089 	beq.w	80035c6 <HAL_TIM_ConfigClockSource+0x1ae>
 80034b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80034b8:	f200 808e 	bhi.w	80035d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80034bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c0:	d03e      	beq.n	8003540 <HAL_TIM_ConfigClockSource+0x128>
 80034c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c6:	f200 8087 	bhi.w	80035d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80034ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ce:	f000 8086 	beq.w	80035de <HAL_TIM_ConfigClockSource+0x1c6>
 80034d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d6:	d87f      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80034d8:	2b70      	cmp	r3, #112	; 0x70
 80034da:	d01a      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0xfa>
 80034dc:	2b70      	cmp	r3, #112	; 0x70
 80034de:	d87b      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80034e0:	2b60      	cmp	r3, #96	; 0x60
 80034e2:	d050      	beq.n	8003586 <HAL_TIM_ConfigClockSource+0x16e>
 80034e4:	2b60      	cmp	r3, #96	; 0x60
 80034e6:	d877      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80034e8:	2b50      	cmp	r3, #80	; 0x50
 80034ea:	d03c      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0x14e>
 80034ec:	2b50      	cmp	r3, #80	; 0x50
 80034ee:	d873      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80034f0:	2b40      	cmp	r3, #64	; 0x40
 80034f2:	d058      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0x18e>
 80034f4:	2b40      	cmp	r3, #64	; 0x40
 80034f6:	d86f      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80034f8:	2b30      	cmp	r3, #48	; 0x30
 80034fa:	d064      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x1ae>
 80034fc:	2b30      	cmp	r3, #48	; 0x30
 80034fe:	d86b      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8003500:	2b20      	cmp	r3, #32
 8003502:	d060      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003504:	2b20      	cmp	r3, #32
 8003506:	d867      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d05c      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x1ae>
 800350c:	2b10      	cmp	r3, #16
 800350e:	d05a      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003510:	e062      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	6899      	ldr	r1, [r3, #8]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f000 fc75 	bl	8003e10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003534:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	609a      	str	r2, [r3, #8]
      break;
 800353e:	e04f      	b.n	80035e0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	6899      	ldr	r1, [r3, #8]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f000 fc5e 	bl	8003e10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003562:	609a      	str	r2, [r3, #8]
      break;
 8003564:	e03c      	b.n	80035e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	6859      	ldr	r1, [r3, #4]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	461a      	mov	r2, r3
 8003574:	f000 fbd0 	bl	8003d18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2150      	movs	r1, #80	; 0x50
 800357e:	4618      	mov	r0, r3
 8003580:	f000 fc29 	bl	8003dd6 <TIM_ITRx_SetConfig>
      break;
 8003584:	e02c      	b.n	80035e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6859      	ldr	r1, [r3, #4]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	461a      	mov	r2, r3
 8003594:	f000 fbef 	bl	8003d76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2160      	movs	r1, #96	; 0x60
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fc19 	bl	8003dd6 <TIM_ITRx_SetConfig>
      break;
 80035a4:	e01c      	b.n	80035e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6859      	ldr	r1, [r3, #4]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	461a      	mov	r2, r3
 80035b4:	f000 fbb0 	bl	8003d18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2140      	movs	r1, #64	; 0x40
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fc09 	bl	8003dd6 <TIM_ITRx_SetConfig>
      break;
 80035c4:	e00c      	b.n	80035e0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4619      	mov	r1, r3
 80035d0:	4610      	mov	r0, r2
 80035d2:	f000 fc00 	bl	8003dd6 <TIM_ITRx_SetConfig>
      break;
 80035d6:	e003      	b.n	80035e0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	73fb      	strb	r3, [r7, #15]
      break;
 80035dc:	e000      	b.n	80035e0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80035de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	00100070 	.word	0x00100070
 8003600:	00100040 	.word	0x00100040
 8003604:	00100030 	.word	0x00100030
 8003608:	00100020 	.word	0x00100020

0800360c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a3c      	ldr	r2, [pc, #240]	; (8003710 <TIM_Base_SetConfig+0x104>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00f      	beq.n	8003644 <TIM_Base_SetConfig+0x38>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362a:	d00b      	beq.n	8003644 <TIM_Base_SetConfig+0x38>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a39      	ldr	r2, [pc, #228]	; (8003714 <TIM_Base_SetConfig+0x108>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d007      	beq.n	8003644 <TIM_Base_SetConfig+0x38>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a38      	ldr	r2, [pc, #224]	; (8003718 <TIM_Base_SetConfig+0x10c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d003      	beq.n	8003644 <TIM_Base_SetConfig+0x38>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a37      	ldr	r2, [pc, #220]	; (800371c <TIM_Base_SetConfig+0x110>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d108      	bne.n	8003656 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a2d      	ldr	r2, [pc, #180]	; (8003710 <TIM_Base_SetConfig+0x104>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01b      	beq.n	8003696 <TIM_Base_SetConfig+0x8a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003664:	d017      	beq.n	8003696 <TIM_Base_SetConfig+0x8a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a2a      	ldr	r2, [pc, #168]	; (8003714 <TIM_Base_SetConfig+0x108>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d013      	beq.n	8003696 <TIM_Base_SetConfig+0x8a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a29      	ldr	r2, [pc, #164]	; (8003718 <TIM_Base_SetConfig+0x10c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00f      	beq.n	8003696 <TIM_Base_SetConfig+0x8a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a28      	ldr	r2, [pc, #160]	; (800371c <TIM_Base_SetConfig+0x110>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00b      	beq.n	8003696 <TIM_Base_SetConfig+0x8a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a27      	ldr	r2, [pc, #156]	; (8003720 <TIM_Base_SetConfig+0x114>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d007      	beq.n	8003696 <TIM_Base_SetConfig+0x8a>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a26      	ldr	r2, [pc, #152]	; (8003724 <TIM_Base_SetConfig+0x118>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d003      	beq.n	8003696 <TIM_Base_SetConfig+0x8a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a25      	ldr	r2, [pc, #148]	; (8003728 <TIM_Base_SetConfig+0x11c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d108      	bne.n	80036a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a10      	ldr	r2, [pc, #64]	; (8003710 <TIM_Base_SetConfig+0x104>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d00f      	beq.n	80036f4 <TIM_Base_SetConfig+0xe8>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a11      	ldr	r2, [pc, #68]	; (800371c <TIM_Base_SetConfig+0x110>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d00b      	beq.n	80036f4 <TIM_Base_SetConfig+0xe8>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a10      	ldr	r2, [pc, #64]	; (8003720 <TIM_Base_SetConfig+0x114>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d007      	beq.n	80036f4 <TIM_Base_SetConfig+0xe8>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a0f      	ldr	r2, [pc, #60]	; (8003724 <TIM_Base_SetConfig+0x118>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d003      	beq.n	80036f4 <TIM_Base_SetConfig+0xe8>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a0e      	ldr	r2, [pc, #56]	; (8003728 <TIM_Base_SetConfig+0x11c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d103      	bne.n	80036fc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	615a      	str	r2, [r3, #20]
}
 8003702:	bf00      	nop
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40012c00 	.word	0x40012c00
 8003714:	40000400 	.word	0x40000400
 8003718:	40000800 	.word	0x40000800
 800371c:	40013400 	.word	0x40013400
 8003720:	40014000 	.word	0x40014000
 8003724:	40014400 	.word	0x40014400
 8003728:	40014800 	.word	0x40014800

0800372c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	f023 0201 	bic.w	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800375a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0303 	bic.w	r3, r3, #3
 8003766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f023 0302 	bic.w	r3, r3, #2
 8003778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a2c      	ldr	r2, [pc, #176]	; (8003838 <TIM_OC1_SetConfig+0x10c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d00f      	beq.n	80037ac <TIM_OC1_SetConfig+0x80>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a2b      	ldr	r2, [pc, #172]	; (800383c <TIM_OC1_SetConfig+0x110>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d00b      	beq.n	80037ac <TIM_OC1_SetConfig+0x80>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a2a      	ldr	r2, [pc, #168]	; (8003840 <TIM_OC1_SetConfig+0x114>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d007      	beq.n	80037ac <TIM_OC1_SetConfig+0x80>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a29      	ldr	r2, [pc, #164]	; (8003844 <TIM_OC1_SetConfig+0x118>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d003      	beq.n	80037ac <TIM_OC1_SetConfig+0x80>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a28      	ldr	r2, [pc, #160]	; (8003848 <TIM_OC1_SetConfig+0x11c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d10c      	bne.n	80037c6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f023 0308 	bic.w	r3, r3, #8
 80037b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f023 0304 	bic.w	r3, r3, #4
 80037c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a1b      	ldr	r2, [pc, #108]	; (8003838 <TIM_OC1_SetConfig+0x10c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00f      	beq.n	80037ee <TIM_OC1_SetConfig+0xc2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a1a      	ldr	r2, [pc, #104]	; (800383c <TIM_OC1_SetConfig+0x110>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00b      	beq.n	80037ee <TIM_OC1_SetConfig+0xc2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a19      	ldr	r2, [pc, #100]	; (8003840 <TIM_OC1_SetConfig+0x114>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d007      	beq.n	80037ee <TIM_OC1_SetConfig+0xc2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a18      	ldr	r2, [pc, #96]	; (8003844 <TIM_OC1_SetConfig+0x118>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d003      	beq.n	80037ee <TIM_OC1_SetConfig+0xc2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a17      	ldr	r2, [pc, #92]	; (8003848 <TIM_OC1_SetConfig+0x11c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d111      	bne.n	8003812 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	621a      	str	r2, [r3, #32]
}
 800382c:	bf00      	nop
 800382e:	371c      	adds	r7, #28
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	40012c00 	.word	0x40012c00
 800383c:	40013400 	.word	0x40013400
 8003840:	40014000 	.word	0x40014000
 8003844:	40014400 	.word	0x40014400
 8003848:	40014800 	.word	0x40014800

0800384c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	f023 0210 	bic.w	r2, r3, #16
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800387a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800387e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	021b      	lsls	r3, r3, #8
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	4313      	orrs	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f023 0320 	bic.w	r3, r3, #32
 800389a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a28      	ldr	r2, [pc, #160]	; (800394c <TIM_OC2_SetConfig+0x100>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d003      	beq.n	80038b8 <TIM_OC2_SetConfig+0x6c>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a27      	ldr	r2, [pc, #156]	; (8003950 <TIM_OC2_SetConfig+0x104>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d10d      	bne.n	80038d4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a1d      	ldr	r2, [pc, #116]	; (800394c <TIM_OC2_SetConfig+0x100>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d00f      	beq.n	80038fc <TIM_OC2_SetConfig+0xb0>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a1c      	ldr	r2, [pc, #112]	; (8003950 <TIM_OC2_SetConfig+0x104>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d00b      	beq.n	80038fc <TIM_OC2_SetConfig+0xb0>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a1b      	ldr	r2, [pc, #108]	; (8003954 <TIM_OC2_SetConfig+0x108>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d007      	beq.n	80038fc <TIM_OC2_SetConfig+0xb0>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a1a      	ldr	r2, [pc, #104]	; (8003958 <TIM_OC2_SetConfig+0x10c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d003      	beq.n	80038fc <TIM_OC2_SetConfig+0xb0>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a19      	ldr	r2, [pc, #100]	; (800395c <TIM_OC2_SetConfig+0x110>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d113      	bne.n	8003924 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003902:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800390a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	621a      	str	r2, [r3, #32]
}
 800393e:	bf00      	nop
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40012c00 	.word	0x40012c00
 8003950:	40013400 	.word	0x40013400
 8003954:	40014000 	.word	0x40014000
 8003958:	40014400 	.word	0x40014400
 800395c:	40014800 	.word	0x40014800

08003960 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800398e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0303 	bic.w	r3, r3, #3
 800399a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	021b      	lsls	r3, r3, #8
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a27      	ldr	r2, [pc, #156]	; (8003a5c <TIM_OC3_SetConfig+0xfc>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d003      	beq.n	80039ca <TIM_OC3_SetConfig+0x6a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a26      	ldr	r2, [pc, #152]	; (8003a60 <TIM_OC3_SetConfig+0x100>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d10d      	bne.n	80039e6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	021b      	lsls	r3, r3, #8
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a1c      	ldr	r2, [pc, #112]	; (8003a5c <TIM_OC3_SetConfig+0xfc>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d00f      	beq.n	8003a0e <TIM_OC3_SetConfig+0xae>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a1b      	ldr	r2, [pc, #108]	; (8003a60 <TIM_OC3_SetConfig+0x100>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00b      	beq.n	8003a0e <TIM_OC3_SetConfig+0xae>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a1a      	ldr	r2, [pc, #104]	; (8003a64 <TIM_OC3_SetConfig+0x104>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d007      	beq.n	8003a0e <TIM_OC3_SetConfig+0xae>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a19      	ldr	r2, [pc, #100]	; (8003a68 <TIM_OC3_SetConfig+0x108>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d003      	beq.n	8003a0e <TIM_OC3_SetConfig+0xae>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a18      	ldr	r2, [pc, #96]	; (8003a6c <TIM_OC3_SetConfig+0x10c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d113      	bne.n	8003a36 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	621a      	str	r2, [r3, #32]
}
 8003a50:	bf00      	nop
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	40012c00 	.word	0x40012c00
 8003a60:	40013400 	.word	0x40013400
 8003a64:	40014000 	.word	0x40014000
 8003a68:	40014400 	.word	0x40014400
 8003a6c:	40014800 	.word	0x40014800

08003a70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003abe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	031b      	lsls	r3, r3, #12
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a28      	ldr	r2, [pc, #160]	; (8003b70 <TIM_OC4_SetConfig+0x100>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d003      	beq.n	8003adc <TIM_OC4_SetConfig+0x6c>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a27      	ldr	r2, [pc, #156]	; (8003b74 <TIM_OC4_SetConfig+0x104>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d10d      	bne.n	8003af8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	031b      	lsls	r3, r3, #12
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003af6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a1d      	ldr	r2, [pc, #116]	; (8003b70 <TIM_OC4_SetConfig+0x100>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00f      	beq.n	8003b20 <TIM_OC4_SetConfig+0xb0>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a1c      	ldr	r2, [pc, #112]	; (8003b74 <TIM_OC4_SetConfig+0x104>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00b      	beq.n	8003b20 <TIM_OC4_SetConfig+0xb0>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a1b      	ldr	r2, [pc, #108]	; (8003b78 <TIM_OC4_SetConfig+0x108>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d007      	beq.n	8003b20 <TIM_OC4_SetConfig+0xb0>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a1a      	ldr	r2, [pc, #104]	; (8003b7c <TIM_OC4_SetConfig+0x10c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d003      	beq.n	8003b20 <TIM_OC4_SetConfig+0xb0>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a19      	ldr	r2, [pc, #100]	; (8003b80 <TIM_OC4_SetConfig+0x110>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d113      	bne.n	8003b48 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b26:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b2e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	019b      	lsls	r3, r3, #6
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	019b      	lsls	r3, r3, #6
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	621a      	str	r2, [r3, #32]
}
 8003b62:	bf00      	nop
 8003b64:	371c      	adds	r7, #28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40012c00 	.word	0x40012c00
 8003b74:	40013400 	.word	0x40013400
 8003b78:	40014000 	.word	0x40014000
 8003b7c:	40014400 	.word	0x40014400
 8003b80:	40014800 	.word	0x40014800

08003b84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003bc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	041b      	lsls	r3, r3, #16
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a17      	ldr	r2, [pc, #92]	; (8003c38 <TIM_OC5_SetConfig+0xb4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00f      	beq.n	8003bfe <TIM_OC5_SetConfig+0x7a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a16      	ldr	r2, [pc, #88]	; (8003c3c <TIM_OC5_SetConfig+0xb8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00b      	beq.n	8003bfe <TIM_OC5_SetConfig+0x7a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a15      	ldr	r2, [pc, #84]	; (8003c40 <TIM_OC5_SetConfig+0xbc>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d007      	beq.n	8003bfe <TIM_OC5_SetConfig+0x7a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a14      	ldr	r2, [pc, #80]	; (8003c44 <TIM_OC5_SetConfig+0xc0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d003      	beq.n	8003bfe <TIM_OC5_SetConfig+0x7a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a13      	ldr	r2, [pc, #76]	; (8003c48 <TIM_OC5_SetConfig+0xc4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d109      	bne.n	8003c12 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	021b      	lsls	r3, r3, #8
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	621a      	str	r2, [r3, #32]
}
 8003c2c:	bf00      	nop
 8003c2e:	371c      	adds	r7, #28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	40012c00 	.word	0x40012c00
 8003c3c:	40013400 	.word	0x40013400
 8003c40:	40014000 	.word	0x40014000
 8003c44:	40014400 	.word	0x40014400
 8003c48:	40014800 	.word	0x40014800

08003c4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	021b      	lsls	r3, r3, #8
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	051b      	lsls	r3, r3, #20
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a18      	ldr	r2, [pc, #96]	; (8003d04 <TIM_OC6_SetConfig+0xb8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00f      	beq.n	8003cc8 <TIM_OC6_SetConfig+0x7c>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a17      	ldr	r2, [pc, #92]	; (8003d08 <TIM_OC6_SetConfig+0xbc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00b      	beq.n	8003cc8 <TIM_OC6_SetConfig+0x7c>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a16      	ldr	r2, [pc, #88]	; (8003d0c <TIM_OC6_SetConfig+0xc0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d007      	beq.n	8003cc8 <TIM_OC6_SetConfig+0x7c>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a15      	ldr	r2, [pc, #84]	; (8003d10 <TIM_OC6_SetConfig+0xc4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d003      	beq.n	8003cc8 <TIM_OC6_SetConfig+0x7c>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a14      	ldr	r2, [pc, #80]	; (8003d14 <TIM_OC6_SetConfig+0xc8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d109      	bne.n	8003cdc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	029b      	lsls	r3, r3, #10
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	621a      	str	r2, [r3, #32]
}
 8003cf6:	bf00      	nop
 8003cf8:	371c      	adds	r7, #28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40012c00 	.word	0x40012c00
 8003d08:	40013400 	.word	0x40013400
 8003d0c:	40014000 	.word	0x40014000
 8003d10:	40014400 	.word	0x40014400
 8003d14:	40014800 	.word	0x40014800

08003d18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	f023 0201 	bic.w	r2, r3, #1
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f023 030a 	bic.w	r3, r3, #10
 8003d54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	621a      	str	r2, [r3, #32]
}
 8003d6a:	bf00      	nop
 8003d6c:	371c      	adds	r7, #28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b087      	sub	sp, #28
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	60f8      	str	r0, [r7, #12]
 8003d7e:	60b9      	str	r1, [r7, #8]
 8003d80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	f023 0210 	bic.w	r2, r3, #16
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003da0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	031b      	lsls	r3, r3, #12
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003db2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	621a      	str	r2, [r3, #32]
}
 8003dca:	bf00      	nop
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b085      	sub	sp, #20
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
 8003dde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f043 0307 	orr.w	r3, r3, #7
 8003dfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	609a      	str	r2, [r3, #8]
}
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	021a      	lsls	r2, r3, #8
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	609a      	str	r2, [r3, #8]
}
 8003e44:	bf00      	nop
 8003e46:	371c      	adds	r7, #28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e065      	b.n	8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a2c      	ldr	r2, [pc, #176]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d004      	beq.n	8003e9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a2b      	ldr	r2, [pc, #172]	; (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d108      	bne.n	8003eae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ea2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1b      	ldr	r2, [pc, #108]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d018      	beq.n	8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ede:	d013      	beq.n	8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a18      	ldr	r2, [pc, #96]	; (8003f48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d00e      	beq.n	8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a17      	ldr	r2, [pc, #92]	; (8003f4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d009      	beq.n	8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a12      	ldr	r2, [pc, #72]	; (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d004      	beq.n	8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a13      	ldr	r2, [pc, #76]	; (8003f50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d10c      	bne.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	40012c00 	.word	0x40012c00
 8003f44:	40013400 	.word	0x40013400
 8003f48:	40000400 	.word	0x40000400
 8003f4c:	40000800 	.word	0x40000800
 8003f50:	40014000 	.word	0x40014000

08003f54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e087      	b.n	8004080 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	041b      	lsls	r3, r3, #16
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a27      	ldr	r2, [pc, #156]	; (800408c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d004      	beq.n	8003ffe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a25      	ldr	r2, [pc, #148]	; (8004090 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d106      	bne.n	800400c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	4313      	orrs	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a1e      	ldr	r2, [pc, #120]	; (800408c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d004      	beq.n	8004020 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a1d      	ldr	r2, [pc, #116]	; (8004090 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d126      	bne.n	800406e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402a:	051b      	lsls	r3, r3, #20
 800402c:	4313      	orrs	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	4313      	orrs	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a0e      	ldr	r2, [pc, #56]	; (800408c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d004      	beq.n	8004060 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a0d      	ldr	r2, [pc, #52]	; (8004090 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d106      	bne.n	800406e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	40012c00 	.word	0x40012c00
 8004090:	40013400 	.word	0x40013400

08004094 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e042      	b.n	800412c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d106      	bne.n	80040be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7fc fe3d 	bl	8000d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2224      	movs	r2, #36	; 0x24
 80040c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0201 	bic.w	r2, r2, #1
 80040d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fc02 	bl	80048e0 <UART_SetConfig>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e022      	b.n	800412c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fec2 	bl	8004e78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004102:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004112:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 ff49 	bl	8004fbc <UART_CheckIdleState>
 800412a:	4603      	mov	r3, r0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08a      	sub	sp, #40	; 0x28
 8004138:	af02      	add	r7, sp, #8
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	603b      	str	r3, [r7, #0]
 8004140:	4613      	mov	r3, r2
 8004142:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800414a:	2b20      	cmp	r3, #32
 800414c:	f040 8083 	bne.w	8004256 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <HAL_UART_Transmit+0x28>
 8004156:	88fb      	ldrh	r3, [r7, #6]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e07b      	b.n	8004258 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_UART_Transmit+0x3a>
 800416a:	2302      	movs	r3, #2
 800416c:	e074      	b.n	8004258 <HAL_UART_Transmit+0x124>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2221      	movs	r2, #33	; 0x21
 8004182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004186:	f7fd f889 	bl	800129c <HAL_GetTick>
 800418a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	88fa      	ldrh	r2, [r7, #6]
 8004190:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	88fa      	ldrh	r2, [r7, #6]
 8004198:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a4:	d108      	bne.n	80041b8 <HAL_UART_Transmit+0x84>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d104      	bne.n	80041b8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	61bb      	str	r3, [r7, #24]
 80041b6:	e003      	b.n	80041c0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041bc:	2300      	movs	r3, #0
 80041be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80041c8:	e02c      	b.n	8004224 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2200      	movs	r2, #0
 80041d2:	2180      	movs	r1, #128	; 0x80
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 ff3c 	bl	8005052 <UART_WaitOnFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e039      	b.n	8004258 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10b      	bne.n	8004202 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	3302      	adds	r3, #2
 80041fe:	61bb      	str	r3, [r7, #24]
 8004200:	e007      	b.n	8004212 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	781a      	ldrb	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	3301      	adds	r3, #1
 8004210:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004218:	b29b      	uxth	r3, r3
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800422a:	b29b      	uxth	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1cc      	bne.n	80041ca <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2200      	movs	r2, #0
 8004238:	2140      	movs	r1, #64	; 0x40
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 ff09 	bl	8005052 <UART_WaitOnFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e006      	b.n	8004258 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	e000      	b.n	8004258 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004256:	2302      	movs	r3, #2
  }
}
 8004258:	4618      	mov	r0, r3
 800425a:	3720      	adds	r7, #32
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b0ba      	sub	sp, #232	; 0xe8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004286:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800428a:	f640 030f 	movw	r3, #2063	; 0x80f
 800428e:	4013      	ands	r3, r2
 8004290:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004294:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004298:	2b00      	cmp	r3, #0
 800429a:	d11b      	bne.n	80042d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800429c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042a0:	f003 0320 	and.w	r3, r3, #32
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d015      	beq.n	80042d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80042a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042ac:	f003 0320 	and.w	r3, r3, #32
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d105      	bne.n	80042c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80042b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d009      	beq.n	80042d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 82d6 	beq.w	8004876 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	4798      	blx	r3
      }
      return;
 80042d2:	e2d0      	b.n	8004876 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80042d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 811f 	beq.w	800451c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80042de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80042e2:	4b8b      	ldr	r3, [pc, #556]	; (8004510 <HAL_UART_IRQHandler+0x2b0>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d106      	bne.n	80042f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80042ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80042ee:	4b89      	ldr	r3, [pc, #548]	; (8004514 <HAL_UART_IRQHandler+0x2b4>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 8112 	beq.w	800451c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80042f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	d011      	beq.n	8004328 <HAL_UART_IRQHandler+0xc8>
 8004304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00b      	beq.n	8004328 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2201      	movs	r2, #1
 8004316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800431e:	f043 0201 	orr.w	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d011      	beq.n	8004358 <HAL_UART_IRQHandler+0xf8>
 8004334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00b      	beq.n	8004358 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2202      	movs	r2, #2
 8004346:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800434e:	f043 0204 	orr.w	r2, r3, #4
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b00      	cmp	r3, #0
 8004362:	d011      	beq.n	8004388 <HAL_UART_IRQHandler+0x128>
 8004364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00b      	beq.n	8004388 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2204      	movs	r2, #4
 8004376:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800437e:	f043 0202 	orr.w	r2, r3, #2
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b00      	cmp	r3, #0
 8004392:	d017      	beq.n	80043c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d105      	bne.n	80043ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80043a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80043a4:	4b5a      	ldr	r3, [pc, #360]	; (8004510 <HAL_UART_IRQHandler+0x2b0>)
 80043a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00b      	beq.n	80043c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2208      	movs	r2, #8
 80043b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ba:	f043 0208 	orr.w	r2, r3, #8
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80043c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d012      	beq.n	80043f6 <HAL_UART_IRQHandler+0x196>
 80043d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00c      	beq.n	80043f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ec:	f043 0220 	orr.w	r2, r3, #32
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 823c 	beq.w	800487a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004406:	f003 0320 	and.w	r3, r3, #32
 800440a:	2b00      	cmp	r3, #0
 800440c:	d013      	beq.n	8004436 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800440e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d105      	bne.n	8004426 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800441a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800441e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d007      	beq.n	8004436 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800443c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444a:	2b40      	cmp	r3, #64	; 0x40
 800444c:	d005      	beq.n	800445a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800444e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004452:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004456:	2b00      	cmp	r3, #0
 8004458:	d04f      	beq.n	80044fa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 ffab 	bl	80053b6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446a:	2b40      	cmp	r3, #64	; 0x40
 800446c:	d141      	bne.n	80044f2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3308      	adds	r3, #8
 8004474:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004478:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004484:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800448c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3308      	adds	r3, #8
 8004496:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800449a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800449e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80044a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044aa:	e841 2300 	strex	r3, r2, [r1]
 80044ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1d9      	bne.n	800446e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d013      	beq.n	80044ea <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044c6:	4a14      	ldr	r2, [pc, #80]	; (8004518 <HAL_UART_IRQHandler+0x2b8>)
 80044c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fd f99e 	bl	8001810 <HAL_DMA_Abort_IT>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d017      	beq.n	800450a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80044e4:	4610      	mov	r0, r2
 80044e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e8:	e00f      	b.n	800450a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f9ee 	bl	80048cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f0:	e00b      	b.n	800450a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f9ea 	bl	80048cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f8:	e007      	b.n	800450a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f9e6 	bl	80048cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004508:	e1b7      	b.n	800487a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800450a:	bf00      	nop
    return;
 800450c:	e1b5      	b.n	800487a <HAL_UART_IRQHandler+0x61a>
 800450e:	bf00      	nop
 8004510:	10000001 	.word	0x10000001
 8004514:	04000120 	.word	0x04000120
 8004518:	08005661 	.word	0x08005661

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004520:	2b01      	cmp	r3, #1
 8004522:	f040 814a 	bne.w	80047ba <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 8143 	beq.w	80047ba <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 813c 	beq.w	80047ba <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2210      	movs	r2, #16
 8004548:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004554:	2b40      	cmp	r3, #64	; 0x40
 8004556:	f040 80b5 	bne.w	80046c4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004566:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 8187 	beq.w	800487e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004576:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800457a:	429a      	cmp	r2, r3
 800457c:	f080 817f 	bcs.w	800487e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004586:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	f040 8086 	bne.w	80046a8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045a8:	e853 3f00 	ldrex	r3, [r3]
 80045ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80045b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	461a      	mov	r2, r3
 80045c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80045c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80045ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045d6:	e841 2300 	strex	r3, r2, [r1]
 80045da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80045de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1da      	bne.n	800459c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3308      	adds	r3, #8
 80045ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045f0:	e853 3f00 	ldrex	r3, [r3]
 80045f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045f8:	f023 0301 	bic.w	r3, r3, #1
 80045fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3308      	adds	r3, #8
 8004606:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800460a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800460e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004610:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004612:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004616:	e841 2300 	strex	r3, r2, [r1]
 800461a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800461c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1e1      	bne.n	80045e6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3308      	adds	r3, #8
 8004628:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800462c:	e853 3f00 	ldrex	r3, [r3]
 8004630:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004638:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3308      	adds	r3, #8
 8004642:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004646:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004648:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800464c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800464e:	e841 2300 	strex	r3, r2, [r1]
 8004652:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1e3      	bne.n	8004622 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2220      	movs	r2, #32
 800465e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004670:	e853 3f00 	ldrex	r3, [r3]
 8004674:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004678:	f023 0310 	bic.w	r3, r3, #16
 800467c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800468a:	65bb      	str	r3, [r7, #88]	; 0x58
 800468c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004690:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004692:	e841 2300 	strex	r3, r2, [r1]
 8004696:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1e4      	bne.n	8004668 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fd f85b 	bl	800175e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	4619      	mov	r1, r3
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7fb ffc1 	bl	8000644 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046c2:	e0dc      	b.n	800487e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 80ce 	beq.w	8004882 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80046e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 80c9 	beq.w	8004882 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f8:	e853 3f00 	ldrex	r3, [r3]
 80046fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004700:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004704:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	461a      	mov	r2, r3
 800470e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004712:	647b      	str	r3, [r7, #68]	; 0x44
 8004714:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004716:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004718:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e4      	bne.n	80046f0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3308      	adds	r3, #8
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	e853 3f00 	ldrex	r3, [r3]
 8004734:	623b      	str	r3, [r7, #32]
   return(result);
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800473c:	f023 0301 	bic.w	r3, r3, #1
 8004740:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3308      	adds	r3, #8
 800474a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800474e:	633a      	str	r2, [r7, #48]	; 0x30
 8004750:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004752:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004756:	e841 2300 	strex	r3, r2, [r1]
 800475a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1e1      	bne.n	8004726 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2220      	movs	r2, #32
 8004766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	e853 3f00 	ldrex	r3, [r3]
 8004782:	60fb      	str	r3, [r7, #12]
   return(result);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0310 	bic.w	r3, r3, #16
 800478a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	461a      	mov	r2, r3
 8004794:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479c:	69b9      	ldr	r1, [r7, #24]
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	e841 2300 	strex	r3, r2, [r1]
 80047a4:	617b      	str	r3, [r7, #20]
   return(result);
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1e4      	bne.n	8004776 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047b0:	4619      	mov	r1, r3
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fb ff46 	bl	8000644 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80047b8:	e063      	b.n	8004882 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80047ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00e      	beq.n	80047e4 <HAL_UART_IRQHandler+0x584>
 80047c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d008      	beq.n	80047e4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80047da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 ff80 	bl	80056e2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047e2:	e051      	b.n	8004888 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80047e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d014      	beq.n	800481a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80047f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d105      	bne.n	8004808 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80047fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004800:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d008      	beq.n	800481a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800480c:	2b00      	cmp	r3, #0
 800480e:	d03a      	beq.n	8004886 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	4798      	blx	r3
    }
    return;
 8004818:	e035      	b.n	8004886 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800481a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800481e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d009      	beq.n	800483a <HAL_UART_IRQHandler+0x5da>
 8004826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800482a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 ff2a 	bl	800568c <UART_EndTransmit_IT>
    return;
 8004838:	e026      	b.n	8004888 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800483a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800483e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d009      	beq.n	800485a <HAL_UART_IRQHandler+0x5fa>
 8004846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800484a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 ff59 	bl	800570a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004858:	e016      	b.n	8004888 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800485a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800485e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d010      	beq.n	8004888 <HAL_UART_IRQHandler+0x628>
 8004866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800486a:	2b00      	cmp	r3, #0
 800486c:	da0c      	bge.n	8004888 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 ff41 	bl	80056f6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004874:	e008      	b.n	8004888 <HAL_UART_IRQHandler+0x628>
      return;
 8004876:	bf00      	nop
 8004878:	e006      	b.n	8004888 <HAL_UART_IRQHandler+0x628>
    return;
 800487a:	bf00      	nop
 800487c:	e004      	b.n	8004888 <HAL_UART_IRQHandler+0x628>
      return;
 800487e:	bf00      	nop
 8004880:	e002      	b.n	8004888 <HAL_UART_IRQHandler+0x628>
      return;
 8004882:	bf00      	nop
 8004884:	e000      	b.n	8004888 <HAL_UART_IRQHandler+0x628>
    return;
 8004886:	bf00      	nop
  }
}
 8004888:	37e8      	adds	r7, #232	; 0xe8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop

08004890 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048e4:	b08c      	sub	sp, #48	; 0x30
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	431a      	orrs	r2, r3
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	431a      	orrs	r2, r3
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	4313      	orrs	r3, r2
 8004906:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4bab      	ldr	r3, [pc, #684]	; (8004bbc <UART_SetConfig+0x2dc>)
 8004910:	4013      	ands	r3, r2
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004918:	430b      	orrs	r3, r1
 800491a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4aa0      	ldr	r2, [pc, #640]	; (8004bc0 <UART_SetConfig+0x2e0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d004      	beq.n	800494c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004948:	4313      	orrs	r3, r2
 800494a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004956:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	6812      	ldr	r2, [r2, #0]
 800495e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004960:	430b      	orrs	r3, r1
 8004962:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496a:	f023 010f 	bic.w	r1, r3, #15
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a91      	ldr	r2, [pc, #580]	; (8004bc4 <UART_SetConfig+0x2e4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d125      	bne.n	80049d0 <UART_SetConfig+0xf0>
 8004984:	4b90      	ldr	r3, [pc, #576]	; (8004bc8 <UART_SetConfig+0x2e8>)
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	2b03      	cmp	r3, #3
 8004990:	d81a      	bhi.n	80049c8 <UART_SetConfig+0xe8>
 8004992:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <UART_SetConfig+0xb8>)
 8004994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004998:	080049a9 	.word	0x080049a9
 800499c:	080049b9 	.word	0x080049b9
 80049a0:	080049b1 	.word	0x080049b1
 80049a4:	080049c1 	.word	0x080049c1
 80049a8:	2301      	movs	r3, #1
 80049aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ae:	e0d6      	b.n	8004b5e <UART_SetConfig+0x27e>
 80049b0:	2302      	movs	r3, #2
 80049b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049b6:	e0d2      	b.n	8004b5e <UART_SetConfig+0x27e>
 80049b8:	2304      	movs	r3, #4
 80049ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049be:	e0ce      	b.n	8004b5e <UART_SetConfig+0x27e>
 80049c0:	2308      	movs	r3, #8
 80049c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049c6:	e0ca      	b.n	8004b5e <UART_SetConfig+0x27e>
 80049c8:	2310      	movs	r3, #16
 80049ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ce:	e0c6      	b.n	8004b5e <UART_SetConfig+0x27e>
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a7d      	ldr	r2, [pc, #500]	; (8004bcc <UART_SetConfig+0x2ec>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d138      	bne.n	8004a4c <UART_SetConfig+0x16c>
 80049da:	4b7b      	ldr	r3, [pc, #492]	; (8004bc8 <UART_SetConfig+0x2e8>)
 80049dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e0:	f003 030c 	and.w	r3, r3, #12
 80049e4:	2b0c      	cmp	r3, #12
 80049e6:	d82d      	bhi.n	8004a44 <UART_SetConfig+0x164>
 80049e8:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <UART_SetConfig+0x110>)
 80049ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ee:	bf00      	nop
 80049f0:	08004a25 	.word	0x08004a25
 80049f4:	08004a45 	.word	0x08004a45
 80049f8:	08004a45 	.word	0x08004a45
 80049fc:	08004a45 	.word	0x08004a45
 8004a00:	08004a35 	.word	0x08004a35
 8004a04:	08004a45 	.word	0x08004a45
 8004a08:	08004a45 	.word	0x08004a45
 8004a0c:	08004a45 	.word	0x08004a45
 8004a10:	08004a2d 	.word	0x08004a2d
 8004a14:	08004a45 	.word	0x08004a45
 8004a18:	08004a45 	.word	0x08004a45
 8004a1c:	08004a45 	.word	0x08004a45
 8004a20:	08004a3d 	.word	0x08004a3d
 8004a24:	2300      	movs	r3, #0
 8004a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a2a:	e098      	b.n	8004b5e <UART_SetConfig+0x27e>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a32:	e094      	b.n	8004b5e <UART_SetConfig+0x27e>
 8004a34:	2304      	movs	r3, #4
 8004a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a3a:	e090      	b.n	8004b5e <UART_SetConfig+0x27e>
 8004a3c:	2308      	movs	r3, #8
 8004a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a42:	e08c      	b.n	8004b5e <UART_SetConfig+0x27e>
 8004a44:	2310      	movs	r3, #16
 8004a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a4a:	e088      	b.n	8004b5e <UART_SetConfig+0x27e>
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a5f      	ldr	r2, [pc, #380]	; (8004bd0 <UART_SetConfig+0x2f0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d125      	bne.n	8004aa2 <UART_SetConfig+0x1c2>
 8004a56:	4b5c      	ldr	r3, [pc, #368]	; (8004bc8 <UART_SetConfig+0x2e8>)
 8004a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a60:	2b30      	cmp	r3, #48	; 0x30
 8004a62:	d016      	beq.n	8004a92 <UART_SetConfig+0x1b2>
 8004a64:	2b30      	cmp	r3, #48	; 0x30
 8004a66:	d818      	bhi.n	8004a9a <UART_SetConfig+0x1ba>
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d00a      	beq.n	8004a82 <UART_SetConfig+0x1a2>
 8004a6c:	2b20      	cmp	r3, #32
 8004a6e:	d814      	bhi.n	8004a9a <UART_SetConfig+0x1ba>
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <UART_SetConfig+0x19a>
 8004a74:	2b10      	cmp	r3, #16
 8004a76:	d008      	beq.n	8004a8a <UART_SetConfig+0x1aa>
 8004a78:	e00f      	b.n	8004a9a <UART_SetConfig+0x1ba>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a80:	e06d      	b.n	8004b5e <UART_SetConfig+0x27e>
 8004a82:	2302      	movs	r3, #2
 8004a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a88:	e069      	b.n	8004b5e <UART_SetConfig+0x27e>
 8004a8a:	2304      	movs	r3, #4
 8004a8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a90:	e065      	b.n	8004b5e <UART_SetConfig+0x27e>
 8004a92:	2308      	movs	r3, #8
 8004a94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a98:	e061      	b.n	8004b5e <UART_SetConfig+0x27e>
 8004a9a:	2310      	movs	r3, #16
 8004a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aa0:	e05d      	b.n	8004b5e <UART_SetConfig+0x27e>
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a4b      	ldr	r2, [pc, #300]	; (8004bd4 <UART_SetConfig+0x2f4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d125      	bne.n	8004af8 <UART_SetConfig+0x218>
 8004aac:	4b46      	ldr	r3, [pc, #280]	; (8004bc8 <UART_SetConfig+0x2e8>)
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ab6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ab8:	d016      	beq.n	8004ae8 <UART_SetConfig+0x208>
 8004aba:	2bc0      	cmp	r3, #192	; 0xc0
 8004abc:	d818      	bhi.n	8004af0 <UART_SetConfig+0x210>
 8004abe:	2b80      	cmp	r3, #128	; 0x80
 8004ac0:	d00a      	beq.n	8004ad8 <UART_SetConfig+0x1f8>
 8004ac2:	2b80      	cmp	r3, #128	; 0x80
 8004ac4:	d814      	bhi.n	8004af0 <UART_SetConfig+0x210>
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d002      	beq.n	8004ad0 <UART_SetConfig+0x1f0>
 8004aca:	2b40      	cmp	r3, #64	; 0x40
 8004acc:	d008      	beq.n	8004ae0 <UART_SetConfig+0x200>
 8004ace:	e00f      	b.n	8004af0 <UART_SetConfig+0x210>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ad6:	e042      	b.n	8004b5e <UART_SetConfig+0x27e>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ade:	e03e      	b.n	8004b5e <UART_SetConfig+0x27e>
 8004ae0:	2304      	movs	r3, #4
 8004ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ae6:	e03a      	b.n	8004b5e <UART_SetConfig+0x27e>
 8004ae8:	2308      	movs	r3, #8
 8004aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aee:	e036      	b.n	8004b5e <UART_SetConfig+0x27e>
 8004af0:	2310      	movs	r3, #16
 8004af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004af6:	e032      	b.n	8004b5e <UART_SetConfig+0x27e>
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a30      	ldr	r2, [pc, #192]	; (8004bc0 <UART_SetConfig+0x2e0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d12a      	bne.n	8004b58 <UART_SetConfig+0x278>
 8004b02:	4b31      	ldr	r3, [pc, #196]	; (8004bc8 <UART_SetConfig+0x2e8>)
 8004b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b10:	d01a      	beq.n	8004b48 <UART_SetConfig+0x268>
 8004b12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b16:	d81b      	bhi.n	8004b50 <UART_SetConfig+0x270>
 8004b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b1c:	d00c      	beq.n	8004b38 <UART_SetConfig+0x258>
 8004b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b22:	d815      	bhi.n	8004b50 <UART_SetConfig+0x270>
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <UART_SetConfig+0x250>
 8004b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b2c:	d008      	beq.n	8004b40 <UART_SetConfig+0x260>
 8004b2e:	e00f      	b.n	8004b50 <UART_SetConfig+0x270>
 8004b30:	2300      	movs	r3, #0
 8004b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b36:	e012      	b.n	8004b5e <UART_SetConfig+0x27e>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b3e:	e00e      	b.n	8004b5e <UART_SetConfig+0x27e>
 8004b40:	2304      	movs	r3, #4
 8004b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b46:	e00a      	b.n	8004b5e <UART_SetConfig+0x27e>
 8004b48:	2308      	movs	r3, #8
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b4e:	e006      	b.n	8004b5e <UART_SetConfig+0x27e>
 8004b50:	2310      	movs	r3, #16
 8004b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b56:	e002      	b.n	8004b5e <UART_SetConfig+0x27e>
 8004b58:	2310      	movs	r3, #16
 8004b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a17      	ldr	r2, [pc, #92]	; (8004bc0 <UART_SetConfig+0x2e0>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	f040 80a8 	bne.w	8004cba <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d834      	bhi.n	8004bdc <UART_SetConfig+0x2fc>
 8004b72:	a201      	add	r2, pc, #4	; (adr r2, 8004b78 <UART_SetConfig+0x298>)
 8004b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b78:	08004b9d 	.word	0x08004b9d
 8004b7c:	08004bdd 	.word	0x08004bdd
 8004b80:	08004ba5 	.word	0x08004ba5
 8004b84:	08004bdd 	.word	0x08004bdd
 8004b88:	08004bab 	.word	0x08004bab
 8004b8c:	08004bdd 	.word	0x08004bdd
 8004b90:	08004bdd 	.word	0x08004bdd
 8004b94:	08004bdd 	.word	0x08004bdd
 8004b98:	08004bb3 	.word	0x08004bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b9c:	f7fe f80e 	bl	8002bbc <HAL_RCC_GetPCLK1Freq>
 8004ba0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ba2:	e021      	b.n	8004be8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ba4:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <UART_SetConfig+0x2f8>)
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ba8:	e01e      	b.n	8004be8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004baa:	f7fd ff99 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8004bae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bb0:	e01a      	b.n	8004be8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bb8:	e016      	b.n	8004be8 <UART_SetConfig+0x308>
 8004bba:	bf00      	nop
 8004bbc:	cfff69f3 	.word	0xcfff69f3
 8004bc0:	40008000 	.word	0x40008000
 8004bc4:	40013800 	.word	0x40013800
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	40004400 	.word	0x40004400
 8004bd0:	40004800 	.word	0x40004800
 8004bd4:	40004c00 	.word	0x40004c00
 8004bd8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004be6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 812a 	beq.w	8004e44 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	4a9e      	ldr	r2, [pc, #632]	; (8004e70 <UART_SetConfig+0x590>)
 8004bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c02:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	4413      	add	r3, r2
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d305      	bcc.n	8004c20 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d903      	bls.n	8004c28 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c26:	e10d      	b.n	8004e44 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	60bb      	str	r3, [r7, #8]
 8004c2e:	60fa      	str	r2, [r7, #12]
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	4a8e      	ldr	r2, [pc, #568]	; (8004e70 <UART_SetConfig+0x590>)
 8004c36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	603b      	str	r3, [r7, #0]
 8004c40:	607a      	str	r2, [r7, #4]
 8004c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c4a:	f7fb fb39 	bl	80002c0 <__aeabi_uldivmod>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	460b      	mov	r3, r1
 8004c52:	4610      	mov	r0, r2
 8004c54:	4619      	mov	r1, r3
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	020b      	lsls	r3, r1, #8
 8004c60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c64:	0202      	lsls	r2, r0, #8
 8004c66:	6979      	ldr	r1, [r7, #20]
 8004c68:	6849      	ldr	r1, [r1, #4]
 8004c6a:	0849      	lsrs	r1, r1, #1
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	460c      	mov	r4, r1
 8004c70:	4605      	mov	r5, r0
 8004c72:	eb12 0804 	adds.w	r8, r2, r4
 8004c76:	eb43 0905 	adc.w	r9, r3, r5
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	469a      	mov	sl, r3
 8004c82:	4693      	mov	fp, r2
 8004c84:	4652      	mov	r2, sl
 8004c86:	465b      	mov	r3, fp
 8004c88:	4640      	mov	r0, r8
 8004c8a:	4649      	mov	r1, r9
 8004c8c:	f7fb fb18 	bl	80002c0 <__aeabi_uldivmod>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4613      	mov	r3, r2
 8004c96:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c9e:	d308      	bcc.n	8004cb2 <UART_SetConfig+0x3d2>
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ca6:	d204      	bcs.n	8004cb2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6a3a      	ldr	r2, [r7, #32]
 8004cae:	60da      	str	r2, [r3, #12]
 8004cb0:	e0c8      	b.n	8004e44 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004cb8:	e0c4      	b.n	8004e44 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc2:	d167      	bne.n	8004d94 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004cc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d828      	bhi.n	8004d1e <UART_SetConfig+0x43e>
 8004ccc:	a201      	add	r2, pc, #4	; (adr r2, 8004cd4 <UART_SetConfig+0x3f4>)
 8004cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd2:	bf00      	nop
 8004cd4:	08004cf9 	.word	0x08004cf9
 8004cd8:	08004d01 	.word	0x08004d01
 8004cdc:	08004d09 	.word	0x08004d09
 8004ce0:	08004d1f 	.word	0x08004d1f
 8004ce4:	08004d0f 	.word	0x08004d0f
 8004ce8:	08004d1f 	.word	0x08004d1f
 8004cec:	08004d1f 	.word	0x08004d1f
 8004cf0:	08004d1f 	.word	0x08004d1f
 8004cf4:	08004d17 	.word	0x08004d17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cf8:	f7fd ff60 	bl	8002bbc <HAL_RCC_GetPCLK1Freq>
 8004cfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cfe:	e014      	b.n	8004d2a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d00:	f7fd ff72 	bl	8002be8 <HAL_RCC_GetPCLK2Freq>
 8004d04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d06:	e010      	b.n	8004d2a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d08:	4b5a      	ldr	r3, [pc, #360]	; (8004e74 <UART_SetConfig+0x594>)
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d0c:	e00d      	b.n	8004d2a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d0e:	f7fd fee7 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8004d12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d14:	e009      	b.n	8004d2a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d1c:	e005      	b.n	8004d2a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 8089 	beq.w	8004e44 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	4a4e      	ldr	r2, [pc, #312]	; (8004e70 <UART_SetConfig+0x590>)
 8004d38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d44:	005a      	lsls	r2, r3, #1
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	085b      	lsrs	r3, r3, #1
 8004d4c:	441a      	add	r2, r3
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	2b0f      	cmp	r3, #15
 8004d5c:	d916      	bls.n	8004d8c <UART_SetConfig+0x4ac>
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d64:	d212      	bcs.n	8004d8c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f023 030f 	bic.w	r3, r3, #15
 8004d6e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	085b      	lsrs	r3, r3, #1
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	8bfb      	ldrh	r3, [r7, #30]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	8bfa      	ldrh	r2, [r7, #30]
 8004d88:	60da      	str	r2, [r3, #12]
 8004d8a:	e05b      	b.n	8004e44 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d92:	e057      	b.n	8004e44 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d828      	bhi.n	8004dee <UART_SetConfig+0x50e>
 8004d9c:	a201      	add	r2, pc, #4	; (adr r2, 8004da4 <UART_SetConfig+0x4c4>)
 8004d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da2:	bf00      	nop
 8004da4:	08004dc9 	.word	0x08004dc9
 8004da8:	08004dd1 	.word	0x08004dd1
 8004dac:	08004dd9 	.word	0x08004dd9
 8004db0:	08004def 	.word	0x08004def
 8004db4:	08004ddf 	.word	0x08004ddf
 8004db8:	08004def 	.word	0x08004def
 8004dbc:	08004def 	.word	0x08004def
 8004dc0:	08004def 	.word	0x08004def
 8004dc4:	08004de7 	.word	0x08004de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dc8:	f7fd fef8 	bl	8002bbc <HAL_RCC_GetPCLK1Freq>
 8004dcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dce:	e014      	b.n	8004dfa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dd0:	f7fd ff0a 	bl	8002be8 <HAL_RCC_GetPCLK2Freq>
 8004dd4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dd6:	e010      	b.n	8004dfa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dd8:	4b26      	ldr	r3, [pc, #152]	; (8004e74 <UART_SetConfig+0x594>)
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ddc:	e00d      	b.n	8004dfa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dde:	f7fd fe7f 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8004de2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004de4:	e009      	b.n	8004dfa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004dec:	e005      	b.n	8004dfa <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004df8:	bf00      	nop
    }

    if (pclk != 0U)
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d021      	beq.n	8004e44 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	4a1a      	ldr	r2, [pc, #104]	; (8004e70 <UART_SetConfig+0x590>)
 8004e06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	085b      	lsrs	r3, r3, #1
 8004e18:	441a      	add	r2, r3
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	2b0f      	cmp	r3, #15
 8004e28:	d909      	bls.n	8004e3e <UART_SetConfig+0x55e>
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e30:	d205      	bcs.n	8004e3e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	60da      	str	r2, [r3, #12]
 8004e3c:	e002      	b.n	8004e44 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2200      	movs	r2, #0
 8004e58:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004e60:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3730      	adds	r7, #48	; 0x30
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e6e:	bf00      	nop
 8004e70:	08006a10 	.word	0x08006a10
 8004e74:	00f42400 	.word	0x00f42400

08004e78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00a      	beq.n	8004ea2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0c:	f003 0310 	and.w	r3, r3, #16
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2e:	f003 0320 	and.w	r3, r3, #32
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d01a      	beq.n	8004f8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f76:	d10a      	bne.n	8004f8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	605a      	str	r2, [r3, #4]
  }
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af02      	add	r7, sp, #8
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fcc:	f7fc f966 	bl	800129c <HAL_GetTick>
 8004fd0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0308 	and.w	r3, r3, #8
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d10e      	bne.n	8004ffe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fe0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f82f 	bl	8005052 <UART_WaitOnFlagUntilTimeout>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e025      	b.n	800504a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b04      	cmp	r3, #4
 800500a:	d10e      	bne.n	800502a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800500c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f819 	bl	8005052 <UART_WaitOnFlagUntilTimeout>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e00f      	b.n	800504a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2220      	movs	r2, #32
 800502e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2220      	movs	r2, #32
 8005036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b09c      	sub	sp, #112	; 0x70
 8005056:	af00      	add	r7, sp, #0
 8005058:	60f8      	str	r0, [r7, #12]
 800505a:	60b9      	str	r1, [r7, #8]
 800505c:	603b      	str	r3, [r7, #0]
 800505e:	4613      	mov	r3, r2
 8005060:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005062:	e0a9      	b.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005064:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506a:	f000 80a5 	beq.w	80051b8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800506e:	f7fc f915 	bl	800129c <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800507a:	429a      	cmp	r2, r3
 800507c:	d302      	bcc.n	8005084 <UART_WaitOnFlagUntilTimeout+0x32>
 800507e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005080:	2b00      	cmp	r3, #0
 8005082:	d140      	bne.n	8005106 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005094:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005098:	667b      	str	r3, [r7, #100]	; 0x64
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	461a      	mov	r2, r3
 80050a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050a4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80050b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e6      	bne.n	8005084 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3308      	adds	r3, #8
 80050bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c0:	e853 3f00 	ldrex	r3, [r3]
 80050c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c8:	f023 0301 	bic.w	r3, r3, #1
 80050cc:	663b      	str	r3, [r7, #96]	; 0x60
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3308      	adds	r3, #8
 80050d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80050d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80050dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050de:	e841 2300 	strex	r3, r2, [r1]
 80050e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80050e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1e5      	bne.n	80050b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e069      	b.n	80051da <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b00      	cmp	r3, #0
 8005112:	d051      	beq.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800511e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005122:	d149      	bne.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800512c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005136:	e853 3f00 	ldrex	r3, [r3]
 800513a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005142:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	461a      	mov	r2, r3
 800514a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800514c:	637b      	str	r3, [r7, #52]	; 0x34
 800514e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005154:	e841 2300 	strex	r3, r2, [r1]
 8005158:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800515a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e6      	bne.n	800512e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3308      	adds	r3, #8
 8005166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	e853 3f00 	ldrex	r3, [r3]
 800516e:	613b      	str	r3, [r7, #16]
   return(result);
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f023 0301 	bic.w	r3, r3, #1
 8005176:	66bb      	str	r3, [r7, #104]	; 0x68
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3308      	adds	r3, #8
 800517e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005180:	623a      	str	r2, [r7, #32]
 8005182:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005184:	69f9      	ldr	r1, [r7, #28]
 8005186:	6a3a      	ldr	r2, [r7, #32]
 8005188:	e841 2300 	strex	r3, r2, [r1]
 800518c:	61bb      	str	r3, [r7, #24]
   return(result);
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1e5      	bne.n	8005160 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2220      	movs	r2, #32
 8005198:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2220      	movs	r2, #32
 80051a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e010      	b.n	80051da <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	69da      	ldr	r2, [r3, #28]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	4013      	ands	r3, r2
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	bf0c      	ite	eq
 80051c8:	2301      	moveq	r3, #1
 80051ca:	2300      	movne	r3, #0
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	461a      	mov	r2, r3
 80051d0:	79fb      	ldrb	r3, [r7, #7]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	f43f af46 	beq.w	8005064 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3770      	adds	r7, #112	; 0x70
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
	...

080051e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b096      	sub	sp, #88	; 0x58
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	4613      	mov	r3, r2
 80051f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	88fa      	ldrh	r2, [r7, #6]
 80051fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2222      	movs	r2, #34	; 0x22
 800520c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005214:	2b00      	cmp	r3, #0
 8005216:	d02c      	beq.n	8005272 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800521c:	4a42      	ldr	r2, [pc, #264]	; (8005328 <UART_Start_Receive_DMA+0x144>)
 800521e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005224:	4a41      	ldr	r2, [pc, #260]	; (800532c <UART_Start_Receive_DMA+0x148>)
 8005226:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800522c:	4a40      	ldr	r2, [pc, #256]	; (8005330 <UART_Start_Receive_DMA+0x14c>)
 800522e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005234:	2200      	movs	r2, #0
 8005236:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3324      	adds	r3, #36	; 0x24
 8005242:	4619      	mov	r1, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005248:	461a      	mov	r2, r3
 800524a:	88fb      	ldrh	r3, [r7, #6]
 800524c:	f7fc fa0c 	bl	8001668 <HAL_DMA_Start_IT>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00d      	beq.n	8005272 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2210      	movs	r2, #16
 800525a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2220      	movs	r2, #32
 800526a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e055      	b.n	800531e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d018      	beq.n	80052b4 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800528a:	e853 3f00 	ldrex	r3, [r3]
 800528e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005296:	657b      	str	r3, [r7, #84]	; 0x54
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	461a      	mov	r2, r3
 800529e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80052a2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052a8:	e841 2300 	strex	r3, r2, [r1]
 80052ac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1e6      	bne.n	8005282 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3308      	adds	r3, #8
 80052ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052be:	e853 3f00 	ldrex	r3, [r3]
 80052c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	f043 0301 	orr.w	r3, r3, #1
 80052ca:	653b      	str	r3, [r7, #80]	; 0x50
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3308      	adds	r3, #8
 80052d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80052d4:	637a      	str	r2, [r7, #52]	; 0x34
 80052d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052dc:	e841 2300 	strex	r3, r2, [r1]
 80052e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1e5      	bne.n	80052b4 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3308      	adds	r3, #8
 80052ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	e853 3f00 	ldrex	r3, [r3]
 80052f6:	613b      	str	r3, [r7, #16]
   return(result);
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3308      	adds	r3, #8
 8005306:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005308:	623a      	str	r2, [r7, #32]
 800530a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530c:	69f9      	ldr	r1, [r7, #28]
 800530e:	6a3a      	ldr	r2, [r7, #32]
 8005310:	e841 2300 	strex	r3, r2, [r1]
 8005314:	61bb      	str	r3, [r7, #24]
   return(result);
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1e5      	bne.n	80052e8 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3758      	adds	r7, #88	; 0x58
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	08005483 	.word	0x08005483
 800532c:	080055a9 	.word	0x080055a9
 8005330:	080055e1 	.word	0x080055e1

08005334 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005334:	b480      	push	{r7}
 8005336:	b08f      	sub	sp, #60	; 0x3c
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	e853 3f00 	ldrex	r3, [r3]
 8005348:	61fb      	str	r3, [r7, #28]
   return(result);
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005350:	637b      	str	r3, [r7, #52]	; 0x34
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800535c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005362:	e841 2300 	strex	r3, r2, [r1]
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1e6      	bne.n	800533c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	3308      	adds	r3, #8
 8005374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	e853 3f00 	ldrex	r3, [r3]
 800537c:	60bb      	str	r3, [r7, #8]
   return(result);
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005384:	633b      	str	r3, [r7, #48]	; 0x30
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3308      	adds	r3, #8
 800538c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800538e:	61ba      	str	r2, [r7, #24]
 8005390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005392:	6979      	ldr	r1, [r7, #20]
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	e841 2300 	strex	r3, r2, [r1]
 800539a:	613b      	str	r3, [r7, #16]
   return(result);
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1e5      	bne.n	800536e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80053aa:	bf00      	nop
 80053ac:	373c      	adds	r7, #60	; 0x3c
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b095      	sub	sp, #84	; 0x54
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c6:	e853 3f00 	ldrex	r3, [r3]
 80053ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053dc:	643b      	str	r3, [r7, #64]	; 0x40
 80053de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053e4:	e841 2300 	strex	r3, r2, [r1]
 80053e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1e6      	bne.n	80053be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3308      	adds	r3, #8
 80053f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	e853 3f00 	ldrex	r3, [r3]
 80053fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005406:	f023 0301 	bic.w	r3, r3, #1
 800540a:	64bb      	str	r3, [r7, #72]	; 0x48
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3308      	adds	r3, #8
 8005412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005414:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800541a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800541c:	e841 2300 	strex	r3, r2, [r1]
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e3      	bne.n	80053f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800542c:	2b01      	cmp	r3, #1
 800542e:	d118      	bne.n	8005462 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	e853 3f00 	ldrex	r3, [r3]
 800543c:	60bb      	str	r3, [r7, #8]
   return(result);
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f023 0310 	bic.w	r3, r3, #16
 8005444:	647b      	str	r3, [r7, #68]	; 0x44
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800544e:	61bb      	str	r3, [r7, #24]
 8005450:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005452:	6979      	ldr	r1, [r7, #20]
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	e841 2300 	strex	r3, r2, [r1]
 800545a:	613b      	str	r3, [r7, #16]
   return(result);
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1e6      	bne.n	8005430 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2220      	movs	r2, #32
 8005466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005476:	bf00      	nop
 8005478:	3754      	adds	r7, #84	; 0x54
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b09c      	sub	sp, #112	; 0x70
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0320 	and.w	r3, r3, #32
 800549a:	2b00      	cmp	r3, #0
 800549c:	d171      	bne.n	8005582 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800549e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a0:	2200      	movs	r2, #0
 80054a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ae:	e853 3f00 	ldrex	r3, [r3]
 80054b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80054bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	461a      	mov	r2, r3
 80054c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80054c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054cc:	e841 2300 	strex	r3, r2, [r1]
 80054d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1e6      	bne.n	80054a6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3308      	adds	r3, #8
 80054de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e2:	e853 3f00 	ldrex	r3, [r3]
 80054e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ea:	f023 0301 	bic.w	r3, r3, #1
 80054ee:	667b      	str	r3, [r7, #100]	; 0x64
 80054f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3308      	adds	r3, #8
 80054f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80054f8:	647a      	str	r2, [r7, #68]	; 0x44
 80054fa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e5      	bne.n	80054d8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800550c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3308      	adds	r3, #8
 8005512:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	e853 3f00 	ldrex	r3, [r3]
 800551a:	623b      	str	r3, [r7, #32]
   return(result);
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005522:	663b      	str	r3, [r7, #96]	; 0x60
 8005524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3308      	adds	r3, #8
 800552a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800552c:	633a      	str	r2, [r7, #48]	; 0x30
 800552e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005530:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005534:	e841 2300 	strex	r3, r2, [r1]
 8005538:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800553a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1e5      	bne.n	800550c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005542:	2220      	movs	r2, #32
 8005544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800554a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800554c:	2b01      	cmp	r3, #1
 800554e:	d118      	bne.n	8005582 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	e853 3f00 	ldrex	r3, [r3]
 800555c:	60fb      	str	r3, [r7, #12]
   return(result);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f023 0310 	bic.w	r3, r3, #16
 8005564:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800556e:	61fb      	str	r3, [r7, #28]
 8005570:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005572:	69b9      	ldr	r1, [r7, #24]
 8005574:	69fa      	ldr	r2, [r7, #28]
 8005576:	e841 2300 	strex	r3, r2, [r1]
 800557a:	617b      	str	r3, [r7, #20]
   return(result);
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1e6      	bne.n	8005550 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005586:	2b01      	cmp	r3, #1
 8005588:	d107      	bne.n	800559a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800558a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800558c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005590:	4619      	mov	r1, r3
 8005592:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005594:	f7fb f856 	bl	8000644 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005598:	e002      	b.n	80055a0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800559a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800559c:	f7ff f982 	bl	80048a4 <HAL_UART_RxCpltCallback>
}
 80055a0:	bf00      	nop
 80055a2:	3770      	adds	r7, #112	; 0x70
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d109      	bne.n	80055d2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80055c4:	085b      	lsrs	r3, r3, #1
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	4619      	mov	r1, r3
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f7fb f83a 	bl	8000644 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055d0:	e002      	b.n	80055d8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f7ff f970 	bl	80048b8 <HAL_UART_RxHalfCpltCallback>
}
 80055d8:	bf00      	nop
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ec:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055f4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005608:	2b80      	cmp	r3, #128	; 0x80
 800560a:	d109      	bne.n	8005620 <UART_DMAError+0x40>
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	2b21      	cmp	r3, #33	; 0x21
 8005610:	d106      	bne.n	8005620 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2200      	movs	r2, #0
 8005616:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800561a:	6978      	ldr	r0, [r7, #20]
 800561c:	f7ff fe8a 	bl	8005334 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562a:	2b40      	cmp	r3, #64	; 0x40
 800562c:	d109      	bne.n	8005642 <UART_DMAError+0x62>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2b22      	cmp	r3, #34	; 0x22
 8005632:	d106      	bne.n	8005642 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2200      	movs	r2, #0
 8005638:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800563c:	6978      	ldr	r0, [r7, #20]
 800563e:	f7ff feba 	bl	80053b6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005648:	f043 0210 	orr.w	r2, r3, #16
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005652:	6978      	ldr	r0, [r7, #20]
 8005654:	f7ff f93a 	bl	80048cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005658:	bf00      	nop
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f7ff f924 	bl	80048cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005684:	bf00      	nop
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	e853 3f00 	ldrex	r3, [r3]
 80056a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056a8:	61fb      	str	r3, [r7, #28]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	461a      	mov	r2, r3
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	61bb      	str	r3, [r7, #24]
 80056b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b6:	6979      	ldr	r1, [r7, #20]
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	e841 2300 	strex	r3, r2, [r1]
 80056be:	613b      	str	r3, [r7, #16]
   return(result);
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1e6      	bne.n	8005694 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2220      	movs	r2, #32
 80056ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7ff f8db 	bl	8004890 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056da:	bf00      	nop
 80056dc:	3720      	adds	r7, #32
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80056ea:	bf00      	nop
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b083      	sub	sp, #12
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80056fe:	bf00      	nop
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800571e:	b480      	push	{r7}
 8005720:	b085      	sub	sp, #20
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_UARTEx_DisableFifoMode+0x16>
 8005730:	2302      	movs	r3, #2
 8005732:	e027      	b.n	8005784 <HAL_UARTEx_DisableFifoMode+0x66>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2224      	movs	r2, #36	; 0x24
 8005740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 0201 	bic.w	r2, r2, #1
 800575a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005762:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2220      	movs	r2, #32
 8005776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e02d      	b.n	8005804 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2224      	movs	r2, #36	; 0x24
 80057b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0201 	bic.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f8ab 	bl	8005940 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2220      	movs	r2, #32
 80057f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005820:	2302      	movs	r3, #2
 8005822:	e02d      	b.n	8005880 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2224      	movs	r2, #36	; 0x24
 8005830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0201 	bic.w	r2, r2, #1
 800584a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f86d 	bl	8005940 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2220      	movs	r2, #32
 8005872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08c      	sub	sp, #48	; 0x30
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	4613      	mov	r3, r2
 8005894:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589c:	2b20      	cmp	r3, #32
 800589e:	d14a      	bne.n	8005936 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80058a6:	88fb      	ldrh	r3, [r7, #6]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e043      	b.n	8005938 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d101      	bne.n	80058be <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 80058ba:	2302      	movs	r3, #2
 80058bc:	e03c      	b.n	8005938 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80058cc:	88fb      	ldrh	r3, [r7, #6]
 80058ce:	461a      	mov	r2, r3
 80058d0:	68b9      	ldr	r1, [r7, #8]
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f7ff fc86 	bl	80051e4 <UART_Start_Receive_DMA>
 80058d8:	4603      	mov	r3, r0
 80058da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80058de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d124      	bne.n	8005930 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d11d      	bne.n	800592a <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2210      	movs	r2, #16
 80058f4:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	617b      	str	r3, [r7, #20]
   return(result);
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f043 0310 	orr.w	r3, r3, #16
 800590a:	62bb      	str	r3, [r7, #40]	; 0x28
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005914:	627b      	str	r3, [r7, #36]	; 0x24
 8005916:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	6a39      	ldr	r1, [r7, #32]
 800591a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800591c:	e841 2300 	strex	r3, r2, [r1]
 8005920:	61fb      	str	r3, [r7, #28]
   return(result);
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e6      	bne.n	80058f6 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8005928:	e002      	b.n	8005930 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005930:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005934:	e000      	b.n	8005938 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8005936:	2302      	movs	r3, #2
  }
}
 8005938:	4618      	mov	r0, r3
 800593a:	3730      	adds	r7, #48	; 0x30
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800594c:	2b00      	cmp	r3, #0
 800594e:	d108      	bne.n	8005962 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005960:	e031      	b.n	80059c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005962:	2308      	movs	r3, #8
 8005964:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005966:	2308      	movs	r3, #8
 8005968:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	0e5b      	lsrs	r3, r3, #25
 8005972:	b2db      	uxtb	r3, r3
 8005974:	f003 0307 	and.w	r3, r3, #7
 8005978:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	0f5b      	lsrs	r3, r3, #29
 8005982:	b2db      	uxtb	r3, r3
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800598a:	7bbb      	ldrb	r3, [r7, #14]
 800598c:	7b3a      	ldrb	r2, [r7, #12]
 800598e:	4911      	ldr	r1, [pc, #68]	; (80059d4 <UARTEx_SetNbDataToProcess+0x94>)
 8005990:	5c8a      	ldrb	r2, [r1, r2]
 8005992:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005996:	7b3a      	ldrb	r2, [r7, #12]
 8005998:	490f      	ldr	r1, [pc, #60]	; (80059d8 <UARTEx_SetNbDataToProcess+0x98>)
 800599a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800599c:	fb93 f3f2 	sdiv	r3, r3, r2
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
 80059aa:	7b7a      	ldrb	r2, [r7, #13]
 80059ac:	4909      	ldr	r1, [pc, #36]	; (80059d4 <UARTEx_SetNbDataToProcess+0x94>)
 80059ae:	5c8a      	ldrb	r2, [r1, r2]
 80059b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80059b4:	7b7a      	ldrb	r2, [r7, #13]
 80059b6:	4908      	ldr	r1, [pc, #32]	; (80059d8 <UARTEx_SetNbDataToProcess+0x98>)
 80059b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80059be:	b29a      	uxth	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80059c6:	bf00      	nop
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	08006a28 	.word	0x08006a28
 80059d8:	08006a30 	.word	0x08006a30

080059dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80059e4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80059e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	43db      	mvns	r3, r3
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	4013      	ands	r3, r2
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a12:	b084      	sub	sp, #16
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	f107 0014 	add.w	r0, r7, #20
 8005a20:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	b004      	add	sp, #16
 8005a52:	4770      	bx	lr

08005a54 <__errno>:
 8005a54:	4b01      	ldr	r3, [pc, #4]	; (8005a5c <__errno+0x8>)
 8005a56:	6818      	ldr	r0, [r3, #0]
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	20000014 	.word	0x20000014

08005a60 <__libc_init_array>:
 8005a60:	b570      	push	{r4, r5, r6, lr}
 8005a62:	4d0d      	ldr	r5, [pc, #52]	; (8005a98 <__libc_init_array+0x38>)
 8005a64:	4c0d      	ldr	r4, [pc, #52]	; (8005a9c <__libc_init_array+0x3c>)
 8005a66:	1b64      	subs	r4, r4, r5
 8005a68:	10a4      	asrs	r4, r4, #2
 8005a6a:	2600      	movs	r6, #0
 8005a6c:	42a6      	cmp	r6, r4
 8005a6e:	d109      	bne.n	8005a84 <__libc_init_array+0x24>
 8005a70:	4d0b      	ldr	r5, [pc, #44]	; (8005aa0 <__libc_init_array+0x40>)
 8005a72:	4c0c      	ldr	r4, [pc, #48]	; (8005aa4 <__libc_init_array+0x44>)
 8005a74:	f000 ffae 	bl	80069d4 <_init>
 8005a78:	1b64      	subs	r4, r4, r5
 8005a7a:	10a4      	asrs	r4, r4, #2
 8005a7c:	2600      	movs	r6, #0
 8005a7e:	42a6      	cmp	r6, r4
 8005a80:	d105      	bne.n	8005a8e <__libc_init_array+0x2e>
 8005a82:	bd70      	pop	{r4, r5, r6, pc}
 8005a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a88:	4798      	blx	r3
 8005a8a:	3601      	adds	r6, #1
 8005a8c:	e7ee      	b.n	8005a6c <__libc_init_array+0xc>
 8005a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a92:	4798      	blx	r3
 8005a94:	3601      	adds	r6, #1
 8005a96:	e7f2      	b.n	8005a7e <__libc_init_array+0x1e>
 8005a98:	08006ad8 	.word	0x08006ad8
 8005a9c:	08006ad8 	.word	0x08006ad8
 8005aa0:	08006ad8 	.word	0x08006ad8
 8005aa4:	08006adc 	.word	0x08006adc

08005aa8 <memset>:
 8005aa8:	4402      	add	r2, r0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d100      	bne.n	8005ab2 <memset+0xa>
 8005ab0:	4770      	bx	lr
 8005ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ab6:	e7f9      	b.n	8005aac <memset+0x4>

08005ab8 <iprintf>:
 8005ab8:	b40f      	push	{r0, r1, r2, r3}
 8005aba:	4b0a      	ldr	r3, [pc, #40]	; (8005ae4 <iprintf+0x2c>)
 8005abc:	b513      	push	{r0, r1, r4, lr}
 8005abe:	681c      	ldr	r4, [r3, #0]
 8005ac0:	b124      	cbz	r4, 8005acc <iprintf+0x14>
 8005ac2:	69a3      	ldr	r3, [r4, #24]
 8005ac4:	b913      	cbnz	r3, 8005acc <iprintf+0x14>
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	f000 f866 	bl	8005b98 <__sinit>
 8005acc:	ab05      	add	r3, sp, #20
 8005ace:	9a04      	ldr	r2, [sp, #16]
 8005ad0:	68a1      	ldr	r1, [r4, #8]
 8005ad2:	9301      	str	r3, [sp, #4]
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	f000 f9bd 	bl	8005e54 <_vfiprintf_r>
 8005ada:	b002      	add	sp, #8
 8005adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ae0:	b004      	add	sp, #16
 8005ae2:	4770      	bx	lr
 8005ae4:	20000014 	.word	0x20000014

08005ae8 <std>:
 8005ae8:	2300      	movs	r3, #0
 8005aea:	b510      	push	{r4, lr}
 8005aec:	4604      	mov	r4, r0
 8005aee:	e9c0 3300 	strd	r3, r3, [r0]
 8005af2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005af6:	6083      	str	r3, [r0, #8]
 8005af8:	8181      	strh	r1, [r0, #12]
 8005afa:	6643      	str	r3, [r0, #100]	; 0x64
 8005afc:	81c2      	strh	r2, [r0, #14]
 8005afe:	6183      	str	r3, [r0, #24]
 8005b00:	4619      	mov	r1, r3
 8005b02:	2208      	movs	r2, #8
 8005b04:	305c      	adds	r0, #92	; 0x5c
 8005b06:	f7ff ffcf 	bl	8005aa8 <memset>
 8005b0a:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <std+0x38>)
 8005b0c:	6263      	str	r3, [r4, #36]	; 0x24
 8005b0e:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <std+0x3c>)
 8005b10:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b12:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <std+0x40>)
 8005b14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b16:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <std+0x44>)
 8005b18:	6224      	str	r4, [r4, #32]
 8005b1a:	6323      	str	r3, [r4, #48]	; 0x30
 8005b1c:	bd10      	pop	{r4, pc}
 8005b1e:	bf00      	nop
 8005b20:	080063fd 	.word	0x080063fd
 8005b24:	0800641f 	.word	0x0800641f
 8005b28:	08006457 	.word	0x08006457
 8005b2c:	0800647b 	.word	0x0800647b

08005b30 <_cleanup_r>:
 8005b30:	4901      	ldr	r1, [pc, #4]	; (8005b38 <_cleanup_r+0x8>)
 8005b32:	f000 b8af 	b.w	8005c94 <_fwalk_reent>
 8005b36:	bf00      	nop
 8005b38:	08006755 	.word	0x08006755

08005b3c <__sfmoreglue>:
 8005b3c:	b570      	push	{r4, r5, r6, lr}
 8005b3e:	2268      	movs	r2, #104	; 0x68
 8005b40:	1e4d      	subs	r5, r1, #1
 8005b42:	4355      	muls	r5, r2
 8005b44:	460e      	mov	r6, r1
 8005b46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b4a:	f000 f8e5 	bl	8005d18 <_malloc_r>
 8005b4e:	4604      	mov	r4, r0
 8005b50:	b140      	cbz	r0, 8005b64 <__sfmoreglue+0x28>
 8005b52:	2100      	movs	r1, #0
 8005b54:	e9c0 1600 	strd	r1, r6, [r0]
 8005b58:	300c      	adds	r0, #12
 8005b5a:	60a0      	str	r0, [r4, #8]
 8005b5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b60:	f7ff ffa2 	bl	8005aa8 <memset>
 8005b64:	4620      	mov	r0, r4
 8005b66:	bd70      	pop	{r4, r5, r6, pc}

08005b68 <__sfp_lock_acquire>:
 8005b68:	4801      	ldr	r0, [pc, #4]	; (8005b70 <__sfp_lock_acquire+0x8>)
 8005b6a:	f000 b8b3 	b.w	8005cd4 <__retarget_lock_acquire_recursive>
 8005b6e:	bf00      	nop
 8005b70:	200009e1 	.word	0x200009e1

08005b74 <__sfp_lock_release>:
 8005b74:	4801      	ldr	r0, [pc, #4]	; (8005b7c <__sfp_lock_release+0x8>)
 8005b76:	f000 b8ae 	b.w	8005cd6 <__retarget_lock_release_recursive>
 8005b7a:	bf00      	nop
 8005b7c:	200009e1 	.word	0x200009e1

08005b80 <__sinit_lock_acquire>:
 8005b80:	4801      	ldr	r0, [pc, #4]	; (8005b88 <__sinit_lock_acquire+0x8>)
 8005b82:	f000 b8a7 	b.w	8005cd4 <__retarget_lock_acquire_recursive>
 8005b86:	bf00      	nop
 8005b88:	200009e2 	.word	0x200009e2

08005b8c <__sinit_lock_release>:
 8005b8c:	4801      	ldr	r0, [pc, #4]	; (8005b94 <__sinit_lock_release+0x8>)
 8005b8e:	f000 b8a2 	b.w	8005cd6 <__retarget_lock_release_recursive>
 8005b92:	bf00      	nop
 8005b94:	200009e2 	.word	0x200009e2

08005b98 <__sinit>:
 8005b98:	b510      	push	{r4, lr}
 8005b9a:	4604      	mov	r4, r0
 8005b9c:	f7ff fff0 	bl	8005b80 <__sinit_lock_acquire>
 8005ba0:	69a3      	ldr	r3, [r4, #24]
 8005ba2:	b11b      	cbz	r3, 8005bac <__sinit+0x14>
 8005ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ba8:	f7ff bff0 	b.w	8005b8c <__sinit_lock_release>
 8005bac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005bb0:	6523      	str	r3, [r4, #80]	; 0x50
 8005bb2:	4b13      	ldr	r3, [pc, #76]	; (8005c00 <__sinit+0x68>)
 8005bb4:	4a13      	ldr	r2, [pc, #76]	; (8005c04 <__sinit+0x6c>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8005bba:	42a3      	cmp	r3, r4
 8005bbc:	bf04      	itt	eq
 8005bbe:	2301      	moveq	r3, #1
 8005bc0:	61a3      	streq	r3, [r4, #24]
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	f000 f820 	bl	8005c08 <__sfp>
 8005bc8:	6060      	str	r0, [r4, #4]
 8005bca:	4620      	mov	r0, r4
 8005bcc:	f000 f81c 	bl	8005c08 <__sfp>
 8005bd0:	60a0      	str	r0, [r4, #8]
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f000 f818 	bl	8005c08 <__sfp>
 8005bd8:	2200      	movs	r2, #0
 8005bda:	60e0      	str	r0, [r4, #12]
 8005bdc:	2104      	movs	r1, #4
 8005bde:	6860      	ldr	r0, [r4, #4]
 8005be0:	f7ff ff82 	bl	8005ae8 <std>
 8005be4:	68a0      	ldr	r0, [r4, #8]
 8005be6:	2201      	movs	r2, #1
 8005be8:	2109      	movs	r1, #9
 8005bea:	f7ff ff7d 	bl	8005ae8 <std>
 8005bee:	68e0      	ldr	r0, [r4, #12]
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	2112      	movs	r1, #18
 8005bf4:	f7ff ff78 	bl	8005ae8 <std>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	61a3      	str	r3, [r4, #24]
 8005bfc:	e7d2      	b.n	8005ba4 <__sinit+0xc>
 8005bfe:	bf00      	nop
 8005c00:	08006a38 	.word	0x08006a38
 8005c04:	08005b31 	.word	0x08005b31

08005c08 <__sfp>:
 8005c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0a:	4607      	mov	r7, r0
 8005c0c:	f7ff ffac 	bl	8005b68 <__sfp_lock_acquire>
 8005c10:	4b1e      	ldr	r3, [pc, #120]	; (8005c8c <__sfp+0x84>)
 8005c12:	681e      	ldr	r6, [r3, #0]
 8005c14:	69b3      	ldr	r3, [r6, #24]
 8005c16:	b913      	cbnz	r3, 8005c1e <__sfp+0x16>
 8005c18:	4630      	mov	r0, r6
 8005c1a:	f7ff ffbd 	bl	8005b98 <__sinit>
 8005c1e:	3648      	adds	r6, #72	; 0x48
 8005c20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c24:	3b01      	subs	r3, #1
 8005c26:	d503      	bpl.n	8005c30 <__sfp+0x28>
 8005c28:	6833      	ldr	r3, [r6, #0]
 8005c2a:	b30b      	cbz	r3, 8005c70 <__sfp+0x68>
 8005c2c:	6836      	ldr	r6, [r6, #0]
 8005c2e:	e7f7      	b.n	8005c20 <__sfp+0x18>
 8005c30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c34:	b9d5      	cbnz	r5, 8005c6c <__sfp+0x64>
 8005c36:	4b16      	ldr	r3, [pc, #88]	; (8005c90 <__sfp+0x88>)
 8005c38:	60e3      	str	r3, [r4, #12]
 8005c3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c3e:	6665      	str	r5, [r4, #100]	; 0x64
 8005c40:	f000 f847 	bl	8005cd2 <__retarget_lock_init_recursive>
 8005c44:	f7ff ff96 	bl	8005b74 <__sfp_lock_release>
 8005c48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005c4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005c50:	6025      	str	r5, [r4, #0]
 8005c52:	61a5      	str	r5, [r4, #24]
 8005c54:	2208      	movs	r2, #8
 8005c56:	4629      	mov	r1, r5
 8005c58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c5c:	f7ff ff24 	bl	8005aa8 <memset>
 8005c60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c68:	4620      	mov	r0, r4
 8005c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c6c:	3468      	adds	r4, #104	; 0x68
 8005c6e:	e7d9      	b.n	8005c24 <__sfp+0x1c>
 8005c70:	2104      	movs	r1, #4
 8005c72:	4638      	mov	r0, r7
 8005c74:	f7ff ff62 	bl	8005b3c <__sfmoreglue>
 8005c78:	4604      	mov	r4, r0
 8005c7a:	6030      	str	r0, [r6, #0]
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	d1d5      	bne.n	8005c2c <__sfp+0x24>
 8005c80:	f7ff ff78 	bl	8005b74 <__sfp_lock_release>
 8005c84:	230c      	movs	r3, #12
 8005c86:	603b      	str	r3, [r7, #0]
 8005c88:	e7ee      	b.n	8005c68 <__sfp+0x60>
 8005c8a:	bf00      	nop
 8005c8c:	08006a38 	.word	0x08006a38
 8005c90:	ffff0001 	.word	0xffff0001

08005c94 <_fwalk_reent>:
 8005c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c98:	4606      	mov	r6, r0
 8005c9a:	4688      	mov	r8, r1
 8005c9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ca0:	2700      	movs	r7, #0
 8005ca2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ca6:	f1b9 0901 	subs.w	r9, r9, #1
 8005caa:	d505      	bpl.n	8005cb8 <_fwalk_reent+0x24>
 8005cac:	6824      	ldr	r4, [r4, #0]
 8005cae:	2c00      	cmp	r4, #0
 8005cb0:	d1f7      	bne.n	8005ca2 <_fwalk_reent+0xe>
 8005cb2:	4638      	mov	r0, r7
 8005cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cb8:	89ab      	ldrh	r3, [r5, #12]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d907      	bls.n	8005cce <_fwalk_reent+0x3a>
 8005cbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	d003      	beq.n	8005cce <_fwalk_reent+0x3a>
 8005cc6:	4629      	mov	r1, r5
 8005cc8:	4630      	mov	r0, r6
 8005cca:	47c0      	blx	r8
 8005ccc:	4307      	orrs	r7, r0
 8005cce:	3568      	adds	r5, #104	; 0x68
 8005cd0:	e7e9      	b.n	8005ca6 <_fwalk_reent+0x12>

08005cd2 <__retarget_lock_init_recursive>:
 8005cd2:	4770      	bx	lr

08005cd4 <__retarget_lock_acquire_recursive>:
 8005cd4:	4770      	bx	lr

08005cd6 <__retarget_lock_release_recursive>:
 8005cd6:	4770      	bx	lr

08005cd8 <sbrk_aligned>:
 8005cd8:	b570      	push	{r4, r5, r6, lr}
 8005cda:	4e0e      	ldr	r6, [pc, #56]	; (8005d14 <sbrk_aligned+0x3c>)
 8005cdc:	460c      	mov	r4, r1
 8005cde:	6831      	ldr	r1, [r6, #0]
 8005ce0:	4605      	mov	r5, r0
 8005ce2:	b911      	cbnz	r1, 8005cea <sbrk_aligned+0x12>
 8005ce4:	f000 fb7a 	bl	80063dc <_sbrk_r>
 8005ce8:	6030      	str	r0, [r6, #0]
 8005cea:	4621      	mov	r1, r4
 8005cec:	4628      	mov	r0, r5
 8005cee:	f000 fb75 	bl	80063dc <_sbrk_r>
 8005cf2:	1c43      	adds	r3, r0, #1
 8005cf4:	d00a      	beq.n	8005d0c <sbrk_aligned+0x34>
 8005cf6:	1cc4      	adds	r4, r0, #3
 8005cf8:	f024 0403 	bic.w	r4, r4, #3
 8005cfc:	42a0      	cmp	r0, r4
 8005cfe:	d007      	beq.n	8005d10 <sbrk_aligned+0x38>
 8005d00:	1a21      	subs	r1, r4, r0
 8005d02:	4628      	mov	r0, r5
 8005d04:	f000 fb6a 	bl	80063dc <_sbrk_r>
 8005d08:	3001      	adds	r0, #1
 8005d0a:	d101      	bne.n	8005d10 <sbrk_aligned+0x38>
 8005d0c:	f04f 34ff 	mov.w	r4, #4294967295
 8005d10:	4620      	mov	r0, r4
 8005d12:	bd70      	pop	{r4, r5, r6, pc}
 8005d14:	200009e8 	.word	0x200009e8

08005d18 <_malloc_r>:
 8005d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d1c:	1ccd      	adds	r5, r1, #3
 8005d1e:	f025 0503 	bic.w	r5, r5, #3
 8005d22:	3508      	adds	r5, #8
 8005d24:	2d0c      	cmp	r5, #12
 8005d26:	bf38      	it	cc
 8005d28:	250c      	movcc	r5, #12
 8005d2a:	2d00      	cmp	r5, #0
 8005d2c:	4607      	mov	r7, r0
 8005d2e:	db01      	blt.n	8005d34 <_malloc_r+0x1c>
 8005d30:	42a9      	cmp	r1, r5
 8005d32:	d905      	bls.n	8005d40 <_malloc_r+0x28>
 8005d34:	230c      	movs	r3, #12
 8005d36:	603b      	str	r3, [r7, #0]
 8005d38:	2600      	movs	r6, #0
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d40:	4e2e      	ldr	r6, [pc, #184]	; (8005dfc <_malloc_r+0xe4>)
 8005d42:	f000 fdbb 	bl	80068bc <__malloc_lock>
 8005d46:	6833      	ldr	r3, [r6, #0]
 8005d48:	461c      	mov	r4, r3
 8005d4a:	bb34      	cbnz	r4, 8005d9a <_malloc_r+0x82>
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	4638      	mov	r0, r7
 8005d50:	f7ff ffc2 	bl	8005cd8 <sbrk_aligned>
 8005d54:	1c43      	adds	r3, r0, #1
 8005d56:	4604      	mov	r4, r0
 8005d58:	d14d      	bne.n	8005df6 <_malloc_r+0xde>
 8005d5a:	6834      	ldr	r4, [r6, #0]
 8005d5c:	4626      	mov	r6, r4
 8005d5e:	2e00      	cmp	r6, #0
 8005d60:	d140      	bne.n	8005de4 <_malloc_r+0xcc>
 8005d62:	6823      	ldr	r3, [r4, #0]
 8005d64:	4631      	mov	r1, r6
 8005d66:	4638      	mov	r0, r7
 8005d68:	eb04 0803 	add.w	r8, r4, r3
 8005d6c:	f000 fb36 	bl	80063dc <_sbrk_r>
 8005d70:	4580      	cmp	r8, r0
 8005d72:	d13a      	bne.n	8005dea <_malloc_r+0xd2>
 8005d74:	6821      	ldr	r1, [r4, #0]
 8005d76:	3503      	adds	r5, #3
 8005d78:	1a6d      	subs	r5, r5, r1
 8005d7a:	f025 0503 	bic.w	r5, r5, #3
 8005d7e:	3508      	adds	r5, #8
 8005d80:	2d0c      	cmp	r5, #12
 8005d82:	bf38      	it	cc
 8005d84:	250c      	movcc	r5, #12
 8005d86:	4629      	mov	r1, r5
 8005d88:	4638      	mov	r0, r7
 8005d8a:	f7ff ffa5 	bl	8005cd8 <sbrk_aligned>
 8005d8e:	3001      	adds	r0, #1
 8005d90:	d02b      	beq.n	8005dea <_malloc_r+0xd2>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	442b      	add	r3, r5
 8005d96:	6023      	str	r3, [r4, #0]
 8005d98:	e00e      	b.n	8005db8 <_malloc_r+0xa0>
 8005d9a:	6822      	ldr	r2, [r4, #0]
 8005d9c:	1b52      	subs	r2, r2, r5
 8005d9e:	d41e      	bmi.n	8005dde <_malloc_r+0xc6>
 8005da0:	2a0b      	cmp	r2, #11
 8005da2:	d916      	bls.n	8005dd2 <_malloc_r+0xba>
 8005da4:	1961      	adds	r1, r4, r5
 8005da6:	42a3      	cmp	r3, r4
 8005da8:	6025      	str	r5, [r4, #0]
 8005daa:	bf18      	it	ne
 8005dac:	6059      	strne	r1, [r3, #4]
 8005dae:	6863      	ldr	r3, [r4, #4]
 8005db0:	bf08      	it	eq
 8005db2:	6031      	streq	r1, [r6, #0]
 8005db4:	5162      	str	r2, [r4, r5]
 8005db6:	604b      	str	r3, [r1, #4]
 8005db8:	4638      	mov	r0, r7
 8005dba:	f104 060b 	add.w	r6, r4, #11
 8005dbe:	f000 fd83 	bl	80068c8 <__malloc_unlock>
 8005dc2:	f026 0607 	bic.w	r6, r6, #7
 8005dc6:	1d23      	adds	r3, r4, #4
 8005dc8:	1af2      	subs	r2, r6, r3
 8005dca:	d0b6      	beq.n	8005d3a <_malloc_r+0x22>
 8005dcc:	1b9b      	subs	r3, r3, r6
 8005dce:	50a3      	str	r3, [r4, r2]
 8005dd0:	e7b3      	b.n	8005d3a <_malloc_r+0x22>
 8005dd2:	6862      	ldr	r2, [r4, #4]
 8005dd4:	42a3      	cmp	r3, r4
 8005dd6:	bf0c      	ite	eq
 8005dd8:	6032      	streq	r2, [r6, #0]
 8005dda:	605a      	strne	r2, [r3, #4]
 8005ddc:	e7ec      	b.n	8005db8 <_malloc_r+0xa0>
 8005dde:	4623      	mov	r3, r4
 8005de0:	6864      	ldr	r4, [r4, #4]
 8005de2:	e7b2      	b.n	8005d4a <_malloc_r+0x32>
 8005de4:	4634      	mov	r4, r6
 8005de6:	6876      	ldr	r6, [r6, #4]
 8005de8:	e7b9      	b.n	8005d5e <_malloc_r+0x46>
 8005dea:	230c      	movs	r3, #12
 8005dec:	603b      	str	r3, [r7, #0]
 8005dee:	4638      	mov	r0, r7
 8005df0:	f000 fd6a 	bl	80068c8 <__malloc_unlock>
 8005df4:	e7a1      	b.n	8005d3a <_malloc_r+0x22>
 8005df6:	6025      	str	r5, [r4, #0]
 8005df8:	e7de      	b.n	8005db8 <_malloc_r+0xa0>
 8005dfa:	bf00      	nop
 8005dfc:	200009e4 	.word	0x200009e4

08005e00 <__sfputc_r>:
 8005e00:	6893      	ldr	r3, [r2, #8]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	b410      	push	{r4}
 8005e08:	6093      	str	r3, [r2, #8]
 8005e0a:	da08      	bge.n	8005e1e <__sfputc_r+0x1e>
 8005e0c:	6994      	ldr	r4, [r2, #24]
 8005e0e:	42a3      	cmp	r3, r4
 8005e10:	db01      	blt.n	8005e16 <__sfputc_r+0x16>
 8005e12:	290a      	cmp	r1, #10
 8005e14:	d103      	bne.n	8005e1e <__sfputc_r+0x1e>
 8005e16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e1a:	f000 bb33 	b.w	8006484 <__swbuf_r>
 8005e1e:	6813      	ldr	r3, [r2, #0]
 8005e20:	1c58      	adds	r0, r3, #1
 8005e22:	6010      	str	r0, [r2, #0]
 8005e24:	7019      	strb	r1, [r3, #0]
 8005e26:	4608      	mov	r0, r1
 8005e28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <__sfputs_r>:
 8005e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e30:	4606      	mov	r6, r0
 8005e32:	460f      	mov	r7, r1
 8005e34:	4614      	mov	r4, r2
 8005e36:	18d5      	adds	r5, r2, r3
 8005e38:	42ac      	cmp	r4, r5
 8005e3a:	d101      	bne.n	8005e40 <__sfputs_r+0x12>
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	e007      	b.n	8005e50 <__sfputs_r+0x22>
 8005e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e44:	463a      	mov	r2, r7
 8005e46:	4630      	mov	r0, r6
 8005e48:	f7ff ffda 	bl	8005e00 <__sfputc_r>
 8005e4c:	1c43      	adds	r3, r0, #1
 8005e4e:	d1f3      	bne.n	8005e38 <__sfputs_r+0xa>
 8005e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e54 <_vfiprintf_r>:
 8005e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e58:	460d      	mov	r5, r1
 8005e5a:	b09d      	sub	sp, #116	; 0x74
 8005e5c:	4614      	mov	r4, r2
 8005e5e:	4698      	mov	r8, r3
 8005e60:	4606      	mov	r6, r0
 8005e62:	b118      	cbz	r0, 8005e6c <_vfiprintf_r+0x18>
 8005e64:	6983      	ldr	r3, [r0, #24]
 8005e66:	b90b      	cbnz	r3, 8005e6c <_vfiprintf_r+0x18>
 8005e68:	f7ff fe96 	bl	8005b98 <__sinit>
 8005e6c:	4b89      	ldr	r3, [pc, #548]	; (8006094 <_vfiprintf_r+0x240>)
 8005e6e:	429d      	cmp	r5, r3
 8005e70:	d11b      	bne.n	8005eaa <_vfiprintf_r+0x56>
 8005e72:	6875      	ldr	r5, [r6, #4]
 8005e74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e76:	07d9      	lsls	r1, r3, #31
 8005e78:	d405      	bmi.n	8005e86 <_vfiprintf_r+0x32>
 8005e7a:	89ab      	ldrh	r3, [r5, #12]
 8005e7c:	059a      	lsls	r2, r3, #22
 8005e7e:	d402      	bmi.n	8005e86 <_vfiprintf_r+0x32>
 8005e80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e82:	f7ff ff27 	bl	8005cd4 <__retarget_lock_acquire_recursive>
 8005e86:	89ab      	ldrh	r3, [r5, #12]
 8005e88:	071b      	lsls	r3, r3, #28
 8005e8a:	d501      	bpl.n	8005e90 <_vfiprintf_r+0x3c>
 8005e8c:	692b      	ldr	r3, [r5, #16]
 8005e8e:	b9eb      	cbnz	r3, 8005ecc <_vfiprintf_r+0x78>
 8005e90:	4629      	mov	r1, r5
 8005e92:	4630      	mov	r0, r6
 8005e94:	f000 fb5a 	bl	800654c <__swsetup_r>
 8005e98:	b1c0      	cbz	r0, 8005ecc <_vfiprintf_r+0x78>
 8005e9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e9c:	07dc      	lsls	r4, r3, #31
 8005e9e:	d50e      	bpl.n	8005ebe <_vfiprintf_r+0x6a>
 8005ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea4:	b01d      	add	sp, #116	; 0x74
 8005ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eaa:	4b7b      	ldr	r3, [pc, #492]	; (8006098 <_vfiprintf_r+0x244>)
 8005eac:	429d      	cmp	r5, r3
 8005eae:	d101      	bne.n	8005eb4 <_vfiprintf_r+0x60>
 8005eb0:	68b5      	ldr	r5, [r6, #8]
 8005eb2:	e7df      	b.n	8005e74 <_vfiprintf_r+0x20>
 8005eb4:	4b79      	ldr	r3, [pc, #484]	; (800609c <_vfiprintf_r+0x248>)
 8005eb6:	429d      	cmp	r5, r3
 8005eb8:	bf08      	it	eq
 8005eba:	68f5      	ldreq	r5, [r6, #12]
 8005ebc:	e7da      	b.n	8005e74 <_vfiprintf_r+0x20>
 8005ebe:	89ab      	ldrh	r3, [r5, #12]
 8005ec0:	0598      	lsls	r0, r3, #22
 8005ec2:	d4ed      	bmi.n	8005ea0 <_vfiprintf_r+0x4c>
 8005ec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ec6:	f7ff ff06 	bl	8005cd6 <__retarget_lock_release_recursive>
 8005eca:	e7e9      	b.n	8005ea0 <_vfiprintf_r+0x4c>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	9309      	str	r3, [sp, #36]	; 0x24
 8005ed0:	2320      	movs	r3, #32
 8005ed2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ed6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005eda:	2330      	movs	r3, #48	; 0x30
 8005edc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80060a0 <_vfiprintf_r+0x24c>
 8005ee0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ee4:	f04f 0901 	mov.w	r9, #1
 8005ee8:	4623      	mov	r3, r4
 8005eea:	469a      	mov	sl, r3
 8005eec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ef0:	b10a      	cbz	r2, 8005ef6 <_vfiprintf_r+0xa2>
 8005ef2:	2a25      	cmp	r2, #37	; 0x25
 8005ef4:	d1f9      	bne.n	8005eea <_vfiprintf_r+0x96>
 8005ef6:	ebba 0b04 	subs.w	fp, sl, r4
 8005efa:	d00b      	beq.n	8005f14 <_vfiprintf_r+0xc0>
 8005efc:	465b      	mov	r3, fp
 8005efe:	4622      	mov	r2, r4
 8005f00:	4629      	mov	r1, r5
 8005f02:	4630      	mov	r0, r6
 8005f04:	f7ff ff93 	bl	8005e2e <__sfputs_r>
 8005f08:	3001      	adds	r0, #1
 8005f0a:	f000 80aa 	beq.w	8006062 <_vfiprintf_r+0x20e>
 8005f0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f10:	445a      	add	r2, fp
 8005f12:	9209      	str	r2, [sp, #36]	; 0x24
 8005f14:	f89a 3000 	ldrb.w	r3, [sl]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 80a2 	beq.w	8006062 <_vfiprintf_r+0x20e>
 8005f1e:	2300      	movs	r3, #0
 8005f20:	f04f 32ff 	mov.w	r2, #4294967295
 8005f24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f28:	f10a 0a01 	add.w	sl, sl, #1
 8005f2c:	9304      	str	r3, [sp, #16]
 8005f2e:	9307      	str	r3, [sp, #28]
 8005f30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f34:	931a      	str	r3, [sp, #104]	; 0x68
 8005f36:	4654      	mov	r4, sl
 8005f38:	2205      	movs	r2, #5
 8005f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f3e:	4858      	ldr	r0, [pc, #352]	; (80060a0 <_vfiprintf_r+0x24c>)
 8005f40:	f7fa f96e 	bl	8000220 <memchr>
 8005f44:	9a04      	ldr	r2, [sp, #16]
 8005f46:	b9d8      	cbnz	r0, 8005f80 <_vfiprintf_r+0x12c>
 8005f48:	06d1      	lsls	r1, r2, #27
 8005f4a:	bf44      	itt	mi
 8005f4c:	2320      	movmi	r3, #32
 8005f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f52:	0713      	lsls	r3, r2, #28
 8005f54:	bf44      	itt	mi
 8005f56:	232b      	movmi	r3, #43	; 0x2b
 8005f58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f5c:	f89a 3000 	ldrb.w	r3, [sl]
 8005f60:	2b2a      	cmp	r3, #42	; 0x2a
 8005f62:	d015      	beq.n	8005f90 <_vfiprintf_r+0x13c>
 8005f64:	9a07      	ldr	r2, [sp, #28]
 8005f66:	4654      	mov	r4, sl
 8005f68:	2000      	movs	r0, #0
 8005f6a:	f04f 0c0a 	mov.w	ip, #10
 8005f6e:	4621      	mov	r1, r4
 8005f70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f74:	3b30      	subs	r3, #48	; 0x30
 8005f76:	2b09      	cmp	r3, #9
 8005f78:	d94e      	bls.n	8006018 <_vfiprintf_r+0x1c4>
 8005f7a:	b1b0      	cbz	r0, 8005faa <_vfiprintf_r+0x156>
 8005f7c:	9207      	str	r2, [sp, #28]
 8005f7e:	e014      	b.n	8005faa <_vfiprintf_r+0x156>
 8005f80:	eba0 0308 	sub.w	r3, r0, r8
 8005f84:	fa09 f303 	lsl.w	r3, r9, r3
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	9304      	str	r3, [sp, #16]
 8005f8c:	46a2      	mov	sl, r4
 8005f8e:	e7d2      	b.n	8005f36 <_vfiprintf_r+0xe2>
 8005f90:	9b03      	ldr	r3, [sp, #12]
 8005f92:	1d19      	adds	r1, r3, #4
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	9103      	str	r1, [sp, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	bfbb      	ittet	lt
 8005f9c:	425b      	neglt	r3, r3
 8005f9e:	f042 0202 	orrlt.w	r2, r2, #2
 8005fa2:	9307      	strge	r3, [sp, #28]
 8005fa4:	9307      	strlt	r3, [sp, #28]
 8005fa6:	bfb8      	it	lt
 8005fa8:	9204      	strlt	r2, [sp, #16]
 8005faa:	7823      	ldrb	r3, [r4, #0]
 8005fac:	2b2e      	cmp	r3, #46	; 0x2e
 8005fae:	d10c      	bne.n	8005fca <_vfiprintf_r+0x176>
 8005fb0:	7863      	ldrb	r3, [r4, #1]
 8005fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8005fb4:	d135      	bne.n	8006022 <_vfiprintf_r+0x1ce>
 8005fb6:	9b03      	ldr	r3, [sp, #12]
 8005fb8:	1d1a      	adds	r2, r3, #4
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	9203      	str	r2, [sp, #12]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	bfb8      	it	lt
 8005fc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fc6:	3402      	adds	r4, #2
 8005fc8:	9305      	str	r3, [sp, #20]
 8005fca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80060b0 <_vfiprintf_r+0x25c>
 8005fce:	7821      	ldrb	r1, [r4, #0]
 8005fd0:	2203      	movs	r2, #3
 8005fd2:	4650      	mov	r0, sl
 8005fd4:	f7fa f924 	bl	8000220 <memchr>
 8005fd8:	b140      	cbz	r0, 8005fec <_vfiprintf_r+0x198>
 8005fda:	2340      	movs	r3, #64	; 0x40
 8005fdc:	eba0 000a 	sub.w	r0, r0, sl
 8005fe0:	fa03 f000 	lsl.w	r0, r3, r0
 8005fe4:	9b04      	ldr	r3, [sp, #16]
 8005fe6:	4303      	orrs	r3, r0
 8005fe8:	3401      	adds	r4, #1
 8005fea:	9304      	str	r3, [sp, #16]
 8005fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ff0:	482c      	ldr	r0, [pc, #176]	; (80060a4 <_vfiprintf_r+0x250>)
 8005ff2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ff6:	2206      	movs	r2, #6
 8005ff8:	f7fa f912 	bl	8000220 <memchr>
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	d03f      	beq.n	8006080 <_vfiprintf_r+0x22c>
 8006000:	4b29      	ldr	r3, [pc, #164]	; (80060a8 <_vfiprintf_r+0x254>)
 8006002:	bb1b      	cbnz	r3, 800604c <_vfiprintf_r+0x1f8>
 8006004:	9b03      	ldr	r3, [sp, #12]
 8006006:	3307      	adds	r3, #7
 8006008:	f023 0307 	bic.w	r3, r3, #7
 800600c:	3308      	adds	r3, #8
 800600e:	9303      	str	r3, [sp, #12]
 8006010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006012:	443b      	add	r3, r7
 8006014:	9309      	str	r3, [sp, #36]	; 0x24
 8006016:	e767      	b.n	8005ee8 <_vfiprintf_r+0x94>
 8006018:	fb0c 3202 	mla	r2, ip, r2, r3
 800601c:	460c      	mov	r4, r1
 800601e:	2001      	movs	r0, #1
 8006020:	e7a5      	b.n	8005f6e <_vfiprintf_r+0x11a>
 8006022:	2300      	movs	r3, #0
 8006024:	3401      	adds	r4, #1
 8006026:	9305      	str	r3, [sp, #20]
 8006028:	4619      	mov	r1, r3
 800602a:	f04f 0c0a 	mov.w	ip, #10
 800602e:	4620      	mov	r0, r4
 8006030:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006034:	3a30      	subs	r2, #48	; 0x30
 8006036:	2a09      	cmp	r2, #9
 8006038:	d903      	bls.n	8006042 <_vfiprintf_r+0x1ee>
 800603a:	2b00      	cmp	r3, #0
 800603c:	d0c5      	beq.n	8005fca <_vfiprintf_r+0x176>
 800603e:	9105      	str	r1, [sp, #20]
 8006040:	e7c3      	b.n	8005fca <_vfiprintf_r+0x176>
 8006042:	fb0c 2101 	mla	r1, ip, r1, r2
 8006046:	4604      	mov	r4, r0
 8006048:	2301      	movs	r3, #1
 800604a:	e7f0      	b.n	800602e <_vfiprintf_r+0x1da>
 800604c:	ab03      	add	r3, sp, #12
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	462a      	mov	r2, r5
 8006052:	4b16      	ldr	r3, [pc, #88]	; (80060ac <_vfiprintf_r+0x258>)
 8006054:	a904      	add	r1, sp, #16
 8006056:	4630      	mov	r0, r6
 8006058:	f3af 8000 	nop.w
 800605c:	4607      	mov	r7, r0
 800605e:	1c78      	adds	r0, r7, #1
 8006060:	d1d6      	bne.n	8006010 <_vfiprintf_r+0x1bc>
 8006062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006064:	07d9      	lsls	r1, r3, #31
 8006066:	d405      	bmi.n	8006074 <_vfiprintf_r+0x220>
 8006068:	89ab      	ldrh	r3, [r5, #12]
 800606a:	059a      	lsls	r2, r3, #22
 800606c:	d402      	bmi.n	8006074 <_vfiprintf_r+0x220>
 800606e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006070:	f7ff fe31 	bl	8005cd6 <__retarget_lock_release_recursive>
 8006074:	89ab      	ldrh	r3, [r5, #12]
 8006076:	065b      	lsls	r3, r3, #25
 8006078:	f53f af12 	bmi.w	8005ea0 <_vfiprintf_r+0x4c>
 800607c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800607e:	e711      	b.n	8005ea4 <_vfiprintf_r+0x50>
 8006080:	ab03      	add	r3, sp, #12
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	462a      	mov	r2, r5
 8006086:	4b09      	ldr	r3, [pc, #36]	; (80060ac <_vfiprintf_r+0x258>)
 8006088:	a904      	add	r1, sp, #16
 800608a:	4630      	mov	r0, r6
 800608c:	f000 f880 	bl	8006190 <_printf_i>
 8006090:	e7e4      	b.n	800605c <_vfiprintf_r+0x208>
 8006092:	bf00      	nop
 8006094:	08006a5c 	.word	0x08006a5c
 8006098:	08006a7c 	.word	0x08006a7c
 800609c:	08006a3c 	.word	0x08006a3c
 80060a0:	08006a9c 	.word	0x08006a9c
 80060a4:	08006aa6 	.word	0x08006aa6
 80060a8:	00000000 	.word	0x00000000
 80060ac:	08005e2f 	.word	0x08005e2f
 80060b0:	08006aa2 	.word	0x08006aa2

080060b4 <_printf_common>:
 80060b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060b8:	4616      	mov	r6, r2
 80060ba:	4699      	mov	r9, r3
 80060bc:	688a      	ldr	r2, [r1, #8]
 80060be:	690b      	ldr	r3, [r1, #16]
 80060c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060c4:	4293      	cmp	r3, r2
 80060c6:	bfb8      	it	lt
 80060c8:	4613      	movlt	r3, r2
 80060ca:	6033      	str	r3, [r6, #0]
 80060cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060d0:	4607      	mov	r7, r0
 80060d2:	460c      	mov	r4, r1
 80060d4:	b10a      	cbz	r2, 80060da <_printf_common+0x26>
 80060d6:	3301      	adds	r3, #1
 80060d8:	6033      	str	r3, [r6, #0]
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	0699      	lsls	r1, r3, #26
 80060de:	bf42      	ittt	mi
 80060e0:	6833      	ldrmi	r3, [r6, #0]
 80060e2:	3302      	addmi	r3, #2
 80060e4:	6033      	strmi	r3, [r6, #0]
 80060e6:	6825      	ldr	r5, [r4, #0]
 80060e8:	f015 0506 	ands.w	r5, r5, #6
 80060ec:	d106      	bne.n	80060fc <_printf_common+0x48>
 80060ee:	f104 0a19 	add.w	sl, r4, #25
 80060f2:	68e3      	ldr	r3, [r4, #12]
 80060f4:	6832      	ldr	r2, [r6, #0]
 80060f6:	1a9b      	subs	r3, r3, r2
 80060f8:	42ab      	cmp	r3, r5
 80060fa:	dc26      	bgt.n	800614a <_printf_common+0x96>
 80060fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006100:	1e13      	subs	r3, r2, #0
 8006102:	6822      	ldr	r2, [r4, #0]
 8006104:	bf18      	it	ne
 8006106:	2301      	movne	r3, #1
 8006108:	0692      	lsls	r2, r2, #26
 800610a:	d42b      	bmi.n	8006164 <_printf_common+0xb0>
 800610c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006110:	4649      	mov	r1, r9
 8006112:	4638      	mov	r0, r7
 8006114:	47c0      	blx	r8
 8006116:	3001      	adds	r0, #1
 8006118:	d01e      	beq.n	8006158 <_printf_common+0xa4>
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	68e5      	ldr	r5, [r4, #12]
 800611e:	6832      	ldr	r2, [r6, #0]
 8006120:	f003 0306 	and.w	r3, r3, #6
 8006124:	2b04      	cmp	r3, #4
 8006126:	bf08      	it	eq
 8006128:	1aad      	subeq	r5, r5, r2
 800612a:	68a3      	ldr	r3, [r4, #8]
 800612c:	6922      	ldr	r2, [r4, #16]
 800612e:	bf0c      	ite	eq
 8006130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006134:	2500      	movne	r5, #0
 8006136:	4293      	cmp	r3, r2
 8006138:	bfc4      	itt	gt
 800613a:	1a9b      	subgt	r3, r3, r2
 800613c:	18ed      	addgt	r5, r5, r3
 800613e:	2600      	movs	r6, #0
 8006140:	341a      	adds	r4, #26
 8006142:	42b5      	cmp	r5, r6
 8006144:	d11a      	bne.n	800617c <_printf_common+0xc8>
 8006146:	2000      	movs	r0, #0
 8006148:	e008      	b.n	800615c <_printf_common+0xa8>
 800614a:	2301      	movs	r3, #1
 800614c:	4652      	mov	r2, sl
 800614e:	4649      	mov	r1, r9
 8006150:	4638      	mov	r0, r7
 8006152:	47c0      	blx	r8
 8006154:	3001      	adds	r0, #1
 8006156:	d103      	bne.n	8006160 <_printf_common+0xac>
 8006158:	f04f 30ff 	mov.w	r0, #4294967295
 800615c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006160:	3501      	adds	r5, #1
 8006162:	e7c6      	b.n	80060f2 <_printf_common+0x3e>
 8006164:	18e1      	adds	r1, r4, r3
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	2030      	movs	r0, #48	; 0x30
 800616a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800616e:	4422      	add	r2, r4
 8006170:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006174:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006178:	3302      	adds	r3, #2
 800617a:	e7c7      	b.n	800610c <_printf_common+0x58>
 800617c:	2301      	movs	r3, #1
 800617e:	4622      	mov	r2, r4
 8006180:	4649      	mov	r1, r9
 8006182:	4638      	mov	r0, r7
 8006184:	47c0      	blx	r8
 8006186:	3001      	adds	r0, #1
 8006188:	d0e6      	beq.n	8006158 <_printf_common+0xa4>
 800618a:	3601      	adds	r6, #1
 800618c:	e7d9      	b.n	8006142 <_printf_common+0x8e>
	...

08006190 <_printf_i>:
 8006190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006194:	7e0f      	ldrb	r7, [r1, #24]
 8006196:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006198:	2f78      	cmp	r7, #120	; 0x78
 800619a:	4691      	mov	r9, r2
 800619c:	4680      	mov	r8, r0
 800619e:	460c      	mov	r4, r1
 80061a0:	469a      	mov	sl, r3
 80061a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061a6:	d807      	bhi.n	80061b8 <_printf_i+0x28>
 80061a8:	2f62      	cmp	r7, #98	; 0x62
 80061aa:	d80a      	bhi.n	80061c2 <_printf_i+0x32>
 80061ac:	2f00      	cmp	r7, #0
 80061ae:	f000 80d8 	beq.w	8006362 <_printf_i+0x1d2>
 80061b2:	2f58      	cmp	r7, #88	; 0x58
 80061b4:	f000 80a3 	beq.w	80062fe <_printf_i+0x16e>
 80061b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061c0:	e03a      	b.n	8006238 <_printf_i+0xa8>
 80061c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061c6:	2b15      	cmp	r3, #21
 80061c8:	d8f6      	bhi.n	80061b8 <_printf_i+0x28>
 80061ca:	a101      	add	r1, pc, #4	; (adr r1, 80061d0 <_printf_i+0x40>)
 80061cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061d0:	08006229 	.word	0x08006229
 80061d4:	0800623d 	.word	0x0800623d
 80061d8:	080061b9 	.word	0x080061b9
 80061dc:	080061b9 	.word	0x080061b9
 80061e0:	080061b9 	.word	0x080061b9
 80061e4:	080061b9 	.word	0x080061b9
 80061e8:	0800623d 	.word	0x0800623d
 80061ec:	080061b9 	.word	0x080061b9
 80061f0:	080061b9 	.word	0x080061b9
 80061f4:	080061b9 	.word	0x080061b9
 80061f8:	080061b9 	.word	0x080061b9
 80061fc:	08006349 	.word	0x08006349
 8006200:	0800626d 	.word	0x0800626d
 8006204:	0800632b 	.word	0x0800632b
 8006208:	080061b9 	.word	0x080061b9
 800620c:	080061b9 	.word	0x080061b9
 8006210:	0800636b 	.word	0x0800636b
 8006214:	080061b9 	.word	0x080061b9
 8006218:	0800626d 	.word	0x0800626d
 800621c:	080061b9 	.word	0x080061b9
 8006220:	080061b9 	.word	0x080061b9
 8006224:	08006333 	.word	0x08006333
 8006228:	682b      	ldr	r3, [r5, #0]
 800622a:	1d1a      	adds	r2, r3, #4
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	602a      	str	r2, [r5, #0]
 8006230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006238:	2301      	movs	r3, #1
 800623a:	e0a3      	b.n	8006384 <_printf_i+0x1f4>
 800623c:	6820      	ldr	r0, [r4, #0]
 800623e:	6829      	ldr	r1, [r5, #0]
 8006240:	0606      	lsls	r6, r0, #24
 8006242:	f101 0304 	add.w	r3, r1, #4
 8006246:	d50a      	bpl.n	800625e <_printf_i+0xce>
 8006248:	680e      	ldr	r6, [r1, #0]
 800624a:	602b      	str	r3, [r5, #0]
 800624c:	2e00      	cmp	r6, #0
 800624e:	da03      	bge.n	8006258 <_printf_i+0xc8>
 8006250:	232d      	movs	r3, #45	; 0x2d
 8006252:	4276      	negs	r6, r6
 8006254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006258:	485e      	ldr	r0, [pc, #376]	; (80063d4 <_printf_i+0x244>)
 800625a:	230a      	movs	r3, #10
 800625c:	e019      	b.n	8006292 <_printf_i+0x102>
 800625e:	680e      	ldr	r6, [r1, #0]
 8006260:	602b      	str	r3, [r5, #0]
 8006262:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006266:	bf18      	it	ne
 8006268:	b236      	sxthne	r6, r6
 800626a:	e7ef      	b.n	800624c <_printf_i+0xbc>
 800626c:	682b      	ldr	r3, [r5, #0]
 800626e:	6820      	ldr	r0, [r4, #0]
 8006270:	1d19      	adds	r1, r3, #4
 8006272:	6029      	str	r1, [r5, #0]
 8006274:	0601      	lsls	r1, r0, #24
 8006276:	d501      	bpl.n	800627c <_printf_i+0xec>
 8006278:	681e      	ldr	r6, [r3, #0]
 800627a:	e002      	b.n	8006282 <_printf_i+0xf2>
 800627c:	0646      	lsls	r6, r0, #25
 800627e:	d5fb      	bpl.n	8006278 <_printf_i+0xe8>
 8006280:	881e      	ldrh	r6, [r3, #0]
 8006282:	4854      	ldr	r0, [pc, #336]	; (80063d4 <_printf_i+0x244>)
 8006284:	2f6f      	cmp	r7, #111	; 0x6f
 8006286:	bf0c      	ite	eq
 8006288:	2308      	moveq	r3, #8
 800628a:	230a      	movne	r3, #10
 800628c:	2100      	movs	r1, #0
 800628e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006292:	6865      	ldr	r5, [r4, #4]
 8006294:	60a5      	str	r5, [r4, #8]
 8006296:	2d00      	cmp	r5, #0
 8006298:	bfa2      	ittt	ge
 800629a:	6821      	ldrge	r1, [r4, #0]
 800629c:	f021 0104 	bicge.w	r1, r1, #4
 80062a0:	6021      	strge	r1, [r4, #0]
 80062a2:	b90e      	cbnz	r6, 80062a8 <_printf_i+0x118>
 80062a4:	2d00      	cmp	r5, #0
 80062a6:	d04d      	beq.n	8006344 <_printf_i+0x1b4>
 80062a8:	4615      	mov	r5, r2
 80062aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80062ae:	fb03 6711 	mls	r7, r3, r1, r6
 80062b2:	5dc7      	ldrb	r7, [r0, r7]
 80062b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062b8:	4637      	mov	r7, r6
 80062ba:	42bb      	cmp	r3, r7
 80062bc:	460e      	mov	r6, r1
 80062be:	d9f4      	bls.n	80062aa <_printf_i+0x11a>
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	d10b      	bne.n	80062dc <_printf_i+0x14c>
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	07de      	lsls	r6, r3, #31
 80062c8:	d508      	bpl.n	80062dc <_printf_i+0x14c>
 80062ca:	6923      	ldr	r3, [r4, #16]
 80062cc:	6861      	ldr	r1, [r4, #4]
 80062ce:	4299      	cmp	r1, r3
 80062d0:	bfde      	ittt	le
 80062d2:	2330      	movle	r3, #48	; 0x30
 80062d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062dc:	1b52      	subs	r2, r2, r5
 80062de:	6122      	str	r2, [r4, #16]
 80062e0:	f8cd a000 	str.w	sl, [sp]
 80062e4:	464b      	mov	r3, r9
 80062e6:	aa03      	add	r2, sp, #12
 80062e8:	4621      	mov	r1, r4
 80062ea:	4640      	mov	r0, r8
 80062ec:	f7ff fee2 	bl	80060b4 <_printf_common>
 80062f0:	3001      	adds	r0, #1
 80062f2:	d14c      	bne.n	800638e <_printf_i+0x1fe>
 80062f4:	f04f 30ff 	mov.w	r0, #4294967295
 80062f8:	b004      	add	sp, #16
 80062fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fe:	4835      	ldr	r0, [pc, #212]	; (80063d4 <_printf_i+0x244>)
 8006300:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006304:	6829      	ldr	r1, [r5, #0]
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	f851 6b04 	ldr.w	r6, [r1], #4
 800630c:	6029      	str	r1, [r5, #0]
 800630e:	061d      	lsls	r5, r3, #24
 8006310:	d514      	bpl.n	800633c <_printf_i+0x1ac>
 8006312:	07df      	lsls	r7, r3, #31
 8006314:	bf44      	itt	mi
 8006316:	f043 0320 	orrmi.w	r3, r3, #32
 800631a:	6023      	strmi	r3, [r4, #0]
 800631c:	b91e      	cbnz	r6, 8006326 <_printf_i+0x196>
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	f023 0320 	bic.w	r3, r3, #32
 8006324:	6023      	str	r3, [r4, #0]
 8006326:	2310      	movs	r3, #16
 8006328:	e7b0      	b.n	800628c <_printf_i+0xfc>
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	f043 0320 	orr.w	r3, r3, #32
 8006330:	6023      	str	r3, [r4, #0]
 8006332:	2378      	movs	r3, #120	; 0x78
 8006334:	4828      	ldr	r0, [pc, #160]	; (80063d8 <_printf_i+0x248>)
 8006336:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800633a:	e7e3      	b.n	8006304 <_printf_i+0x174>
 800633c:	0659      	lsls	r1, r3, #25
 800633e:	bf48      	it	mi
 8006340:	b2b6      	uxthmi	r6, r6
 8006342:	e7e6      	b.n	8006312 <_printf_i+0x182>
 8006344:	4615      	mov	r5, r2
 8006346:	e7bb      	b.n	80062c0 <_printf_i+0x130>
 8006348:	682b      	ldr	r3, [r5, #0]
 800634a:	6826      	ldr	r6, [r4, #0]
 800634c:	6961      	ldr	r1, [r4, #20]
 800634e:	1d18      	adds	r0, r3, #4
 8006350:	6028      	str	r0, [r5, #0]
 8006352:	0635      	lsls	r5, r6, #24
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	d501      	bpl.n	800635c <_printf_i+0x1cc>
 8006358:	6019      	str	r1, [r3, #0]
 800635a:	e002      	b.n	8006362 <_printf_i+0x1d2>
 800635c:	0670      	lsls	r0, r6, #25
 800635e:	d5fb      	bpl.n	8006358 <_printf_i+0x1c8>
 8006360:	8019      	strh	r1, [r3, #0]
 8006362:	2300      	movs	r3, #0
 8006364:	6123      	str	r3, [r4, #16]
 8006366:	4615      	mov	r5, r2
 8006368:	e7ba      	b.n	80062e0 <_printf_i+0x150>
 800636a:	682b      	ldr	r3, [r5, #0]
 800636c:	1d1a      	adds	r2, r3, #4
 800636e:	602a      	str	r2, [r5, #0]
 8006370:	681d      	ldr	r5, [r3, #0]
 8006372:	6862      	ldr	r2, [r4, #4]
 8006374:	2100      	movs	r1, #0
 8006376:	4628      	mov	r0, r5
 8006378:	f7f9 ff52 	bl	8000220 <memchr>
 800637c:	b108      	cbz	r0, 8006382 <_printf_i+0x1f2>
 800637e:	1b40      	subs	r0, r0, r5
 8006380:	6060      	str	r0, [r4, #4]
 8006382:	6863      	ldr	r3, [r4, #4]
 8006384:	6123      	str	r3, [r4, #16]
 8006386:	2300      	movs	r3, #0
 8006388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800638c:	e7a8      	b.n	80062e0 <_printf_i+0x150>
 800638e:	6923      	ldr	r3, [r4, #16]
 8006390:	462a      	mov	r2, r5
 8006392:	4649      	mov	r1, r9
 8006394:	4640      	mov	r0, r8
 8006396:	47d0      	blx	sl
 8006398:	3001      	adds	r0, #1
 800639a:	d0ab      	beq.n	80062f4 <_printf_i+0x164>
 800639c:	6823      	ldr	r3, [r4, #0]
 800639e:	079b      	lsls	r3, r3, #30
 80063a0:	d413      	bmi.n	80063ca <_printf_i+0x23a>
 80063a2:	68e0      	ldr	r0, [r4, #12]
 80063a4:	9b03      	ldr	r3, [sp, #12]
 80063a6:	4298      	cmp	r0, r3
 80063a8:	bfb8      	it	lt
 80063aa:	4618      	movlt	r0, r3
 80063ac:	e7a4      	b.n	80062f8 <_printf_i+0x168>
 80063ae:	2301      	movs	r3, #1
 80063b0:	4632      	mov	r2, r6
 80063b2:	4649      	mov	r1, r9
 80063b4:	4640      	mov	r0, r8
 80063b6:	47d0      	blx	sl
 80063b8:	3001      	adds	r0, #1
 80063ba:	d09b      	beq.n	80062f4 <_printf_i+0x164>
 80063bc:	3501      	adds	r5, #1
 80063be:	68e3      	ldr	r3, [r4, #12]
 80063c0:	9903      	ldr	r1, [sp, #12]
 80063c2:	1a5b      	subs	r3, r3, r1
 80063c4:	42ab      	cmp	r3, r5
 80063c6:	dcf2      	bgt.n	80063ae <_printf_i+0x21e>
 80063c8:	e7eb      	b.n	80063a2 <_printf_i+0x212>
 80063ca:	2500      	movs	r5, #0
 80063cc:	f104 0619 	add.w	r6, r4, #25
 80063d0:	e7f5      	b.n	80063be <_printf_i+0x22e>
 80063d2:	bf00      	nop
 80063d4:	08006aad 	.word	0x08006aad
 80063d8:	08006abe 	.word	0x08006abe

080063dc <_sbrk_r>:
 80063dc:	b538      	push	{r3, r4, r5, lr}
 80063de:	4d06      	ldr	r5, [pc, #24]	; (80063f8 <_sbrk_r+0x1c>)
 80063e0:	2300      	movs	r3, #0
 80063e2:	4604      	mov	r4, r0
 80063e4:	4608      	mov	r0, r1
 80063e6:	602b      	str	r3, [r5, #0]
 80063e8:	f7fa fe82 	bl	80010f0 <_sbrk>
 80063ec:	1c43      	adds	r3, r0, #1
 80063ee:	d102      	bne.n	80063f6 <_sbrk_r+0x1a>
 80063f0:	682b      	ldr	r3, [r5, #0]
 80063f2:	b103      	cbz	r3, 80063f6 <_sbrk_r+0x1a>
 80063f4:	6023      	str	r3, [r4, #0]
 80063f6:	bd38      	pop	{r3, r4, r5, pc}
 80063f8:	200009ec 	.word	0x200009ec

080063fc <__sread>:
 80063fc:	b510      	push	{r4, lr}
 80063fe:	460c      	mov	r4, r1
 8006400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006404:	f000 fab2 	bl	800696c <_read_r>
 8006408:	2800      	cmp	r0, #0
 800640a:	bfab      	itete	ge
 800640c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800640e:	89a3      	ldrhlt	r3, [r4, #12]
 8006410:	181b      	addge	r3, r3, r0
 8006412:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006416:	bfac      	ite	ge
 8006418:	6563      	strge	r3, [r4, #84]	; 0x54
 800641a:	81a3      	strhlt	r3, [r4, #12]
 800641c:	bd10      	pop	{r4, pc}

0800641e <__swrite>:
 800641e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006422:	461f      	mov	r7, r3
 8006424:	898b      	ldrh	r3, [r1, #12]
 8006426:	05db      	lsls	r3, r3, #23
 8006428:	4605      	mov	r5, r0
 800642a:	460c      	mov	r4, r1
 800642c:	4616      	mov	r6, r2
 800642e:	d505      	bpl.n	800643c <__swrite+0x1e>
 8006430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006434:	2302      	movs	r3, #2
 8006436:	2200      	movs	r2, #0
 8006438:	f000 f9c8 	bl	80067cc <_lseek_r>
 800643c:	89a3      	ldrh	r3, [r4, #12]
 800643e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006442:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006446:	81a3      	strh	r3, [r4, #12]
 8006448:	4632      	mov	r2, r6
 800644a:	463b      	mov	r3, r7
 800644c:	4628      	mov	r0, r5
 800644e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006452:	f000 b869 	b.w	8006528 <_write_r>

08006456 <__sseek>:
 8006456:	b510      	push	{r4, lr}
 8006458:	460c      	mov	r4, r1
 800645a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800645e:	f000 f9b5 	bl	80067cc <_lseek_r>
 8006462:	1c43      	adds	r3, r0, #1
 8006464:	89a3      	ldrh	r3, [r4, #12]
 8006466:	bf15      	itete	ne
 8006468:	6560      	strne	r0, [r4, #84]	; 0x54
 800646a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800646e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006472:	81a3      	strheq	r3, [r4, #12]
 8006474:	bf18      	it	ne
 8006476:	81a3      	strhne	r3, [r4, #12]
 8006478:	bd10      	pop	{r4, pc}

0800647a <__sclose>:
 800647a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800647e:	f000 b8d3 	b.w	8006628 <_close_r>
	...

08006484 <__swbuf_r>:
 8006484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006486:	460e      	mov	r6, r1
 8006488:	4614      	mov	r4, r2
 800648a:	4605      	mov	r5, r0
 800648c:	b118      	cbz	r0, 8006496 <__swbuf_r+0x12>
 800648e:	6983      	ldr	r3, [r0, #24]
 8006490:	b90b      	cbnz	r3, 8006496 <__swbuf_r+0x12>
 8006492:	f7ff fb81 	bl	8005b98 <__sinit>
 8006496:	4b21      	ldr	r3, [pc, #132]	; (800651c <__swbuf_r+0x98>)
 8006498:	429c      	cmp	r4, r3
 800649a:	d12b      	bne.n	80064f4 <__swbuf_r+0x70>
 800649c:	686c      	ldr	r4, [r5, #4]
 800649e:	69a3      	ldr	r3, [r4, #24]
 80064a0:	60a3      	str	r3, [r4, #8]
 80064a2:	89a3      	ldrh	r3, [r4, #12]
 80064a4:	071a      	lsls	r2, r3, #28
 80064a6:	d52f      	bpl.n	8006508 <__swbuf_r+0x84>
 80064a8:	6923      	ldr	r3, [r4, #16]
 80064aa:	b36b      	cbz	r3, 8006508 <__swbuf_r+0x84>
 80064ac:	6923      	ldr	r3, [r4, #16]
 80064ae:	6820      	ldr	r0, [r4, #0]
 80064b0:	1ac0      	subs	r0, r0, r3
 80064b2:	6963      	ldr	r3, [r4, #20]
 80064b4:	b2f6      	uxtb	r6, r6
 80064b6:	4283      	cmp	r3, r0
 80064b8:	4637      	mov	r7, r6
 80064ba:	dc04      	bgt.n	80064c6 <__swbuf_r+0x42>
 80064bc:	4621      	mov	r1, r4
 80064be:	4628      	mov	r0, r5
 80064c0:	f000 f948 	bl	8006754 <_fflush_r>
 80064c4:	bb30      	cbnz	r0, 8006514 <__swbuf_r+0x90>
 80064c6:	68a3      	ldr	r3, [r4, #8]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	60a3      	str	r3, [r4, #8]
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	6022      	str	r2, [r4, #0]
 80064d2:	701e      	strb	r6, [r3, #0]
 80064d4:	6963      	ldr	r3, [r4, #20]
 80064d6:	3001      	adds	r0, #1
 80064d8:	4283      	cmp	r3, r0
 80064da:	d004      	beq.n	80064e6 <__swbuf_r+0x62>
 80064dc:	89a3      	ldrh	r3, [r4, #12]
 80064de:	07db      	lsls	r3, r3, #31
 80064e0:	d506      	bpl.n	80064f0 <__swbuf_r+0x6c>
 80064e2:	2e0a      	cmp	r6, #10
 80064e4:	d104      	bne.n	80064f0 <__swbuf_r+0x6c>
 80064e6:	4621      	mov	r1, r4
 80064e8:	4628      	mov	r0, r5
 80064ea:	f000 f933 	bl	8006754 <_fflush_r>
 80064ee:	b988      	cbnz	r0, 8006514 <__swbuf_r+0x90>
 80064f0:	4638      	mov	r0, r7
 80064f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064f4:	4b0a      	ldr	r3, [pc, #40]	; (8006520 <__swbuf_r+0x9c>)
 80064f6:	429c      	cmp	r4, r3
 80064f8:	d101      	bne.n	80064fe <__swbuf_r+0x7a>
 80064fa:	68ac      	ldr	r4, [r5, #8]
 80064fc:	e7cf      	b.n	800649e <__swbuf_r+0x1a>
 80064fe:	4b09      	ldr	r3, [pc, #36]	; (8006524 <__swbuf_r+0xa0>)
 8006500:	429c      	cmp	r4, r3
 8006502:	bf08      	it	eq
 8006504:	68ec      	ldreq	r4, [r5, #12]
 8006506:	e7ca      	b.n	800649e <__swbuf_r+0x1a>
 8006508:	4621      	mov	r1, r4
 800650a:	4628      	mov	r0, r5
 800650c:	f000 f81e 	bl	800654c <__swsetup_r>
 8006510:	2800      	cmp	r0, #0
 8006512:	d0cb      	beq.n	80064ac <__swbuf_r+0x28>
 8006514:	f04f 37ff 	mov.w	r7, #4294967295
 8006518:	e7ea      	b.n	80064f0 <__swbuf_r+0x6c>
 800651a:	bf00      	nop
 800651c:	08006a5c 	.word	0x08006a5c
 8006520:	08006a7c 	.word	0x08006a7c
 8006524:	08006a3c 	.word	0x08006a3c

08006528 <_write_r>:
 8006528:	b538      	push	{r3, r4, r5, lr}
 800652a:	4d07      	ldr	r5, [pc, #28]	; (8006548 <_write_r+0x20>)
 800652c:	4604      	mov	r4, r0
 800652e:	4608      	mov	r0, r1
 8006530:	4611      	mov	r1, r2
 8006532:	2200      	movs	r2, #0
 8006534:	602a      	str	r2, [r5, #0]
 8006536:	461a      	mov	r2, r3
 8006538:	f7fa fd8a 	bl	8001050 <_write>
 800653c:	1c43      	adds	r3, r0, #1
 800653e:	d102      	bne.n	8006546 <_write_r+0x1e>
 8006540:	682b      	ldr	r3, [r5, #0]
 8006542:	b103      	cbz	r3, 8006546 <_write_r+0x1e>
 8006544:	6023      	str	r3, [r4, #0]
 8006546:	bd38      	pop	{r3, r4, r5, pc}
 8006548:	200009ec 	.word	0x200009ec

0800654c <__swsetup_r>:
 800654c:	4b32      	ldr	r3, [pc, #200]	; (8006618 <__swsetup_r+0xcc>)
 800654e:	b570      	push	{r4, r5, r6, lr}
 8006550:	681d      	ldr	r5, [r3, #0]
 8006552:	4606      	mov	r6, r0
 8006554:	460c      	mov	r4, r1
 8006556:	b125      	cbz	r5, 8006562 <__swsetup_r+0x16>
 8006558:	69ab      	ldr	r3, [r5, #24]
 800655a:	b913      	cbnz	r3, 8006562 <__swsetup_r+0x16>
 800655c:	4628      	mov	r0, r5
 800655e:	f7ff fb1b 	bl	8005b98 <__sinit>
 8006562:	4b2e      	ldr	r3, [pc, #184]	; (800661c <__swsetup_r+0xd0>)
 8006564:	429c      	cmp	r4, r3
 8006566:	d10f      	bne.n	8006588 <__swsetup_r+0x3c>
 8006568:	686c      	ldr	r4, [r5, #4]
 800656a:	89a3      	ldrh	r3, [r4, #12]
 800656c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006570:	0719      	lsls	r1, r3, #28
 8006572:	d42c      	bmi.n	80065ce <__swsetup_r+0x82>
 8006574:	06dd      	lsls	r5, r3, #27
 8006576:	d411      	bmi.n	800659c <__swsetup_r+0x50>
 8006578:	2309      	movs	r3, #9
 800657a:	6033      	str	r3, [r6, #0]
 800657c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006580:	81a3      	strh	r3, [r4, #12]
 8006582:	f04f 30ff 	mov.w	r0, #4294967295
 8006586:	e03e      	b.n	8006606 <__swsetup_r+0xba>
 8006588:	4b25      	ldr	r3, [pc, #148]	; (8006620 <__swsetup_r+0xd4>)
 800658a:	429c      	cmp	r4, r3
 800658c:	d101      	bne.n	8006592 <__swsetup_r+0x46>
 800658e:	68ac      	ldr	r4, [r5, #8]
 8006590:	e7eb      	b.n	800656a <__swsetup_r+0x1e>
 8006592:	4b24      	ldr	r3, [pc, #144]	; (8006624 <__swsetup_r+0xd8>)
 8006594:	429c      	cmp	r4, r3
 8006596:	bf08      	it	eq
 8006598:	68ec      	ldreq	r4, [r5, #12]
 800659a:	e7e6      	b.n	800656a <__swsetup_r+0x1e>
 800659c:	0758      	lsls	r0, r3, #29
 800659e:	d512      	bpl.n	80065c6 <__swsetup_r+0x7a>
 80065a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065a2:	b141      	cbz	r1, 80065b6 <__swsetup_r+0x6a>
 80065a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065a8:	4299      	cmp	r1, r3
 80065aa:	d002      	beq.n	80065b2 <__swsetup_r+0x66>
 80065ac:	4630      	mov	r0, r6
 80065ae:	f000 f991 	bl	80068d4 <_free_r>
 80065b2:	2300      	movs	r3, #0
 80065b4:	6363      	str	r3, [r4, #52]	; 0x34
 80065b6:	89a3      	ldrh	r3, [r4, #12]
 80065b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80065bc:	81a3      	strh	r3, [r4, #12]
 80065be:	2300      	movs	r3, #0
 80065c0:	6063      	str	r3, [r4, #4]
 80065c2:	6923      	ldr	r3, [r4, #16]
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	89a3      	ldrh	r3, [r4, #12]
 80065c8:	f043 0308 	orr.w	r3, r3, #8
 80065cc:	81a3      	strh	r3, [r4, #12]
 80065ce:	6923      	ldr	r3, [r4, #16]
 80065d0:	b94b      	cbnz	r3, 80065e6 <__swsetup_r+0x9a>
 80065d2:	89a3      	ldrh	r3, [r4, #12]
 80065d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80065d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065dc:	d003      	beq.n	80065e6 <__swsetup_r+0x9a>
 80065de:	4621      	mov	r1, r4
 80065e0:	4630      	mov	r0, r6
 80065e2:	f000 f92b 	bl	800683c <__smakebuf_r>
 80065e6:	89a0      	ldrh	r0, [r4, #12]
 80065e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065ec:	f010 0301 	ands.w	r3, r0, #1
 80065f0:	d00a      	beq.n	8006608 <__swsetup_r+0xbc>
 80065f2:	2300      	movs	r3, #0
 80065f4:	60a3      	str	r3, [r4, #8]
 80065f6:	6963      	ldr	r3, [r4, #20]
 80065f8:	425b      	negs	r3, r3
 80065fa:	61a3      	str	r3, [r4, #24]
 80065fc:	6923      	ldr	r3, [r4, #16]
 80065fe:	b943      	cbnz	r3, 8006612 <__swsetup_r+0xc6>
 8006600:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006604:	d1ba      	bne.n	800657c <__swsetup_r+0x30>
 8006606:	bd70      	pop	{r4, r5, r6, pc}
 8006608:	0781      	lsls	r1, r0, #30
 800660a:	bf58      	it	pl
 800660c:	6963      	ldrpl	r3, [r4, #20]
 800660e:	60a3      	str	r3, [r4, #8]
 8006610:	e7f4      	b.n	80065fc <__swsetup_r+0xb0>
 8006612:	2000      	movs	r0, #0
 8006614:	e7f7      	b.n	8006606 <__swsetup_r+0xba>
 8006616:	bf00      	nop
 8006618:	20000014 	.word	0x20000014
 800661c:	08006a5c 	.word	0x08006a5c
 8006620:	08006a7c 	.word	0x08006a7c
 8006624:	08006a3c 	.word	0x08006a3c

08006628 <_close_r>:
 8006628:	b538      	push	{r3, r4, r5, lr}
 800662a:	4d06      	ldr	r5, [pc, #24]	; (8006644 <_close_r+0x1c>)
 800662c:	2300      	movs	r3, #0
 800662e:	4604      	mov	r4, r0
 8006630:	4608      	mov	r0, r1
 8006632:	602b      	str	r3, [r5, #0]
 8006634:	f7fa fd28 	bl	8001088 <_close>
 8006638:	1c43      	adds	r3, r0, #1
 800663a:	d102      	bne.n	8006642 <_close_r+0x1a>
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	b103      	cbz	r3, 8006642 <_close_r+0x1a>
 8006640:	6023      	str	r3, [r4, #0]
 8006642:	bd38      	pop	{r3, r4, r5, pc}
 8006644:	200009ec 	.word	0x200009ec

08006648 <__sflush_r>:
 8006648:	898a      	ldrh	r2, [r1, #12]
 800664a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800664e:	4605      	mov	r5, r0
 8006650:	0710      	lsls	r0, r2, #28
 8006652:	460c      	mov	r4, r1
 8006654:	d458      	bmi.n	8006708 <__sflush_r+0xc0>
 8006656:	684b      	ldr	r3, [r1, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	dc05      	bgt.n	8006668 <__sflush_r+0x20>
 800665c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800665e:	2b00      	cmp	r3, #0
 8006660:	dc02      	bgt.n	8006668 <__sflush_r+0x20>
 8006662:	2000      	movs	r0, #0
 8006664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800666a:	2e00      	cmp	r6, #0
 800666c:	d0f9      	beq.n	8006662 <__sflush_r+0x1a>
 800666e:	2300      	movs	r3, #0
 8006670:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006674:	682f      	ldr	r7, [r5, #0]
 8006676:	602b      	str	r3, [r5, #0]
 8006678:	d032      	beq.n	80066e0 <__sflush_r+0x98>
 800667a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800667c:	89a3      	ldrh	r3, [r4, #12]
 800667e:	075a      	lsls	r2, r3, #29
 8006680:	d505      	bpl.n	800668e <__sflush_r+0x46>
 8006682:	6863      	ldr	r3, [r4, #4]
 8006684:	1ac0      	subs	r0, r0, r3
 8006686:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006688:	b10b      	cbz	r3, 800668e <__sflush_r+0x46>
 800668a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800668c:	1ac0      	subs	r0, r0, r3
 800668e:	2300      	movs	r3, #0
 8006690:	4602      	mov	r2, r0
 8006692:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006694:	6a21      	ldr	r1, [r4, #32]
 8006696:	4628      	mov	r0, r5
 8006698:	47b0      	blx	r6
 800669a:	1c43      	adds	r3, r0, #1
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	d106      	bne.n	80066ae <__sflush_r+0x66>
 80066a0:	6829      	ldr	r1, [r5, #0]
 80066a2:	291d      	cmp	r1, #29
 80066a4:	d82c      	bhi.n	8006700 <__sflush_r+0xb8>
 80066a6:	4a2a      	ldr	r2, [pc, #168]	; (8006750 <__sflush_r+0x108>)
 80066a8:	40ca      	lsrs	r2, r1
 80066aa:	07d6      	lsls	r6, r2, #31
 80066ac:	d528      	bpl.n	8006700 <__sflush_r+0xb8>
 80066ae:	2200      	movs	r2, #0
 80066b0:	6062      	str	r2, [r4, #4]
 80066b2:	04d9      	lsls	r1, r3, #19
 80066b4:	6922      	ldr	r2, [r4, #16]
 80066b6:	6022      	str	r2, [r4, #0]
 80066b8:	d504      	bpl.n	80066c4 <__sflush_r+0x7c>
 80066ba:	1c42      	adds	r2, r0, #1
 80066bc:	d101      	bne.n	80066c2 <__sflush_r+0x7a>
 80066be:	682b      	ldr	r3, [r5, #0]
 80066c0:	b903      	cbnz	r3, 80066c4 <__sflush_r+0x7c>
 80066c2:	6560      	str	r0, [r4, #84]	; 0x54
 80066c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066c6:	602f      	str	r7, [r5, #0]
 80066c8:	2900      	cmp	r1, #0
 80066ca:	d0ca      	beq.n	8006662 <__sflush_r+0x1a>
 80066cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066d0:	4299      	cmp	r1, r3
 80066d2:	d002      	beq.n	80066da <__sflush_r+0x92>
 80066d4:	4628      	mov	r0, r5
 80066d6:	f000 f8fd 	bl	80068d4 <_free_r>
 80066da:	2000      	movs	r0, #0
 80066dc:	6360      	str	r0, [r4, #52]	; 0x34
 80066de:	e7c1      	b.n	8006664 <__sflush_r+0x1c>
 80066e0:	6a21      	ldr	r1, [r4, #32]
 80066e2:	2301      	movs	r3, #1
 80066e4:	4628      	mov	r0, r5
 80066e6:	47b0      	blx	r6
 80066e8:	1c41      	adds	r1, r0, #1
 80066ea:	d1c7      	bne.n	800667c <__sflush_r+0x34>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0c4      	beq.n	800667c <__sflush_r+0x34>
 80066f2:	2b1d      	cmp	r3, #29
 80066f4:	d001      	beq.n	80066fa <__sflush_r+0xb2>
 80066f6:	2b16      	cmp	r3, #22
 80066f8:	d101      	bne.n	80066fe <__sflush_r+0xb6>
 80066fa:	602f      	str	r7, [r5, #0]
 80066fc:	e7b1      	b.n	8006662 <__sflush_r+0x1a>
 80066fe:	89a3      	ldrh	r3, [r4, #12]
 8006700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006704:	81a3      	strh	r3, [r4, #12]
 8006706:	e7ad      	b.n	8006664 <__sflush_r+0x1c>
 8006708:	690f      	ldr	r7, [r1, #16]
 800670a:	2f00      	cmp	r7, #0
 800670c:	d0a9      	beq.n	8006662 <__sflush_r+0x1a>
 800670e:	0793      	lsls	r3, r2, #30
 8006710:	680e      	ldr	r6, [r1, #0]
 8006712:	bf08      	it	eq
 8006714:	694b      	ldreq	r3, [r1, #20]
 8006716:	600f      	str	r7, [r1, #0]
 8006718:	bf18      	it	ne
 800671a:	2300      	movne	r3, #0
 800671c:	eba6 0807 	sub.w	r8, r6, r7
 8006720:	608b      	str	r3, [r1, #8]
 8006722:	f1b8 0f00 	cmp.w	r8, #0
 8006726:	dd9c      	ble.n	8006662 <__sflush_r+0x1a>
 8006728:	6a21      	ldr	r1, [r4, #32]
 800672a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800672c:	4643      	mov	r3, r8
 800672e:	463a      	mov	r2, r7
 8006730:	4628      	mov	r0, r5
 8006732:	47b0      	blx	r6
 8006734:	2800      	cmp	r0, #0
 8006736:	dc06      	bgt.n	8006746 <__sflush_r+0xfe>
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800673e:	81a3      	strh	r3, [r4, #12]
 8006740:	f04f 30ff 	mov.w	r0, #4294967295
 8006744:	e78e      	b.n	8006664 <__sflush_r+0x1c>
 8006746:	4407      	add	r7, r0
 8006748:	eba8 0800 	sub.w	r8, r8, r0
 800674c:	e7e9      	b.n	8006722 <__sflush_r+0xda>
 800674e:	bf00      	nop
 8006750:	20400001 	.word	0x20400001

08006754 <_fflush_r>:
 8006754:	b538      	push	{r3, r4, r5, lr}
 8006756:	690b      	ldr	r3, [r1, #16]
 8006758:	4605      	mov	r5, r0
 800675a:	460c      	mov	r4, r1
 800675c:	b913      	cbnz	r3, 8006764 <_fflush_r+0x10>
 800675e:	2500      	movs	r5, #0
 8006760:	4628      	mov	r0, r5
 8006762:	bd38      	pop	{r3, r4, r5, pc}
 8006764:	b118      	cbz	r0, 800676e <_fflush_r+0x1a>
 8006766:	6983      	ldr	r3, [r0, #24]
 8006768:	b90b      	cbnz	r3, 800676e <_fflush_r+0x1a>
 800676a:	f7ff fa15 	bl	8005b98 <__sinit>
 800676e:	4b14      	ldr	r3, [pc, #80]	; (80067c0 <_fflush_r+0x6c>)
 8006770:	429c      	cmp	r4, r3
 8006772:	d11b      	bne.n	80067ac <_fflush_r+0x58>
 8006774:	686c      	ldr	r4, [r5, #4]
 8006776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0ef      	beq.n	800675e <_fflush_r+0xa>
 800677e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006780:	07d0      	lsls	r0, r2, #31
 8006782:	d404      	bmi.n	800678e <_fflush_r+0x3a>
 8006784:	0599      	lsls	r1, r3, #22
 8006786:	d402      	bmi.n	800678e <_fflush_r+0x3a>
 8006788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800678a:	f7ff faa3 	bl	8005cd4 <__retarget_lock_acquire_recursive>
 800678e:	4628      	mov	r0, r5
 8006790:	4621      	mov	r1, r4
 8006792:	f7ff ff59 	bl	8006648 <__sflush_r>
 8006796:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006798:	07da      	lsls	r2, r3, #31
 800679a:	4605      	mov	r5, r0
 800679c:	d4e0      	bmi.n	8006760 <_fflush_r+0xc>
 800679e:	89a3      	ldrh	r3, [r4, #12]
 80067a0:	059b      	lsls	r3, r3, #22
 80067a2:	d4dd      	bmi.n	8006760 <_fflush_r+0xc>
 80067a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067a6:	f7ff fa96 	bl	8005cd6 <__retarget_lock_release_recursive>
 80067aa:	e7d9      	b.n	8006760 <_fflush_r+0xc>
 80067ac:	4b05      	ldr	r3, [pc, #20]	; (80067c4 <_fflush_r+0x70>)
 80067ae:	429c      	cmp	r4, r3
 80067b0:	d101      	bne.n	80067b6 <_fflush_r+0x62>
 80067b2:	68ac      	ldr	r4, [r5, #8]
 80067b4:	e7df      	b.n	8006776 <_fflush_r+0x22>
 80067b6:	4b04      	ldr	r3, [pc, #16]	; (80067c8 <_fflush_r+0x74>)
 80067b8:	429c      	cmp	r4, r3
 80067ba:	bf08      	it	eq
 80067bc:	68ec      	ldreq	r4, [r5, #12]
 80067be:	e7da      	b.n	8006776 <_fflush_r+0x22>
 80067c0:	08006a5c 	.word	0x08006a5c
 80067c4:	08006a7c 	.word	0x08006a7c
 80067c8:	08006a3c 	.word	0x08006a3c

080067cc <_lseek_r>:
 80067cc:	b538      	push	{r3, r4, r5, lr}
 80067ce:	4d07      	ldr	r5, [pc, #28]	; (80067ec <_lseek_r+0x20>)
 80067d0:	4604      	mov	r4, r0
 80067d2:	4608      	mov	r0, r1
 80067d4:	4611      	mov	r1, r2
 80067d6:	2200      	movs	r2, #0
 80067d8:	602a      	str	r2, [r5, #0]
 80067da:	461a      	mov	r2, r3
 80067dc:	f7fa fc7b 	bl	80010d6 <_lseek>
 80067e0:	1c43      	adds	r3, r0, #1
 80067e2:	d102      	bne.n	80067ea <_lseek_r+0x1e>
 80067e4:	682b      	ldr	r3, [r5, #0]
 80067e6:	b103      	cbz	r3, 80067ea <_lseek_r+0x1e>
 80067e8:	6023      	str	r3, [r4, #0]
 80067ea:	bd38      	pop	{r3, r4, r5, pc}
 80067ec:	200009ec 	.word	0x200009ec

080067f0 <__swhatbuf_r>:
 80067f0:	b570      	push	{r4, r5, r6, lr}
 80067f2:	460e      	mov	r6, r1
 80067f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f8:	2900      	cmp	r1, #0
 80067fa:	b096      	sub	sp, #88	; 0x58
 80067fc:	4614      	mov	r4, r2
 80067fe:	461d      	mov	r5, r3
 8006800:	da08      	bge.n	8006814 <__swhatbuf_r+0x24>
 8006802:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	602a      	str	r2, [r5, #0]
 800680a:	061a      	lsls	r2, r3, #24
 800680c:	d410      	bmi.n	8006830 <__swhatbuf_r+0x40>
 800680e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006812:	e00e      	b.n	8006832 <__swhatbuf_r+0x42>
 8006814:	466a      	mov	r2, sp
 8006816:	f000 f8bb 	bl	8006990 <_fstat_r>
 800681a:	2800      	cmp	r0, #0
 800681c:	dbf1      	blt.n	8006802 <__swhatbuf_r+0x12>
 800681e:	9a01      	ldr	r2, [sp, #4]
 8006820:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006824:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006828:	425a      	negs	r2, r3
 800682a:	415a      	adcs	r2, r3
 800682c:	602a      	str	r2, [r5, #0]
 800682e:	e7ee      	b.n	800680e <__swhatbuf_r+0x1e>
 8006830:	2340      	movs	r3, #64	; 0x40
 8006832:	2000      	movs	r0, #0
 8006834:	6023      	str	r3, [r4, #0]
 8006836:	b016      	add	sp, #88	; 0x58
 8006838:	bd70      	pop	{r4, r5, r6, pc}
	...

0800683c <__smakebuf_r>:
 800683c:	898b      	ldrh	r3, [r1, #12]
 800683e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006840:	079d      	lsls	r5, r3, #30
 8006842:	4606      	mov	r6, r0
 8006844:	460c      	mov	r4, r1
 8006846:	d507      	bpl.n	8006858 <__smakebuf_r+0x1c>
 8006848:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	6123      	str	r3, [r4, #16]
 8006850:	2301      	movs	r3, #1
 8006852:	6163      	str	r3, [r4, #20]
 8006854:	b002      	add	sp, #8
 8006856:	bd70      	pop	{r4, r5, r6, pc}
 8006858:	ab01      	add	r3, sp, #4
 800685a:	466a      	mov	r2, sp
 800685c:	f7ff ffc8 	bl	80067f0 <__swhatbuf_r>
 8006860:	9900      	ldr	r1, [sp, #0]
 8006862:	4605      	mov	r5, r0
 8006864:	4630      	mov	r0, r6
 8006866:	f7ff fa57 	bl	8005d18 <_malloc_r>
 800686a:	b948      	cbnz	r0, 8006880 <__smakebuf_r+0x44>
 800686c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006870:	059a      	lsls	r2, r3, #22
 8006872:	d4ef      	bmi.n	8006854 <__smakebuf_r+0x18>
 8006874:	f023 0303 	bic.w	r3, r3, #3
 8006878:	f043 0302 	orr.w	r3, r3, #2
 800687c:	81a3      	strh	r3, [r4, #12]
 800687e:	e7e3      	b.n	8006848 <__smakebuf_r+0xc>
 8006880:	4b0d      	ldr	r3, [pc, #52]	; (80068b8 <__smakebuf_r+0x7c>)
 8006882:	62b3      	str	r3, [r6, #40]	; 0x28
 8006884:	89a3      	ldrh	r3, [r4, #12]
 8006886:	6020      	str	r0, [r4, #0]
 8006888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800688c:	81a3      	strh	r3, [r4, #12]
 800688e:	9b00      	ldr	r3, [sp, #0]
 8006890:	6163      	str	r3, [r4, #20]
 8006892:	9b01      	ldr	r3, [sp, #4]
 8006894:	6120      	str	r0, [r4, #16]
 8006896:	b15b      	cbz	r3, 80068b0 <__smakebuf_r+0x74>
 8006898:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800689c:	4630      	mov	r0, r6
 800689e:	f000 f889 	bl	80069b4 <_isatty_r>
 80068a2:	b128      	cbz	r0, 80068b0 <__smakebuf_r+0x74>
 80068a4:	89a3      	ldrh	r3, [r4, #12]
 80068a6:	f023 0303 	bic.w	r3, r3, #3
 80068aa:	f043 0301 	orr.w	r3, r3, #1
 80068ae:	81a3      	strh	r3, [r4, #12]
 80068b0:	89a0      	ldrh	r0, [r4, #12]
 80068b2:	4305      	orrs	r5, r0
 80068b4:	81a5      	strh	r5, [r4, #12]
 80068b6:	e7cd      	b.n	8006854 <__smakebuf_r+0x18>
 80068b8:	08005b31 	.word	0x08005b31

080068bc <__malloc_lock>:
 80068bc:	4801      	ldr	r0, [pc, #4]	; (80068c4 <__malloc_lock+0x8>)
 80068be:	f7ff ba09 	b.w	8005cd4 <__retarget_lock_acquire_recursive>
 80068c2:	bf00      	nop
 80068c4:	200009e0 	.word	0x200009e0

080068c8 <__malloc_unlock>:
 80068c8:	4801      	ldr	r0, [pc, #4]	; (80068d0 <__malloc_unlock+0x8>)
 80068ca:	f7ff ba04 	b.w	8005cd6 <__retarget_lock_release_recursive>
 80068ce:	bf00      	nop
 80068d0:	200009e0 	.word	0x200009e0

080068d4 <_free_r>:
 80068d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068d6:	2900      	cmp	r1, #0
 80068d8:	d044      	beq.n	8006964 <_free_r+0x90>
 80068da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068de:	9001      	str	r0, [sp, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f1a1 0404 	sub.w	r4, r1, #4
 80068e6:	bfb8      	it	lt
 80068e8:	18e4      	addlt	r4, r4, r3
 80068ea:	f7ff ffe7 	bl	80068bc <__malloc_lock>
 80068ee:	4a1e      	ldr	r2, [pc, #120]	; (8006968 <_free_r+0x94>)
 80068f0:	9801      	ldr	r0, [sp, #4]
 80068f2:	6813      	ldr	r3, [r2, #0]
 80068f4:	b933      	cbnz	r3, 8006904 <_free_r+0x30>
 80068f6:	6063      	str	r3, [r4, #4]
 80068f8:	6014      	str	r4, [r2, #0]
 80068fa:	b003      	add	sp, #12
 80068fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006900:	f7ff bfe2 	b.w	80068c8 <__malloc_unlock>
 8006904:	42a3      	cmp	r3, r4
 8006906:	d908      	bls.n	800691a <_free_r+0x46>
 8006908:	6825      	ldr	r5, [r4, #0]
 800690a:	1961      	adds	r1, r4, r5
 800690c:	428b      	cmp	r3, r1
 800690e:	bf01      	itttt	eq
 8006910:	6819      	ldreq	r1, [r3, #0]
 8006912:	685b      	ldreq	r3, [r3, #4]
 8006914:	1949      	addeq	r1, r1, r5
 8006916:	6021      	streq	r1, [r4, #0]
 8006918:	e7ed      	b.n	80068f6 <_free_r+0x22>
 800691a:	461a      	mov	r2, r3
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	b10b      	cbz	r3, 8006924 <_free_r+0x50>
 8006920:	42a3      	cmp	r3, r4
 8006922:	d9fa      	bls.n	800691a <_free_r+0x46>
 8006924:	6811      	ldr	r1, [r2, #0]
 8006926:	1855      	adds	r5, r2, r1
 8006928:	42a5      	cmp	r5, r4
 800692a:	d10b      	bne.n	8006944 <_free_r+0x70>
 800692c:	6824      	ldr	r4, [r4, #0]
 800692e:	4421      	add	r1, r4
 8006930:	1854      	adds	r4, r2, r1
 8006932:	42a3      	cmp	r3, r4
 8006934:	6011      	str	r1, [r2, #0]
 8006936:	d1e0      	bne.n	80068fa <_free_r+0x26>
 8006938:	681c      	ldr	r4, [r3, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	6053      	str	r3, [r2, #4]
 800693e:	4421      	add	r1, r4
 8006940:	6011      	str	r1, [r2, #0]
 8006942:	e7da      	b.n	80068fa <_free_r+0x26>
 8006944:	d902      	bls.n	800694c <_free_r+0x78>
 8006946:	230c      	movs	r3, #12
 8006948:	6003      	str	r3, [r0, #0]
 800694a:	e7d6      	b.n	80068fa <_free_r+0x26>
 800694c:	6825      	ldr	r5, [r4, #0]
 800694e:	1961      	adds	r1, r4, r5
 8006950:	428b      	cmp	r3, r1
 8006952:	bf04      	itt	eq
 8006954:	6819      	ldreq	r1, [r3, #0]
 8006956:	685b      	ldreq	r3, [r3, #4]
 8006958:	6063      	str	r3, [r4, #4]
 800695a:	bf04      	itt	eq
 800695c:	1949      	addeq	r1, r1, r5
 800695e:	6021      	streq	r1, [r4, #0]
 8006960:	6054      	str	r4, [r2, #4]
 8006962:	e7ca      	b.n	80068fa <_free_r+0x26>
 8006964:	b003      	add	sp, #12
 8006966:	bd30      	pop	{r4, r5, pc}
 8006968:	200009e4 	.word	0x200009e4

0800696c <_read_r>:
 800696c:	b538      	push	{r3, r4, r5, lr}
 800696e:	4d07      	ldr	r5, [pc, #28]	; (800698c <_read_r+0x20>)
 8006970:	4604      	mov	r4, r0
 8006972:	4608      	mov	r0, r1
 8006974:	4611      	mov	r1, r2
 8006976:	2200      	movs	r2, #0
 8006978:	602a      	str	r2, [r5, #0]
 800697a:	461a      	mov	r2, r3
 800697c:	f7fa fb4b 	bl	8001016 <_read>
 8006980:	1c43      	adds	r3, r0, #1
 8006982:	d102      	bne.n	800698a <_read_r+0x1e>
 8006984:	682b      	ldr	r3, [r5, #0]
 8006986:	b103      	cbz	r3, 800698a <_read_r+0x1e>
 8006988:	6023      	str	r3, [r4, #0]
 800698a:	bd38      	pop	{r3, r4, r5, pc}
 800698c:	200009ec 	.word	0x200009ec

08006990 <_fstat_r>:
 8006990:	b538      	push	{r3, r4, r5, lr}
 8006992:	4d07      	ldr	r5, [pc, #28]	; (80069b0 <_fstat_r+0x20>)
 8006994:	2300      	movs	r3, #0
 8006996:	4604      	mov	r4, r0
 8006998:	4608      	mov	r0, r1
 800699a:	4611      	mov	r1, r2
 800699c:	602b      	str	r3, [r5, #0]
 800699e:	f7fa fb7f 	bl	80010a0 <_fstat>
 80069a2:	1c43      	adds	r3, r0, #1
 80069a4:	d102      	bne.n	80069ac <_fstat_r+0x1c>
 80069a6:	682b      	ldr	r3, [r5, #0]
 80069a8:	b103      	cbz	r3, 80069ac <_fstat_r+0x1c>
 80069aa:	6023      	str	r3, [r4, #0]
 80069ac:	bd38      	pop	{r3, r4, r5, pc}
 80069ae:	bf00      	nop
 80069b0:	200009ec 	.word	0x200009ec

080069b4 <_isatty_r>:
 80069b4:	b538      	push	{r3, r4, r5, lr}
 80069b6:	4d06      	ldr	r5, [pc, #24]	; (80069d0 <_isatty_r+0x1c>)
 80069b8:	2300      	movs	r3, #0
 80069ba:	4604      	mov	r4, r0
 80069bc:	4608      	mov	r0, r1
 80069be:	602b      	str	r3, [r5, #0]
 80069c0:	f7fa fb7e 	bl	80010c0 <_isatty>
 80069c4:	1c43      	adds	r3, r0, #1
 80069c6:	d102      	bne.n	80069ce <_isatty_r+0x1a>
 80069c8:	682b      	ldr	r3, [r5, #0]
 80069ca:	b103      	cbz	r3, 80069ce <_isatty_r+0x1a>
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	bd38      	pop	{r3, r4, r5, pc}
 80069d0:	200009ec 	.word	0x200009ec

080069d4 <_init>:
 80069d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d6:	bf00      	nop
 80069d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069da:	bc08      	pop	{r3}
 80069dc:	469e      	mov	lr, r3
 80069de:	4770      	bx	lr

080069e0 <_fini>:
 80069e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e2:	bf00      	nop
 80069e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069e6:	bc08      	pop	{r3}
 80069e8:	469e      	mov	lr, r3
 80069ea:	4770      	bx	lr
